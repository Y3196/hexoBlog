/*
 Navicat Premium Data Transfer

 Source Server         : FelixRoot
 Source Server Type    : MySQL
 Source Server Version : 80026
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80026
 File Encoding         : 65001

 Date: 25/08/2024 19:43:02
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for mytable
-- ----------------------------
DROP TABLE IF EXISTS `mytable`;
CREATE TABLE `mytable`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `info` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of mytable
-- ----------------------------
INSERT INTO `mytable` VALUES (1, 'felix');
INSERT INTO `mytable` VALUES (2, 'ting');
INSERT INTO `mytable` VALUES (3, '1');
INSERT INTO `mytable` VALUES (4, '11111');
INSERT INTO `mytable` VALUES (5, '2222222222');
INSERT INTO `mytable` VALUES (6, '22222333333333333');
INSERT INTO `mytable` VALUES (7, '');
INSERT INTO `mytable` VALUES (8, '222');
INSERT INTO `mytable` VALUES (9, '222');

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tags
-- ----------------------------

-- ----------------------------
-- Table structure for tb_article
-- ----------------------------
DROP TABLE IF EXISTS `tb_article`;
CREATE TABLE `tb_article`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` bigint UNSIGNED NULL DEFAULT NULL,
  `category_id` bigint UNSIGNED NULL DEFAULT NULL,
  `article_cover` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `article_title` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `article_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `type` bigint NULL DEFAULT NULL,
  `original_url` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `is_top` bigint NULL DEFAULT NULL,
  `is_delete` bigint NULL DEFAULT 0,
  `status` bigint NULL DEFAULT NULL,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 107 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_article
-- ----------------------------
INSERT INTO `tb_article` VALUES (65, 1006, 187, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/db9d713ef259621c67aeab6fbd8ebba6.jpg', 'springBoot的协同过滤算法', '# 推荐核心算法\n```Java\npackage com.example.demo.recommend.core;\n\nimport com.example.demo.recommend.dto.RelateDTO;\nimport com.google.common.collect.Lists;\n\n\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\n/**\n * @author Felix\n * @Description:核心算法\n * @Package com.supermarket.product.core\n * @date 2021/4/22 16:12\n */\npublic class CoreMath {\n    /**\n     * 推荐\n     * @param userId 用户id\n     * @param list 推荐的idList集合\n     * @return\n     */\n    public List<Integer> recommend(Integer userId, List<RelateDTO> list) {\n        //找到最近邻用户id\n        Map<Double, Integer> distances = computeNearestNeighbor(userId, list);\n        //取出相似度最近的用户id\n        Integer nearest = distances.values().iterator().next();\n        Iterator<Integer> iterator = distances.values().iterator();\n        while(iterator.hasNext()){\n            nearest = iterator.next();\n        }\n        Map<Integer, List<RelateDTO>> userMap =list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\n\n        //最近邻用户买过的商品id列表\n        List<Integer> neighborItemList = userMap.get(nearest).stream().map(e->e.getProductId()).collect(Collectors.toList());\n        //指定用户买过的商品id列表\n        List<Integer> userItemList  = userMap.get(userId).stream().map(e->e.getProductId()).collect(Collectors.toList());\n\n        //找到最近邻买过，但是该用户没买过的商品id，计算推荐，放入推荐列表\n        List<Integer> recommendList = new ArrayList<>();\n        for (Integer item : neighborItemList) {\n            if (!userItemList.contains(item)) {\n                recommendList.add(item);\n            }\n        }\n        Collections.sort(recommendList);\n        return recommendList;\n    }\n\n    /**\n     * 在给定userId的情况下，计算其他用户和它的相关系数并排序\n     * @param userId\n     * @param list\n     * @return\n     */\n    private Map<Double, Integer> computeNearestNeighbor(Integer userId, List<RelateDTO> list) {\n        Map<Integer, List<RelateDTO>> userMap = list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\n        //treemap是从小到大排好序的\n        Map<Double, Integer> distances = new TreeMap<>();\n        userMap.forEach((k,v)->{\n            if(k.intValue() != userId.intValue()){\n                double distance = pearson_dis(v,userMap.get(userId));\n                distances.put(distance, k);\n            }\n        });\n        return distances;\n    }\n\n    /**\n     * 计算两个序列间的相关系数\n     *\n     * @param xList 其他用户的数据集\n     * @param yList 当前用户的数据集\n     * @return\n     */\n    private double pearson_dis(List<RelateDTO> xList, List<RelateDTO> yList) {\n        List<Integer> xs= Lists.newArrayList();\n        List<Integer> ys= Lists.newArrayList();\n        xList.forEach(x->{\n            yList.forEach(y->{\n                if(x.getProductId().intValue() == y.getProductId().intValue()){\n                    xs.add(x.getIndex());\n                    ys.add(y.getIndex());\n                }\n            });\n        });\n        return getRelate(xs,ys);\n    }\n\n    /**\n     * 方法描述: 皮尔森（pearson）相关系数计算\n     * (x1,y1) 理解为 a 用户对 x 商品的点击次数和对 y 商品的点击次数\n     * @param xs\n     * @param ys\n     * @Return {@link Double}\n     * @throws\n     * @author tarzan\n     * @date 2020年07月31日 17:03:20\n     */\n    public static Double getRelate(List<Integer> xs, List<Integer> ys){\n        int n=xs.size();\n        double Ex= xs.stream().mapToDouble(x->x).sum();\n        double Ey=ys.stream().mapToDouble(y->y).sum();\n        double Ex2=xs.stream().mapToDouble(x-> Math.pow(x,2)).sum();\n        double Ey2=ys.stream().mapToDouble(y-> Math.pow(y,2)).sum();\n        double Exy= IntStream.range(0,n).mapToDouble(i->xs.get(i)*ys.get(i)).sum();\n        double numerator=Exy-Ex*Ey/n;\n        double denominator= Math.sqrt((Ex2- Math.pow(Ex,2)/n)*(Ey2- Math.pow(Ey,2)/n));\n        if (denominator==0) {\n            return 0.0;\n        }\n        return numerator/denominator;\n    }\n\n}\n```\n\n\n## 创建Impl层写业务，比如想在一个模块中引用用户行为进行推荐。\n这里做个例子，比如要做音乐系统，想通过用户的**收藏**这个**行为**进行推荐相似的音乐则在这个业务层里写业务。\n1. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a2c8582123afde21ad6979ab03f818f4.png)\n2. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/b921d978559c00165b650f57da87220d.png)\n3. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d8f2b06c718ff93a62a82117873246bc.png)\n4. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/92e3ba5506847804acd85f2d2d217997.png)\n5. 获取收藏的歌\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e0f6721dc0b6f0cb3ee432708d6e321e.png)\n6. 获取歌曲\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d0ff9af0868a5fe0b2193829fed9bfa6.png)\n7. 推荐歌曲\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/eaff1e5550a796c1e21b0832ef71e990.png)\n8. 通过收藏行为推荐歌单列表\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e95f3e165ece0a067131e72b78b7035b.png)、\n## 在controller层中调用\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8da1128aa927ea6782573acd4a2d74c0.png)\n ## 效果 ----------------->\n前端是拿别人的，所以我们只看效果\n1. 用户1\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/1284190681838bfb368455f52f2e9990.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d9cab0b1d6b72a2b7d6d4f3486a06f44.png)\n2. 用户2\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ccac757dc4c1e31b69b42f5d5192a724.png)\n![image.png](1)\n## 项目链接\n[gitee地址](https://gitee.com/yuxuan-yuxuan/collaborative-filtering-example)', 1, '', 0, 0, 1, '2022-02-01 23:27:42.000', '2022-03-10 10:23:30.000');
INSERT INTO `tb_article` VALUES (66, 1006, 188, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/963322878219602581b2f725ffddf128.png', '企业级uniapp集成OCR的应用', '# 这里用百度OCR\n## 第一步：注册百度云账号\n [百度OCR链接](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F%3F_%3D1660902879514%26fromai%3D1#/ai/ocr/app/list)\n## 第二步：进入百度云点击控制台 -> 搜索OCR -> 根据情况创建应用\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/45da5656751d54b7be065e6ed2ac598c.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/414572f75f75066c1f784a35164b7945.png)\n点击立即使用\n## 第三步：创建应用 获取AK、SK\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/36cd355568d9d5b8417cc4063e09b018.png)\n## 第四步： 填写相应的东西（可以随便填）\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/fc01152c52295c1aac774b23f10fc19a.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/3a7e58a68028108abb997c914cd48a60.png)\n## 第五步： 查看AK、SK\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/aa71f230a6c6359e775e59a0e8a5da0d.png)\n查看百度OCR Api文档\n[文字识别OCR](https://cloud.baidu.com/doc/OCR/s/1k3h7y3db)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/4249f3d70a84046cce4b604520b451c7.png)\n\n**最重要的： 要想在uniapp中使用百度OCR的话 必须要运行在微信开发者工具里，不然会报错**\n# 在微信小程序开发者运行\n其中微信小程序开发者运行的时候 要改的Appid 可以扫码获取的 如果是游客的话，运行不了\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e6b3e0e7502467ca90782d4fb0e97622.png)\n# 代码整合\n```Uniapp\n<template>\n	<view class=\"content\">\n		<!-- <image class=\"logo\" src=\"/static/logo.png\"></image> -->\n		<view class=\"text-area\">\n			<text class=\"title\">{{title}}</text>\n		</view>\n		<view class=\"\" @click=\"getACSS_TOKEN\" style=\"font-size: 36px;\">\n			gettoken\n		</view>\n		<view class=\"\" @click=\"test\">\n			test\n		</view>\n		<image :src=\"base64str\" mode=\"\"></image>\n	</view>\n</template>\n \n<script>\n	export default {\n		data() {\n			return {\n				title: \'Hello\',\n				apiKey: \'\',\n				SecretKey: \'\',\n				base64str: \'\'\n			}\n		},\n		onLoad() {\n			// 在百度智能云那边创建一个应用后可以获取到下面两个参数 api Key  和  Secret Key\n			this.apiKey = uni.getStorageSync(\'apiKey\')\n			this.SecretKey = uni.getStorageSync(\'SecretKey\')\n		},\n		methods: {\n			test() {\n				let that = this\n				let access_token = uni.getStorageSync(\'access_token\')\n				\n				uni.chooseImage({\n				    count: 1, //默认9\n				    sizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\n				    sourceType: [\'camera\',\'album\'], //从拍照或者相册选择 \n				    success: function (res) {\n				        \n						let tempFilePaths = res.tempFilePaths[0]\n						// 图片转 base64\n						uni.getFileSystemManager().readFile({\n							filePath: tempFilePaths, //选择图片返回的相对路径  \n							encoding: \'base64\', //编码格式  \n							success: v=> { //成功的回调  \n								let base64 =  v.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \n								that.base64str = \'data:image/jpeg;base64,\' + base64\n								\n								// 开始识别\n								uni.request({\n									url: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' + access_token,\n									method: \'POST\',\n									data: {\n										image: base64,\n										id_card_side: \'front\'// 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\n									},\n									header: {\n										\'Content-Type\': \'application/x-www-form-urlencoded\'\n									},\n									success: res => {\n										console.log(res.data)\n										\n									}\n								});\n							 }  \n						}) \n						\n						\n				    }\n				});\n				\n			},\n			// access_token 有效期为 2592000 秒 / 30天\n			getACSS_TOKEN() {\n				let that = this\n				uni.request({\n					url: \'https://aip.baidubce.com/oauth/2.0/token\',\n					method: \'POST\',\n					data: {\n						grant_type: \'client_credentials\',\n						client_id: \'5tiRo6aR7rMao1Yee0KQenu1\',// 对应自己创建应用里获取的AK\n						client_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\'// 对应自己创建应用里获取的SK\n					},\n					header: {\n						\'Content-Type\': \'application/x-www-form-urlencoded\'\n					},\n					success: res => {\n						console.log(res.data)\n						uni.setStorageSync(\'access_token\', res.data.access_token)\n						// console.log(JSON.parse(res.data))\n					}\n				});\n			}\n		}\n	}\n</script>\n \n<style>\n	.content {\n		display: flex;\n		flex-direction: column;\n		align-items: center;\n		justify-content: center;\n	}\n \n	.logo {\n		height: 200rpx;\n		width: 200rpx;\n		margin-top: 200rpx;\n		margin-left: auto;\n		margin-right: auto;\n		margin-bottom: 50rpx;\n	}\n \n	.text-area {\n		display: flex;\n		justify-content: center;\n	}\n \n	.title {\n		font-size: 36rpx;\n		color: #8f8f94;\n	}\n</style>\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a4152f1f3bec039e2006c0d2f0f71efc.png)\n# 实战代码整合 ----> 结合表单进行\n```html\n<template>\n	<view class=\"wrap\">\n		<u-form :model=\"model\" :rules=\"rules\" ref=\"uForm\">\n			<u-form-item :required=\"true\" label-width=\"150\" :label-position=\"labelPosition\" label=\"身份证号码\" prop=\"idNo\">\n				<u-input placeholder=\"请输入身份证号码\" v-model=\"model.idNo\" type=\"text\" maxlength=\"18\"></u-input>\n				<u-icon size=\"30px\" name=\"camera\" slot=\"right\" color=\"#2979ff\" @click=\"info()\"></u-icon>\n			</u-form-item>\n			\n		</u-form>\n \n		\n	\n	</view>\n</template>\n \n<script>\n	export default {\n		data() {\n			let that = this;\n			return {\n				model: {\n					\n					\n					idNo: \'\',\n					\n				},\n				\n			};\n		},\n		onReady() {\n			this.$refs.uForm.setRules(this.rules);\n		},\n	\n		onLoad() {\n	\n			this.getToken()\n		},\n		methods: {\n			info() {\n				let that = this\n				let access_token = uni.getStorageSync(\'access_token\')\n \n				uni.chooseImage({\n					count: 1, //默认9\n					sizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\n					sourceType: [\'camera\', \'album\'], //从相册选择 或者拍照\n					success: function(res) {\n \n						let tempFilePaths = res.tempFilePaths[0]\n						// 图片转 base64\n						uni.getFileSystemManager().readFile({\n							filePath: tempFilePaths, //选择图片返回的相对路径  \n							encoding: \'base64\', //编码格式  \n							success: v => { //成功的回调  \n								let base64 = v\n									.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \n								that.base64str = \'data:image/jpeg;base64,\' + base64\n \n								// 开始识别\n								uni.request({\n									url: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' +\n										access_token,\n									method: \'POST\',\n									data: {\n										image: base64,\n										id_card_side: \'front\' // 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\n									},\n									header: {\n										\'Content-Type\': \'application/x-www-form-urlencoded\'\n									},\n									success: res => {\n										console.log(res.data)\n										// console.log(res.data.words_result.住址.words)\n										that.model.idNo = res.data.words_result.公民身份号码\n											.words\n										that.model.hlocation = res.data.words_result.住址\n											.words\n										that.model.race = res.data.words_result.民族\n											.words\n										that.model.gender = res.data.words_result.性别\n											.words\n									}\n								});\n							}\n						})\n \n \n					}\n				});\n			},\n			getToken() {\n				let that = this\n				uni.request({\n					url: \'https://aip.baidubce.com/oauth/2.0/token\',\n					method: \'POST\',\n					data: {\n						grant_type: \'client_credentials\',\n						client_id: \'5tiRo6aR7rMao1Yee0KQenu1\', // 在百度智能云那边创建一个应用后可以获取\n						client_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\' // 在百度智能云那边创建一个应用后可以获取\n					},\n					header: {\n						\'Content-Type\': \'application/x-www-form-urlencoded\'\n					},\n					success: res => {\n						console.log(res.data)\n						uni.setStorageSync(\'access_token\', res.data.access_token)\n						// console.log(JSON.parse(res.data))\n					}\n				});\n			},\n			\n		}\n	};\n</script>\n \n<style scoped lang=\"scss\">\n	.wrap {\n		padding: 30rpx;\n	}\n \n	.row {\n		margin-top: 35px;\n		margin-left: 76px;\n	}\n</style>\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9af51b55bddae69ca8319350964f9a40.png)\n\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f18480a830d359d481d92d652e1ebe04.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/01231c4c2de1ab58b43547c0898ef4da.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/c273ca9b0ffcbd842d7ec4f082eda8b6.png)\n**主动获取access_token变成 运行主动获取 **\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9cd12d940fdd94279b0506c8234b1d28.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/efd8584c4a76cf2e1b916bdebe05b9cd.png)\n## 效果图\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f41831a89f3434423a2578caf4b57a77.png)\n在手机上运行的效果，可以从相册获取也可以拍照获取\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f9703454b05973b5345b9635643664d8.png)\n', 1, '', 0, 0, 1, '2022-06-27 09:53:27.000', NULL);
INSERT INTO `tb_article` VALUES (67, 1006, 187, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/04608c2976b3a09b09b9b077c72232d7.jpg', 'springBoot 开发基本思路', '这里讲的是有关springBoot 安全开发的步骤以及思路！！！\n# Jwt Token的编写思路\n- 第一步：导包\n```xml\n        <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.9.0</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.json/json -->\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20190722</version>\n        </dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring -->\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>5.5.7</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n        <!-- Token生成与解析-->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.9.1</version>\n        </dependency>\n```\n- 第二步 token工具(生成、校验)\n- - 其中令牌有效期可以在 application.yml文件配置\n```yml\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n  typeAliasesPackage: com.example.demo.domain\n\nserver:\n  port: 8888\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    password: 123456\n    url: jdbc:mysql://localhost:3306/music_data?serverTimezone=Asia/Shanghai\n    username: root\n  devtools:\n    restart:\n      additional-paths: src/main/java\n      enabled: true\n      exclude: WEB-INF/**\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n  server:\n    MaxFileSize: 50MB\n    MaxRequestSize: 50MB\n  redis:\n    host: localhost\n    port: 6379\n    jedis:\n      pool:\n        max-active: -1\n        max-wait: 3000ms\n    timeout: 3000ms\n\nswagger:\n  # 是否开启swagger\n  enabled: true\ntoken:  # 与spring同级\n  # 令牌自定义标识\n  header: Authorization\n  # 令牌密钥\n  secret: abcdefghijklmnopqrstuvwxyz\n  # 令牌有效期（默认5分钟）\n  expireTime: 300000\n```\n\n```Java\npackage com.example.demo.service.impl;\n\nimport cn.hutool.core.date.DateUtil;\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTCreationException;\n\nimport com.auth0.jwt.interfaces.DecodedJWT;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @Author Felix\n * The type Token service.\n */\n@Service\npublic class TokenService {\n\n    // 令牌有效期（默认5分钟）\n    private static Integer expireTime;\n    public static final long REFRESH_EXPIRE_TIME=30*60;//RefreshToken到期时间为30分钟，秒为单位\n    private static final String TOKEN_SECRET=\"ljdyaishijin**3nkjnj??\";  //密钥盐\n    /**\n     * Sets expired time in.\n     * @Author Felix\n     * @param expiredTimeIn the expired time in\n     */\n    @Value(\"${token.expireTime}\")\n    public void setExpiredTimeIn(Integer expiredTimeIn) {\n        TokenService.expireTime = expiredTimeIn;\n    }\n\n\n    /**\n     * Gets token.\n     * @Author Felix\n     *\n     * @return the token\n     */\n    public static String getToken(String account, Long currentTime) {\n        Map<String, Date> map = TokenService.calculateExpiredIssues();\n        String token = \"\";\n        Date expireAt = new Date(currentTime + TokenService.expireTime);\n        try {\n            token = JWT.create()\n                    //.withAudience(user.getUsername()) // 将 user id 保存到 token 里面\n                    .withIssuer(\"Felix\")\n                    .withClaim(\"account\", account)\n                    .withClaim(\"currentTime\", currentTime)\n                  // .withExpiresAt(map.get(\"expiredTime\")) //五分钟后token过期\n                    .withExpiresAt(expireAt)\n                    .sign(Algorithm.HMAC256(TokenService.TOKEN_SECRET)); // 以 password 作为 token 的密钥\n        } catch (IllegalArgumentException | JWTCreationException e) {\n\n        }\n\n        return token;\n\n    }\n\n    /**\n     * Get expire time string.\n     * @Author Felix\n     * @param token the token\n     * @return the string\n     */\n    public  String getExpireTime(String token){\n        return DateUtil.formatDateTime(JWT.decode(token).getExpiresAt());\n    }\n\n    private static Map<String, Date> calculateExpiredIssues() {\n        Map<String, Date> map = new HashMap<>();\n        Calendar calendar = Calendar.getInstance();\n        Date now = calendar.getTime();\n        calendar.add(Calendar.SECOND,TokenService.expireTime);\n        map.put(\"now\", now);\n        map.put(\"expiredTime\", calendar.getTime());\n        return map;\n    }\n    public static Boolean verify(String token) throws Exception{\n\n        JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(\"auth0\").build();//创建token验证器\n        DecodedJWT decodedJWT=jwtVerifier.verify(token);\n        System.out.println(\"认证通过：\");\n        System.out.println(\"account: \" + decodedJWT.getClaim(\"account\").asString());\n        System.out.println(\"过期时间：      \" + decodedJWT.getExpiresAt());\n        return true;\n    }\n    public static String getAccount(String token){\n        try{\n            DecodedJWT decodedJWT=JWT.decode(token);\n            return decodedJWT.getClaim(\"account\").asString();\n\n        }catch (JWTCreationException e){\n            return null;\n        }\n    }\n    public static Long getCurrentTime(String token){\n        try{\n            DecodedJWT decodedJWT=JWT.decode(token);\n            return decodedJWT.getClaim(\"currentTime\").asLong();\n\n        }catch (JWTCreationException e){\n            return null;\n        }\n    }\n}\n```\n# 将生成token 的工具类 进行“认证与授权”，即需要使用shiro的授权认证功能\n要写在 Realm中\n	**Realm 充当了 Shiro 与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro 会从应用配置的 Realm 中查找用户及其权限信息**\n- Realm能做的工作主要有以下几个方面：\n\n身份验证（getAuthenticationInfo 方法）验证账户和密码，并返回相关信息\n\n权限获取（getAuthorizationInfo 方法） 获取指定身份的权限，并返回相关信息\n\n令牌支持（supports方法）判断该令牌（Token）是否被支持\n\n令牌有很多种类型，例如：HostAuthenticationToken（主机验证令牌），UsernamePasswordToken（账户密码验证令牌）\n```Java\npackage com.example.demo.config;\n\nimport com.example.demo.po.JWTToken;\nimport com.example.demo.service.impl.TokenService;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n * @Author: Felix\n * @Description: TODO\n * @Date: 2023/11/23 20:31\n * @Version: 1.0\n */\n\n@Component\npublic class CustomRealm extends AuthorizingRealm {\n    @Override\n    public boolean supports(AuthenticationToken token) {\n        return token instanceof JWTToken;\n    }\n    /**\n     * 用户授权\n     * @param principalCollection\n     * @return\n     */\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        System.out.println(\"用户授权\");\n        String username= TokenService.getAccount(principalCollection.toString());\n        SimpleAuthorizationInfo info= new SimpleAuthorizationInfo();\n        //正确的业务流程是到数据库拿该用户的权限再去进行授权的，这里只是简单的直接授权\n        if (username.equals(\"admin\")){\n            Set<String> role=new HashSet<>();\n            role.add(\"admin\");\n            info.setRoles(role);\n        }else {\n            Set<String> role=new HashSet<>();\n            role.add(\"user\");\n            info.setRoles(role);\n        }\n        return info;\n    }\n\n    /**\n     * 用户身份认证\n     * @param authenticationToken\n     * @return\n     * @throws AuthenticationException\n     */\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        System.out.println(\"身份认证\");\n        String token= (String) authenticationToken.getCredentials();\n        String username= TokenService.getAccount(token);\n        System.out.println(username);\n        //这里要去数据库查找是否存在该用户，这里直接放行\n        if (username==null){\n            throw new AuthenticationException(\"认证失败！\");\n        }\n        return new SimpleAuthenticationInfo(token,token,\"MyRealm\");\n    }\n}\n\n```\n# redis连接\n```Java\npackage com.example.demo.config;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.*;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n/**\n * @Author: Felix\n * @Description: TODO\n * @Date: 2023/11/23 13:21\n * @Version: 1.0\n */\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        // 配置连接工厂\n        template.setConnectionFactory(factory);\n\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\n        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper om = new ObjectMapper();\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jacksonSeial.setObjectMapper(om);\n\n        // 值采用json序列化\n        template.setValueSerializer(jacksonSeial);\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n\n        // 设置hash key 和value序列化模式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(jacksonSeial);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n\n\n    /**\n     * 对hash类型的数据操作\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForHash();\n    }\n\n    /**\n     * 对redis字符串类型数据操作\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForValue();\n    }\n\n    /**\n     * 对链表类型的数据操作\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForList();\n    }\n\n    /**\n     * 对无序集合类型的数据操作\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForSet();\n    }\n\n    /**\n     * 对有序集合类型的数据操作\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @Bean\n    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {\n        return redisTemplate.opsForZSet();\n    }\n\n}\n\n```\n\n## 编写redis工具类\n```Java\npackage com.example.demo.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.connection.RedisConnection;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.Cursor;\nimport org.springframework.data.redis.core.RedisConnectionUtils;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ScanOptions;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport javax.annotation.Resource;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @Author: Felix\n * @Description: TODO\n * @Date: 2023/11/23 13:31\n * @Version: 1.0\n */\n\n@Component\npublic class RedisUtil {\n    @Autowired\n    private static RedisTemplate redisTemplate;\n\n    public RedisUtil(RedisTemplate  redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n\n    // =============================common============================\n    /**\n     * 指定缓存失效时间\n     * @param key  键\n     * @param time 时间(秒)\n     */\n    public static boolean expire(String key, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 根据key 获取过期时间\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public static long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }\n\n\n    /**\n     * 判断key是否存在\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public static boolean hasKey(String key) {\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 删除缓存\n     * @param key 可以传一个值 或多个\n     */\n//    @SuppressWarnings(\"unchecked\")\n    public static void del(String... key) {\n        if (key != null && key.length > 0) {\n            if (key.length == 1) {\n                redisTemplate.delete(key[0]);\n            } else {\n                redisTemplate.delete(Arrays.asList(key));\n//                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            }\n        }\n    }\n\n    /**\n     * 获取并删除缓存\n     * @param key 键\n     * @return 值\n     */\n    public static Object getAndDelete(String key) {\n        try{\n            return key == null ? null : get(key);\n        }finally {\n            del(key);\n        }\n    }\n\n    // ============================String=============================\n\n    /**\n     * 普通缓存获取\n     * @param key 键\n     * @return 值\n     */\n    public static Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n\n    /**\n     * 普通缓存放入\n     * @param key   键\n     * @param value 值\n     * @return true成功 false失败\n     */\n\n    public static boolean set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 普通缓存放入并设置时间\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n\n    public static boolean set(String key, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 递增\n     * @param key   键\n     * @param delta 要增加几(大于0)\n     */\n    public static long incr(String key, long delta) {\n        if (delta < 0) {\n            throw new RuntimeException(\"递增因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, delta);\n    }\n\n\n    /**\n     * 递减\n     * @param key   键\n     * @param delta 要减少几(小于0)\n     */\n    public static long decr(String key, long delta) {\n        if (delta < 0) {\n            throw new RuntimeException(\"递减因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }\n\n\n    // ================================Map=================================\n\n    /**\n     * HashGet\n     * @param key  键 不能为null\n     * @param item 项 不能为null\n     */\n    public static Object hget(String key, String item) {\n        return redisTemplate.opsForHash().get(key, item);\n    }\n\n    /**\n     * 获取hashKey对应的所有键值\n     * @param key 键\n     * @return 对应的多个键值\n     */\n    public static Map<Object, Object> hmget(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n    /**\n     * HashSet\n     * @param key 键\n     * @param map 对应多个键值\n     */\n    public static boolean hmset(String key, Map<String, Object> map) {\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * HashSet 并设置时间\n     * @param key  键\n     * @param map  对应多个键值\n     * @param time 时间(秒)\n     * @return true成功 false失败\n     */\n    public static boolean hmset(String key, Map<String, Object> map, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForHash().putAll(key, map);\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     *\n     * @param key   键\n     * @param item  项\n     * @param value 值\n     * @return true 成功 false失败\n     */\n    public static boolean hset(String key, String item, Object value) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     *\n     * @param key   键\n     * @param item  项\n     * @param value 值\n     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\n     * @return true 成功 false失败\n     */\n    public static boolean hset(String key, String item, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForHash().put(key, item, value);\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 删除hash表中的值\n     *\n     * @param key  键 不能为null\n     * @param item 项 可以使多个 不能为null\n     */\n    public static void hdel(String key, Object... item) {\n        redisTemplate.opsForHash().delete(key, item);\n    }\n\n\n    /**\n     * 判断hash表中是否有该项的值\n     *\n     * @param key  键 不能为null\n     * @param item 项 不能为null\n     * @return true 存在 false不存在\n     */\n    public static boolean hHasKey(String key, String item) {\n        return redisTemplate.opsForHash().hasKey(key, item);\n    }\n\n\n    /**\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n     *\n     * @param key  键\n     * @param item 项\n     * @param by   要增加几(大于0)\n     */\n    public static double hincr(String key, String item, double by) {\n        return redisTemplate.opsForHash().increment(key, item, by);\n    }\n\n\n    /**\n     * hash递减\n     *\n     * @param key  键\n     * @param item 项\n     * @param by   要减少记(小于0)\n     */\n    public static double hdecr(String key, String item, double by) {\n        return redisTemplate.opsForHash().increment(key, item, -by);\n    }\n\n\n    // ============================set=============================\n\n    /**\n     * 根据key获取Set中的所有值\n     * @param key 键\n     */\n    public static Set<Object> sGet(String key) {\n        try {\n            return redisTemplate.opsForSet().members(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 根据value从一个set中查询,是否存在\n     *\n     * @param key   键\n     * @param value 值\n     * @return true 存在 false不存在\n     */\n    public static boolean sHasKey(String key, Object value) {\n        try {\n            return redisTemplate.opsForSet().isMember(key, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 将数据放入set缓存\n     *\n     * @param key    键\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public static long sSet(String key, Object... values) {\n        try {\n            return redisTemplate.opsForSet().add(key, values);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 将set数据放入缓存\n     *\n     * @param key    键\n     * @param time   时间(秒)\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public static long sSetAndTime(String key, long time, Object... values) {\n        try {\n            Long count = (long)values.length;\n            if (time > 0) {\n                count = redisTemplate.opsForSet().add(key, values);\n                expire(key, time);\n            }\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 获取set缓存的长度\n     *\n     * @param key 键\n     */\n    public static long sGetSetSize(String key) {\n        try {\n            return redisTemplate.opsForSet().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 移除值为value的\n     *\n     * @param key    键\n     * @param values 值 可以是多个\n     * @return 移除的个数\n     */\n\n    public static long setRemove(String key, Object... values) {\n        try {\n            return redisTemplate.opsForSet().remove(key, values);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n    // ===============================list=================================\n\n    /**\n     * 获取list缓存的内容\n     *\n     * @param key   键\n     * @param start 开始\n     * @param end   结束 0 到 -1代表所有值\n     */\n    public static List<Object> lGet(String key, long start, long end) {\n        try {\n            return redisTemplate.opsForList().range(key, start, end);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 获取list缓存的长度\n     *\n     * @param key 键\n     */\n    public static long lGetListSize(String key) {\n        try {\n            return redisTemplate.opsForList().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 通过索引 获取list中的值\n     *\n     * @param key   键\n     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推\n     */\n    public static Object lGetIndex(String key, long index) {\n        try {\n            return redisTemplate.opsForList().index(key, index);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     */\n    public static boolean lSet(String key, Object value) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 将list放入缓存\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒)\n     */\n    public static boolean lSet(String key, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForList().rightPush(key, value);\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @return true 存放成功 false存放失败\n     */\n    public static boolean lSet(String key, List<Object> value) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒)\n     * @return true 存放成功 false存放失败\n     */\n    public static boolean lSet(String key, List<Object> value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForList().rightPushAll(key, value);\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 根据索引修改list中的某条数据\n     *\n     * @param key   键\n     * @param index 索引\n     * @param value 值\n     * @return true 存放成功 false存放失败\n     */\n\n    public static boolean lUpdateIndex(String key, long index, Object value) {\n        try {\n            redisTemplate.opsForList().set(key, index, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 移除N个值为value\n     *\n     * @param key   键\n     * @param count 移除多少个\n     * @param value 值\n     * @return 移除的个数\n     */\n\n    public static long lRemove(String key, long count, Object value) {\n        try {\n            return redisTemplate.opsForList().remove(key, count, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n}\n\n```\n\n## 编写 Jwt 拦截器\n```Java\npackage com.example.demo.filter;\n\nimport com.auth0.jwt.exceptions.TokenExpiredException;\nimport com.example.demo.po.JWTToken;\nimport com.example.demo.po.Result;\nimport com.example.demo.service.impl.TokenService;\nimport com.example.demo.util.RedisUtil;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * @Author Felix\n * The type Jwt interceptor.\n */\n@Slf4j\npublic class JwtInterceptor extends BasicHttpAuthenticationFilter {\n\n    /**\n     * 判断是否允许通过\n     * @param request\n     * @param response\n     * @param mappedValue\n     * @return\n     */\n    @Override\n    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {\n        System.out.println(\"isAccessAllowed方法\");\n        try{\n            return executeLogin(request,response);\n        }catch (Exception e){\n            System.out.println(\"错误\"+e);\n//            throw new ShiroException(e.getMessage());\n            responseError(response,\"shiro fail\");\n            return false;\n        }\n    }\n\n    /**\n     * 是否进行登录请求\n     * @param request\n     * @param response\n     * @return\n     */\n    @Override\n    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) {\n        System.out.println(\"isLoginAttempt方法\");\n        String token=((HttpServletRequest)request).getHeader(\"token\");\n        if (token!=null){\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 创建shiro token\n     * @param request\n     * @param response\n     * @return\n     */\n    @Override\n    protected AuthenticationToken createToken(ServletRequest request, ServletResponse response) {\n        System.out.println(\"createToken方法\");\n        String jwtToken = ((HttpServletRequest)request).getHeader(\"token\");\n        if(jwtToken!=null) {\n            return new JWTToken(jwtToken);\n        }\n        return null;\n    }\n\n    /**\n     * isAccessAllowed为false时调用，验证失败\n     * @param request\n     * @param response\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {\n        System.out.println(\"onAccessDenied\");\n        this.sendChallenge(request,response);\n        responseError(response,\"token verify fail\");\n        return false;\n    }\n\n\n\n    /**\n     * shiro验证成功调用\n     * @param token\n     * @param subject\n     * @param request\n     * @param response\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception {\n        System.out.println(\"onLoginSuccess：\");\n        String jwttoken= (String) token.getPrincipal();\n        if (jwttoken!=null){\n            try{\n                if(TokenService.verify(jwttoken)){\n                    //判断Redis是否存在所对应的RefreshToken\n                    String account = TokenService.getAccount(jwttoken);\n                    Long currentTime=TokenService.getCurrentTime(jwttoken);\n                    if (RedisUtil.hasKey(account)) {\n                        Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\n                        if (currentTimeMillisRedis.equals(currentTime)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }catch (Exception e){\n                Throwable throwable = e.getCause();\n                System.out.println(\"token验证：\"+e.getClass());\n                if (e instanceof TokenExpiredException){\n                    System.out.println(\"TokenExpiredException\");\n                    if (refreshToken(request, response)) {\n                        return true;\n                    }else {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n\n\n    /**\n     * 拦截器的前置方法，此处进行跨域处理\n     * @param request\n     * @param response\n     * @return\n     * @throws Exception\n     */\n    @Override\n    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception {\n        HttpServletRequest httpServletRequest= (HttpServletRequest) request;\n        HttpServletResponse httpServletResponse= (HttpServletResponse) response;\n        httpServletResponse.setHeader(\"Access-Control-Allow-Origin\",httpServletRequest.getHeader(\"Origin\"));\n        httpServletResponse.setHeader(\"Access-Control-Allow-Methods\",\"GET,POST,OPTIONS,PUT,DELETE\");\n        httpServletResponse.setHeader(\"Access-Control-Allow-Headers\",httpServletRequest.getHeader(\"Access-Control-Resquest-Headers\"));\n        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())){\n            httpServletResponse.setStatus(HttpStatus.OK.value());\n        }\n\n        //如果不带token，不去验证shiro\n        if (!isLoginAttempt(request,response)){\n            responseError(httpServletResponse,\"no token\");\n            return false;\n        }\n        return super.preHandle(request,response);\n\n    }\n\n\n    /**\n     * 刷新AccessToken，进行判断RefreshToken是否过期，未过期就返回新的AccessToken且继续正常访问\n     * @param request\n     * @param response\n     * @return\n     */\n    private boolean refreshToken(ServletRequest request, ServletResponse response) {\n        String token = ((HttpServletRequest)request).getHeader(\"token\");\n        String account = TokenService.getAccount(token);\n        Long currentTime=TokenService.getCurrentTime(token);\n        // 判断Redis中RefreshToken是否存在\n        if (RedisUtil.hasKey(account)) {\n            // Redis中RefreshToken还存在，获取RefreshToken的时间戳\n            Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\n            // 获取当前AccessToken中的时间戳，与RefreshToken的时间戳对比，如果当前时间戳一致，进行AccessToken刷新\n            if (currentTimeMillisRedis.equals(currentTime)) {\n                // 获取当前最新时间戳\n                Long currentTimeMillis =System.currentTimeMillis();\n                RedisUtil.set(account, currentTimeMillis,\n                        TokenService.REFRESH_EXPIRE_TIME);\n                // 刷新AccessToken，设置时间戳为当前最新时间戳\n                token = TokenService.getToken(account, currentTimeMillis);\n                HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n                httpServletResponse.setHeader(\"Authorization\", token);\n                httpServletResponse.setHeader(\"Access-Control-Expose-Headers\", \"Authorization\");\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private void responseError(ServletResponse response,String msg){\n\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        httpResponse.setStatus(401);\n        httpResponse.setCharacterEncoding(\"UTF-8\");\n        httpResponse.setContentType(\"application/json;charset=UTF-8\");\n        try {\n            String rj = new ObjectMapper().writeValueAsString(new Result(401,msg));\n            httpResponse.getWriter().append(rj);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n# 使用shiro框架，将Jwt 拦截注册并使用\n- ShiroFilterFactoryBean 用于放行接口，拦截接口，将jwt工具类注册在这里\n- SecurityManager  注册 Realm 使其在shiro框架中\n- AuthorizationAttributeSourceAdvisor 授权属性源配置\n- LifecycleBeanPostProcessor 管理Shiro中一些bean的生命周期\n```Java\npackage com.example.demo.filter;\n\nimport com.example.demo.config.CustomRealm;\nimport org.apache.shiro.mgt.DefaultSessionStorageEvaluator;\nimport org.apache.shiro.mgt.DefaultSubjectDAO;\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.apache.shiro.mgt.SecurityManager;\n\nimport javax.servlet.Filter;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * @Author: Felix\n * @Description: TODO\n * @Date: 2023/11/23 20:27\n * @Version: 1.0\n */\n@Configuration\npublic class MyShiroConfig {\n    @Bean\n    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager){\n        ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();\n        Map<String, Filter> filterMap=new LinkedHashMap<>();\n        filterMap.put(\"jwt\", new JwtInterceptor());  // 将Jwt 拦截器注册\n        shiroFilterFactoryBean.setFilters(filterMap);\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\n        //不要用HashMap来创建Map，会有某些配置失效，要用链表的LinkedHashmap\n        Map<String,String> filterRuleMap=new LinkedHashMap<>();\n        //放行接口\n        filterRuleMap.put(\"/\",\"anon\");\n        filterRuleMap.put(\"/webjars/**\",\"anon\");\n        filterRuleMap.put(\"/user/login/status\",\"anon\");\n        filterRuleMap.put(\"/css/**\",\"anon\");\n        filterRuleMap.put(\"/images/**\",\"anon\");\n        filterRuleMap.put(\"/js/**\",\"anon\");\n        filterRuleMap.put(\"/lib/**\",\"anon\");\n        //拦截所有接口\n        filterRuleMap.put(\"/**\",\"jwt\");\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterRuleMap);\n        return shiroFilterFactoryBean;\n\n    }\n\n\n    @Bean\n    public SecurityManager securityManager(CustomRealm customRealm){\n        //设置自定义Realm\n        DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();\n        securityManager.setRealm(customRealm);\n        //关闭shiro自带的session\n        DefaultSubjectDAO subjectDAO=new DefaultSubjectDAO();\n        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator=new DefaultSessionStorageEvaluator();\n        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);\n        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);\n        securityManager.setSubjectDAO(subjectDAO);\n        return securityManager;\n    }\n\n    /**\n     * 配置代理会导致doGetAuthorizationInfo执行两次\n     */\n//    @Bean\n//    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator(){\n//        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=new DefaultAdvisorAutoProxyCreator();\n//        //强制使用从cglib动态代理机制，防止重复代理可能引起代理出错问题\n//        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\n//        return defaultAdvisorAutoProxyCreator;\n//    }\n\n    /**\n     * 授权属性源配置\n     * @param securityManager\n     * @return\n     */\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=new AuthorizationAttributeSourceAdvisor();\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n\n        return authorizationAttributeSourceAdvisor;\n\n    }\n\n    @Bean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor(){\n        return new LifecycleBeanPostProcessor();\n    }\n}\n\n```\n\n', 1, '', 0, 0, 1, '2021-08-19 10:22:17.000', '2021-08-20 10:26:08.000');
INSERT INTO `tb_article` VALUES (68, 1006, 189, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/59b97ca13c105581ad513caacf8fa42c.png', 'git的基本使用步骤', '# git的使用\n## 上传文件\n- 初始化，创建本地仓库\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/4631afd8346ddf5c91fbd90879a1c75c.png)\n## 初始化命令 ** git init **\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ea6b253056db3dfbcf41e3aed4dd89c9.png)\n将本地文件添加到本地仓库\n## 添加本地仓库命令  ** git add .**   “注意的是这个命令后面还有一个点”\n**即add 空格 点**\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8f3ccc5c5179782a157e4106fb88fd3c.png)\n- 添加注释 作用为提交暂存区的文件（也就是上一步添加的文件） 后面双引号内可以填写关于提交的注释信息。\n## 添加注释的命令：git commit -m \" \"\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/bea6150841eab0181c079038b65d8169.png)\n- 添加远程仓库，打开gitee 或者 github 新建仓库\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/55890c13a519ed8c713d63701f706487.png)\n- 建立本地仓库和远程仓库的关联\n- - 复制新建仓库的地址\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/3ee35e7d0dca27785a1378f624fac38d.png)\n- 关联\n## 关联的命令: git remote add origin 后面是新建仓库的地址\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/857cab30afa4ee97ef85445ba2123b8e.png)\n- 同步仓库内容 本地仓库和远程仓库的内容是一样的\n## 同步仓库命令：git pull --rebase origin master\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/012b898fcb7da01ee07f14e563c598da.png)\n- 上传文件\n## 上传命令：git push -u origin master\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8d2935e8dc739afc6c27fa5b18149ae3.png)\n上传成功后看远程仓库\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/6354d7e3aff7b9e75c8427e4b15a862b.png)\n- 上传文件夹\n 1. 复制远程仓库地址!![1724428860959.jpg](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2F1724428860959_1724471069.jpg?t=1724471070131)\n 2. 在本地电脑创建一个空的文件夹![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724473502.png?t=1724473503359)\n 3. 在空文件夹内，右键选择**Git Bash Here**![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724473549.png?t=1724473550268)\n 4. 克隆远程仓库 输入以下的命令\n  ```git\ngit clone + 你的仓库地址\ngit clone  https://github.com/Y3196/hexoBlog.git  //我输入的是我刚复制自己的\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724473792.png?t=1724473793070)\n5. 复制你要上传的文件夹![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724474136.png?t=1724474137412)\n6. 上传，**依次输入以下的命令**\n```git\ncd  hexoBlog     //在本地电脑进入这个远程仓库文件夹里\ngit init\ngit add .\ngit commit -m “你的提交信息”\ngit push\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724474488.png?t=1724474489756)\n# 上传中间出错\n**如果 git push -u origin master出错 如下图**\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a4ddc52892997f779e09b6bf8ecb7067.png)\n## 解决方案\n**先输入命令 git pull --rebase origin master**\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/63f12209a29078c8c6229a8712945adc.png)\n**再上传文件 命令： git push origin master**\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/71722ce8eab646bcb69d4013afb1dc83.png)\n\n# 可能出现的问题\n根据箭头复制网址依次打开\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724474698.png?t=1724474699262)\n之后根据图片进行点击，即可\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724474718.png?t=1724474719155)', 1, '', 0, 0, 1, '2021-07-27 20:26:59.000', '2024-08-25 01:06:59.357');
INSERT INTO `tb_article` VALUES (69, 1006, 190, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e746d63e5df4dd2c748813e7b606b3eb.jpg', '微信授权登录(前后端都有)', '# Java\n## 导包并在yml文件配置信息\n```xml\n<!-- https://mvnrepository.com/artifact/com.github.binarywang/weixin-java-mp -->\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>weixin-java-miniapp</artifactId>\n    <version>4..0</version>\n</dependency>\n```\n- 配置类，需要在yml文件中配置有关微信的配置\n```yml\nwx:\nminiapp:\nconfigs:\n-   appid: wxedb7e15f323ef580  #微信小程序的appid\n    secret: cabcb1df3978a894a6a979e7858f9f63 # #微信小程序的Secret\n    token: TCLRL2021    #微信小程序消息服务器配置的token\n    aesKey: 8xI4vXzxzvjCpMMqroNefThq6MHDAiz8n8uAHfS1ueg  #微信小程序消息服务器配置的EncodingAESKey\n    msgDataFormat: JSON\n```\n**其中appid和aesKey都是微信小程序申请的**\n## 小程序的配置\nWxMaProperties 用于读取yml配置的信息\n```Java\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport java.util.List;\n\n@Data\n@ConfigurationProperties(prefix = \"wx.miniapp\")\npublic class WxMaProperties {\n\n    private List<Config> configs;\n\n    @Data\n    public static class Config {\n        /**\n         * 设置微信小程序的appid\n         */\n        private String appid;\n\n        /**\n         * 设置微信小程序的Secret\n         */\n        private String secret;\n\n        /**\n         * 设置微信小程序消息服务器配置的token\n         */\n        private String token;\n\n        /**\n         * 设置微信小程序消息服务器配置的EncodingAESKey\n         */\n        private String aesKey;\n\n        /**\n         * 消息格式，XML或者JSON\n         */\n        private String msgDataFormat;\n    }\n\n}\n```\nWxMaConfiguration(官方demo照搬即可)\n```Java\nimport cn.binarywang.wx.miniapp.api.WxMaService;\nimport cn.binarywang.wx.miniapp.api.impl.WxMaServiceImpl;\nimport cn.binarywang.wx.miniapp.bean.WxMaKefuMessage;\nimport cn.binarywang.wx.miniapp.bean.WxMaSubscribeMessage;\nimport cn.binarywang.wx.miniapp.config.impl.WxMaDefaultConfigImpl;\nimport cn.binarywang.wx.miniapp.message.WxMaMessageHandler;\nimport cn.binarywang.wx.miniapp.message.WxMaMessageRouter;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport me.chanjar.weixin.common.bean.result.WxMediaUploadResult;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport me.chanjar.weixin.common.error.WxRuntimeException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Configuration\n@EnableConfigurationProperties(WxMaProperties.class)\npublic class WxMaConfiguration {\n    private final WxMaProperties properties;\n\n    @Autowired\n    public WxMaConfiguration(WxMaProperties properties) {\n        this.properties = properties;\n    }\n\n    @Bean\n    public WxMaService wxMaService() {\n        List<WxMaProperties.Config> configs = this.properties.getConfigs();\n        if (configs == null) {\n            throw new WxRuntimeException(\"大哥，拜托先看下项目首页的说明（readme文件），添加下相关配置，注意别配错了！\");\n        }\n        WxMaService maService = new WxMaServiceImpl();\n        maService.setMultiConfigs(\n            configs.stream()\n                .map(a -> {\n                    WxMaDefaultConfigImpl config = new WxMaDefaultConfigImpl();\n//                WxMaDefaultConfigImpl config = new WxMaRedisConfigImpl(new JedisPool());\n                    // 使用上面的配置时，需要同时引入jedis-lock的依赖，否则会报类无法找到的异常\n                    config.setAppid(a.getAppid());\n                    config.setSecret(a.getSecret());\n                    config.setToken(a.getToken());\n                    config.setAesKey(a.getAesKey());\n                    config.setMsgDataFormat(a.getMsgDataFormat());\n                    return config;\n                }).collect(Collectors.toMap(WxMaDefaultConfigImpl::getAppid, a -> a, (o, n) -> o)));\n        return maService;\n    }\n\n    @Bean\n    public WxMaMessageRouter wxMaMessageRouter(WxMaService wxMaService) {\n        final WxMaMessageRouter router = new WxMaMessageRouter(wxMaService);\n        router\n            .rule().handler(logHandler).next()\n            .rule().async(false).content(\"订阅消息\").handler(subscribeMsgHandler).end()\n            .rule().async(false).content(\"文本\").handler(textHandler).end()\n            .rule().async(false).content(\"图片\").handler(picHandler).end()\n            .rule().async(false).content(\"二维码\").handler(qrcodeHandler).end();\n        return router;\n    }\n\n    private final WxMaMessageHandler subscribeMsgHandler = (wxMessage, context, service, sessionManager) -> {\n        service.getMsgService().sendSubscribeMsg(WxMaSubscribeMessage.builder()\n            .templateId(\"此处更换为自己的模板id\")\n            .data(Lists.newArrayList(\n                new WxMaSubscribeMessage.MsgData(\"keyword1\", \"339208499\")))\n            .toUser(wxMessage.getFromUser())\n            .build());\n        return null;\n    };\n\n    private final WxMaMessageHandler logHandler = (wxMessage, context, service, sessionManager) -> {\n        log.info(\"收到消息：\" + wxMessage.toString());\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\"收到信息为：\" + wxMessage.toJson())\n            .toUser(wxMessage.getFromUser()).build());\n        return null;\n    };\n\n    private final WxMaMessageHandler textHandler = (wxMessage, context, service, sessionManager) -> {\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\"回复文本消息\")\n            .toUser(wxMessage.getFromUser()).build());\n        return null;\n    };\n\n    private final WxMaMessageHandler picHandler = (wxMessage, context, service, sessionManager) -> {\n        try {\n            WxMediaUploadResult uploadResult = service.getMediaService()\n                .uploadMedia(\"image\", \"png\",\n                    ClassLoader.getSystemResourceAsStream(\"tmp.png\"));\n            service.getMsgService().sendKefuMsg(\n                WxMaKefuMessage\n                    .newImageBuilder()\n                    .mediaId(uploadResult.getMediaId())\n                    .toUser(wxMessage.getFromUser())\n                    .build());\n        } catch (WxErrorException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    };\n\n    private final WxMaMessageHandler qrcodeHandler = (wxMessage, context, service, sessionManager) -> {\n        try {\n            final File file = service.getQrcodeService().createQrcode(\"123\", 430);\n            WxMediaUploadResult uploadResult = service.getMediaService().uploadMedia(\"image\", file);\n            service.getMsgService().sendKefuMsg(\n                WxMaKefuMessage\n                    .newImageBuilder()\n                    .mediaId(uploadResult.getMediaId())\n                    .toUser(wxMessage.getFromUser())\n                    .build());\n        } catch (WxErrorException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    };\n\n}\n```\n这个是官方demo里面的，就是读取application.yml配置的信息进行初始化\n\n前期准备工作做完，以下是分企业级和普通的微信登录代码\n## 企业级\n- service层\n```import cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\nimport com.example.wxjava.common.result.R;\nimport com.example.wxjava.domain.dto.WxUserInfo;\n\n/**\n * @author Felix\n * @since 2022/7/27 22:47\n */\npublic interface UserInfoService {\n\n  /**\n     * 根据微信id查询用户信息\n     * @param openid 微信标识\n     * @return 用户信息\n     */\n    SysUser selectUserByOpenid(String openid);\n}\n```\n- mapper层\n```Java\n    /**\n     * 根据手机号码查询用户信息\n     * @param openid 微信标识\n     * @return 用户信息\n     */\n    SysUser selectUserByOpenid(String openid);\n```\n- Impl层\n```Java\n@Override\n    public SysUser selectUserByOpenid(String openid) {\n        return userMapper.selectUserByOpenid(openid);\n    }\n```\n- controller层（企业级的 可能需要考虑的很多）\n比如 考虑没有注册的 需要通过手机号进行注册等问题 可以看项目(basic_project,这个项目是电脑里的，由于代码量过大，就不传了)\nWxMaUserController类\n```Java\n/**\n     * 小程序登陆接口\n     */\n    @ApiOperation(value = \"小程序登陆接口\", notes = \"小程序登陆接口\")\n    @GetMapping(\"/login\")\n    public AjaxResult login(@PathVariable String appid, String code) {\n        if (StringUtils.isBlank(code)) {\n            return AjaxResult.error(\"empty jscode\");\n        }\n\n        final WxMaService wxService = WxMaConfiguration.getMaService(appid);\n\n        try {\n            WxMaJscode2SessionResult session = wxService.getUserService().getSessionInfo(code);\n            this.logger.info(session.getSessionKey());\n            this.logger.info(session.getOpenid());\n            //TODO 通过openId查询用户信息，如果已注册返回token，否则返回空\n            SysUser sysUser = sysUserService.selectUserByOpenid(session.getOpenid());\n           /*  这是用户没有注册的时候 进行注册需要用到的\n            if(sysUser != null) {\n                String valid = generateValidCode(sysUser.getPhonenumber());\n                //注册成功后进行用户登录  验证码\n                String token = loginService.loginByPhone(sysUser.getPhonenumber(), valid,\n                        null);\n                return AjaxResult.success(token);\n            }\n            return AjaxResult.error(\"未注册\", session);\n        } catch (WxErrorException e) {\n            this.logger.error(e.getMessage(), e);\n            return AjaxResult.error(e.toString());\n        }\n*/\n    }\n```\n## 普通级的微信授权登录  \ncontroller层\n```Java\nimport cn.binarywang.wx.miniapp.api.WxMaService;\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\nimport com.example.wxjava.common.result.R;\nimport com.example.wxjava.domain.dto.WxUserInfo;\nimport com.example.wxjava.service.UserInfoService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * @author Felix\n * @since 2022/7/27 22:44\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/wx/user\")\n@RequiredArgsConstructor(onConstructor_ = @Autowired)\npublic class WxUserInfoController {\n    private final WxMaService wxMaService;\n\n    private final UserInfoService userInfoService;\n\n    /**\n     * 登陆接口\n     */\n    @GetMapping(\"/login\")\n    public R<WxMaJscode2SessionResult> login(@RequestParam(\"code\") String code) {\n        return userInfoService.login(code);\n    }\n\n    /**\n     * <pre>\n     * 获取用户信息接口\n     * </pre>\n     */\n    @PostMapping(\"/getUserInfo\")\n    public R<WxMaUserInfo> getUserInfo(@RequestBody WxUserInfo userInfo) {\n        return userInfoService.getUserInfo(userInfo);\n    }\n}\n```\n- service\n```Java\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\nimport com.example.wxjava.common.result.R;\nimport com.example.wxjava.domain.dto.WxUserInfo;\n\n/**\n * @author Felix\n * @since 2022/7/27 22:47\n */\npublic interface UserInfoService {\n\n    /**\n     * 登录\n     * @param code code\n     * @return   WxMaJscode2SessionResult\n     */\n    R<WxMaJscode2SessionResult> login(String code);\n\n    /**\n     * 获取用户信息\n     * @param userInfo  包含一些加密的信息\n     * @return  WxMaUserInfo\n     */\n    R<WxMaUserInfo> getUserInfo(WxUserInfo userInfo);\n}\n\n```\n- Impl层\n```Java\nimport cn.binarywang.wx.miniapp.api.WxMaService;\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\nimport cn.binarywang.wx.miniapp.util.WxMaConfigHolder;\nimport com.example.wxjava.common.result.R;\nimport com.example.wxjava.domain.dto.WxUserInfo;\nimport com.example.wxjava.service.UserInfoService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author Felix\n * @since 2022/7/27 22:48\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor(onConstructor_ = @Autowired)\npublic class UserInfoServiceImpl implements UserInfoService {\n\n    private final WxMaService wxMaService;\n\n    /**\n     * 登录\n     * @param code code\n     * @return   WxMaJscode2SessionResult\n     */\n    @Override\n    public R<WxMaJscode2SessionResult> login(String code) {\n        try {\n            WxMaJscode2SessionResult session = wxMaService.getUserService().getSessionInfo(code);\n            log.info(session.getSessionKey());\n            log.info(session.getOpenid());\n            //TODO 可以增加自己的逻辑，关联业务相关数据\n            return R.ok(session);\n        } catch (WxErrorException e) {\n            log.error(e.getMessage(), e);\n            return R.error(e.toString());\n        } finally {\n            WxMaConfigHolder.remove();//清理ThreadLocal\n        }\n    }\n\n    @Override\n    public R<WxMaUserInfo> getUserInfo(WxUserInfo userInfo) {\n\n        // 用户信息校验\n        if (!wxMaService.getUserService().checkUserInfo(userInfo.getSessionKey(), userInfo.getRawData(), userInfo.getSignature())) {\n            WxMaConfigHolder.remove();//清理ThreadLocal\n            return R.error(\"user check failed\");\n        }\n\n        // 解密用户信息\n        WxMaUserInfo wxMaUserInfo = wxMaService.getUserService().getUserInfo(userInfo.getSessionKey(), userInfo.getEncryptedData(), userInfo.getIv());\n        WxMaConfigHolder.remove();//清理ThreadLocal\n        return R.ok(wxMaUserInfo);\n    }\n}\n```\n## 前端，这里使用uniapp实现\n- 使用HBuilder X 新建一个uniapp的项目\n ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e280f427cc0897031f9fd7b6ca5e92ad.png)\n\n```HTML\n<template>\n  <view class=\"content\">\n  <button @click=\"login()\">微信登录</button>\n  </view>\n  </template>\n\n  <script>\n  export default {\n  data() {\n    return {\n      title: \'Hello\',\n      sessionKey: \'\'\n    }\n  },\n  onLoad() {\n\n  },\n  methods: {\n    async login(){\n      let that = this //保存当前作用域\n\n      await uni.login({ //直接用这个调用微信接口\n        onlyAuthorize:true,\n        success:function(response){ // 用微信登录的话就要去微信开发工具\n          console.log(response) //这里打印就说明接口调用成功了，然后看message login ：ok\n          //微信登录就完了，后面就是获取用户信息\n          uni.request({\n            url: \'http://localhost:8888/wx/user/login\',\n            data: {\n              code: response.code\n            },\n            success(res) {\n              console.log(\"sessionkey\",res)\n              that.sessionKey = res.data.data.sessionKey\n            }\n          })\n\n        }\n      })\n      await uni.getUserProfile({\n        desc:\'测试用例\',\n        success:function(res){\n          console.log(\"res\",res)\n          uni.request({\n            url: \'http://localhost:8888/wx/user/getUserInfo\',\n            method: \'POST\',\n            dataType: \'json\',\n            data: {\n              rawData: res.rawData,\n              signature: res.signature,\n              encryptedData: res.encryptedData,\n              iv: res.iv,\n              sessionKey: that.sessionKey\n            },\n            success(resc) {\n              console.log(\"登录成功\",resc)\n            }\n          })\n        }\n      })\n\n    }\n  }\n}\n  </script>\n\n  <style>\n\n  </style>\n\n```\n- 直接选择运行到微信开发者工具\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/34b9549128c12d2132037cd03b76a8cf.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/37e7090370e38d2460e3fcb826adeba4.png)\n![ce738fde20376ef0ca427e6454f4ef4.jpg](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/705b4535ebc21596b54b5204dd506576.jpg)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/911723577c3fad2d49528e54399796e4.png)', 1, '', 0, 0, 1, '2022-07-27 21:56:35.000', NULL);
INSERT INTO `tb_article` VALUES (70, 1006, 188, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/c2eb87d7902003ff9a1cc3174e1c6b18.png', 'uniapp 引入js 文件', '这里通过创建“56个民族”的简单示例演示\n- 第一步：在static文件夹下的common下新建js文件夹，新建js文件\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/32d42c2de371e1a24375874b33ef0704.png)\n```html\n//到出 js 文件  固定的需要一个 \nfunction xxx(){\nvar xx = [];\nreturn  xx;\n}\nexport default  xxx\n```\n- js文件\n```JavaScript\nexport function dataInJs(){\n	\nvar nation_data = [\n		{value:1 ,label:\'汉族\'},\n		{value:2 ,label:\'蒙古族\'},\n		{value:3 ,label:\'回族\'},\n		{value:4 ,label:\'藏族\'},\n		{value:5 ,label:\'维吾尔族\'},\n		{value:6 ,label:\'苗族\'},\n		{value:7 ,label:\'彝族\'},\n		{value:8 ,label:\'壮族\'},\n		{value:9 ,label:\'布依族\'},\n		{value:10,label:\'朝鲜族\'},\n		{value:11,label:\'满族\'},\n		{value:12,label:\'侗族\'},\n		{value:13,label:\'瑶族\'},\n		{value:14,label:\'白族\'},\n		{value:15,label:\'土家族\'},\n		{value:16,label:\'哈尼族\'},\n		{value:17,label:\'哈萨克族\'},\n		{value:18,label:\'傣族\'},\n		{value:19,label:\'黎族\'},\n		{value:20,label:\'傈僳族\'},\n		{value:21,label:\'佤族\'},\n		{value:22,label:\'畲族\'},\n		{value:23,label:\'高山族\'},\n		{value:24,label:\'拉祜族\'},\n		{value:25,label:\'水族\'},\n		{value:26,label:\'东乡族\'},\n		{value:27,label:\'纳西族\'},\n		{value:28,label:\'景颇族\'},\n		{value:29,label:\'柯尔克孜族\'},\n		{value:30,label:\'土族\'},\n		{value:31,label:\'达翰尔族\'},\n		{value:32,label:\'么佬族\'},\n		{value:33,label:\'羌族\'},\n		{value:34,label:\'布朗族\'},\n		{value:35,label:\'撒拉族\'},\n		{value:36,label:\'毛南族\'},\n		{value:37,label:\'仡佬族\'},\n		{value:38,label:\'锡伯族\'},\n		{value:39,label:\'阿昌族\'},\n		{value:40,label:\'普米族\'},\n		{value:41,label:\'塔吉克族\'},\n		{value:42,label:\'怒族\'},\n		{value:43,label:\'乌孜别克族\'},\n		{value:44,label:\'俄罗斯族\'},\n		{value:45,label:\'鄂温克族\'},\n		{value:46,label:\'德昂族\'},\n		{value:47,label:\'保安族\'},\n		{value:48,label:\'裕固族\'},\n		{value:49,label:\'京族\'},\n		{value:50,label:\'塔塔尔族\'},\n		{value:51,label:\'独龙族\'},\n		{value:52,label:\'鄂伦春族\'},\n		{value:53,label:\'赫哲族\'},\n		{value:54,label:\'门巴族\'},\n		{value:55,label:\'珞巴族\'},\n		{value:56,label:\'基诺族\'},\n \n];\nreturn nation_data;\n}\n\nexport default dataInJs\n```\n- 第二步：引入js 文件\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f6c78848c0fd5b1471fde558966902a4.png)\n# 实战 ------>  写56个民族\n**在<script>标签头引入\n	import {dataInJs} from \'@/static/common/js/nation.js\'**\n```html\n<template>\n	<view class=\"wrap\">\n		<u-steps :list=\"numList\" :current=\"1\" mode=\"number\"></u-steps>\n		<u-form :model=\"model\" :rules=\"rules\" ref=\"uForm\">\n			<u-form-item :required=\"true\" label-width=\"150\" :label-position=\"labelPosition\" label=\"身份证号码\" prop=\"idNo\">\n				<u-input placeholder=\"请输入身份证号码\" v-model=\"model.idNo\" type=\"text\" maxlength=\"18\"></u-input>\n				<u-icon size=\"30px\" name=\"camera\" slot=\"right\" color=\"#2979ff\" @click=\"info()\"></u-icon>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"住址\" prop=\"region\" label-width=\"150\">\n				<u-input type=\"text\" v-model=\"model.hlocation\" placeholder=\"请选择是身份证地址\"></u-input>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"性别\" prop=\"payType\" label-width=\"150\">\n				<u-radio-group v-model=\"model.gender\" :width=\"radioCheckWidth\" :wrap=\"radioCheckWrap\">\n					<u-radio shape=\"circle\" v-for=\"(item, index) in radioList\" :key=\"index\" :name=\"item.sex\">\n						{{ item.sex }}\n					</u-radio>\n				</u-radio-group>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"民族\" prop=\"race\" label-width=\"150\">\n				<u-input type=\"select\" v-model=\"model.race\" placeholder=\"请选择民族\" @click=\"nationShow = true\"></u-input>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"政治面貌\" prop=\"out\" label-width=\"150\">\n				<u-radio-group v-model=\"model.polity\" :width=\"radioCheckWidth\" :wrap=\"radioCheckWrap\">\n					<u-radio shape=\"circle\" v-for=\"(item, index) in outlook\" :key=\"index\" :name=\"item.out\">\n						{{ item.out }}\n					</u-radio>\n				</u-radio-group>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"最高学历\" prop=\"goodsType\"\n				label-width=\"150\">\n				<u-input type=\"select\" v-model=\"model.goodsType\" placeholder=\"请选择最高学历\" @click=\"selectShow = true\">\n				</u-input>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"籍贯\" prop=\"pbirth\" label-width=\"150\">\n				<u-input type=\"select\" :select-open=\"showjj\" v-model=\"model.pbirth\" placeholder=\"请选择现在住址\"\n					@click=\"showjj = true\"></u-input>\n			</u-form-item>\n			<u-form-item :label-position=\"labelPosition\" label=\"户口性质\" prop=\"nature\" label-width=\"150\">\n				<u-radio-group v-model=\"model.htype\" :width=\"radioCheckWidth\" :wrap=\"radioCheckWrap\">\n					<u-radio shape=\"circle\" v-for=\"(item, index) in registered \" :key=\"index\" :name=\"item.nature\">\n						{{ item.nature }}\n					</u-radio>\n				</u-radio-group>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"现住址\" prop=\"nplace\" label-width=\"150\">\n				<u-input type=\"select\" :select-open=\"show\" v-model=\"model.nplace\" placeholder=\"请选择现在住址\"\n					@click=\"show = true\"></u-input>\n			</u-form-item>\n			<u-form-item :required=\"true\" label-width=\"120\" :label-position=\"labelPosition\" label=\"紧急联系人姓名\"\n				prop=\"cnName\">\n				<u-input placeholder=\"请输入紧急联系人姓名\" v-model=\"model.cnName\" type=\"text\"></u-input>\n			</u-form-item>\n			<u-form-item :required=\"true\" :label-position=\"labelPosition\" label=\"紧急联系人手机号码\" prop=\"phone\"\n				label-width=\"150\">\n				<u-input placeholder=\"请输入联系人手机号码\" v-model=\"model.phone\" type=\"number\"></u-input>\n			</u-form-item>\n		</u-form>\n\n		<u-picker mode=\"region\" v-model=\"show\" @confirm=\"cccc\"></u-picker>\n		<u-picker mode=\"region\" v-model=\"showjj\" @confirm=\"nativeP\"></u-picker>\n		<u-select mode=\"single-column\" :list=\"selectList\" v-model=\"selectShow\" @confirm=\"selectConfirm\"></u-select>\n		<u-select mode=\"single-column\" :list=\"list\" v-model=\"nationShow\" @confirm=\"nationConfirm\"></u-select>\n		<view>\n			<u-row class=\"row\" :justify=\"justify\">\n				<u-col :span=\"span\">\n					<u-button type=\"default\">以后再填</u-button>\n				</u-col>\n				<u-col :span=\"span\" :offset=\"offset\">\n					<view>\n						<u-button @click=\"test\" type=\"primary\">下一步</u-button>\n					</view>\n				</u-col>\n			</u-row>\n		</view>\n	</view>\n</template>\n\n<script>\n	import {dataInJs} from \'@/static/common/js/nation.js\'\n	export default {\n		data() {\n			let that = this;\n			return {\n				list: dataInJs(),\n				model: {\n					race: \'\',\n					polity: \'党员\',\n					htype: \'农村户口\',\n					gender: \'男\',\n					cnName: \'\',\n					nplace: \'\',\n					pbirth: \'\',\n					goodsType: \'\',\n					hlocation: \'\',\n					idNo: \'\',\n					address: \'\',\n					nativePla: \'\',\n					urgent: \'\',\n					urgentPhone: \'\',\n					current: \'\',\n					nation: \'\',\n				},\n				selectList: [{\n						value: \'小学\',\n						label: \'小学\'\n					},\n					{\n						value: \'初中\',\n						label: \'初中\'\n					},\n					{\n						value: \'高中\',\n						label: \'高中\'\n					},\n					{\n						value: \'专科\',\n						label: \'专科\'\n					},\n					{\n						value: \'本科\',\n						label: \'本科\'\n					}\n				],\n				rules: {\n					phone: [{\n							required: true,\n							message: \'请输入手机号\',\n							trigger: [\'change\', \'blur\'],\n						},\n						{\n							validator: (rule, value, callback) => {\n								// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\n								return this.$u.test.mobile(value);\n							},\n							message: \'手机号码不正确\',\n							// 触发器可以同时用blur和change，二者之间用英文逗号隔开\n							trigger: [\'change\', \'blur\'],\n						}\n					],\n					idNo: [{\n							required: true,\n							message: \'请输入身份证号\',\n							trigger: \'blur\',\n						},\n						{\n							// 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明\n							validator: (rule, value, callback) => {\n								// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\n								return this.$u.test.idCard(value);\n							},\n							message: \'身份证号必须是18位\',\n							// 触发器可以同时用blur和change，二者之间用英文逗号隔开\n							trigger: [\'change\', \'blur\'],\n						},\n					],\n					cnName: [{\n							required: true,\n							message: \'请输入姓名\',\n							trigger: \'blur\',\n						},\n						{\n							min: 3,\n							max: 5,\n							message: \'姓名长度在3到5个字符\',\n							trigger: [\'change\', \'blur\'],\n						},\n						{\n							// 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明\n							validator: (rule, value, callback) => {\n								// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\n								return this.$u.test.chinese(value);\n							},\n							message: \'姓名必须为中文\',\n							// 触发器可以同时用blur和change，二者之间用英文逗号隔开\n							trigger: [\'change\', \'blur\'],\n						},\n					],\n				},\n				numList: [{\n					name: \'个人信息\'\n				}, {\n					name: \'教育经历\'\n				}, {\n					name: \'工作经历\'\n				}, {\n					name: \'家庭成员\'\n				}, {\n					name: \'确定入职\'\n				}],\n				showjj: false,\n				span: 4,\n				offset: 1,\n				justify: \'start\',\n				registered: [{\n						nature: \'农村户口\',\n						checked: true,\n						disabled: false\n					},\n					{\n						nature: \'城镇户口\',\n						checked: false,\n						disabled: false\n					}\n				],\n				outlook: [{\n						out: \'党员\',\n						checked: true,\n						disabled: false\n					},\n					{\n						out: \'团员\',\n						checked: false,\n						disabled: false\n					},\n					{\n						out: \'群众\',\n						checked: false,\n						disabled: false\n					}\n				],\n				radioList: [{\n						sex: \'男\',\n						checked: true,\n						disabled: false\n					},\n					{\n						sex: \'女\',\n						checked: false,\n						disabled: false\n					}\n				],\n				actionSheetShow: false,\n				pickerShow: false,\n				show: false,\n				selectShow: false,\n				nationShow: false,\n				radioCheckWidth: \'auto\',\n				radioCheckWrap: false,\n				labelPosition: \'top\',\n			};\n		},\n		onReady() {\n			this.$refs.uForm.setRules(this.rules);\n		},\n		created() {\n			console.log(this.model.race);\n		},\n		onLoad() {\n	\n			this.getToken()\n		},\n		methods: {\n			info() {\n				let that = this\n				let access_token = uni.getStorageSync(\'access_token\')\n\n				uni.chooseImage({\n					count: 1, //默认9\n					sizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\n					sourceType: [\'camera\', \'album\'], //从相册选择 或者拍照\n					success: function(res) {\n\n						let tempFilePaths = res.tempFilePaths[0]\n						// 图片转 base64\n						uni.getFileSystemManager().readFile({\n							filePath: tempFilePaths, //选择图片返回的相对路径  \n							encoding: \'base64\', //编码格式  \n							success: v => { //成功的回调  \n								let base64 = v\n									.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \n								that.base64str = \'data:image/jpeg;base64,\' + base64\n\n								// 开始识别\n								uni.request({\n									url: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' +\n										access_token,\n									method: \'POST\',\n									data: {\n										image: base64,\n										id_card_side: \'front\' // 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\n									},\n									header: {\n										\'Content-Type\': \'application/x-www-form-urlencoded\'\n									},\n									success: res => {\n										console.log(res.data)\n										// console.log(res.data.words_result.住址.words)\n										that.model.idNo = res.data.words_result.公民身份号码\n											.words\n										that.model.hlocation = res.data.words_result.住址\n											.words\n										that.model.race = res.data.words_result.民族\n											.words\n										that.model.gender = res.data.words_result.性别\n											.words\n									}\n								});\n							}\n						})\n\n\n					}\n				});\n			},\n			getToken() {\n				let that = this\n				uni.request({\n					url: \'https://aip.baidubce.com/oauth/2.0/token\',\n					method: \'POST\',\n					data: {\n						grant_type: \'client_credentials\',\n						client_id: \'5tiRo6aR7rMao1Yee0KQenu1\', // 在百度智能云那边创建一个应用后可以获取\n						client_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\' // 在百度智能云那边创建一个应用后可以获取\n					},\n					header: {\n						\'Content-Type\': \'application/x-www-form-urlencoded\'\n					},\n					success: res => {\n						console.log(res.data)\n						uni.setStorageSync(\'access_token\', res.data.access_token)\n						// console.log(JSON.parse(res.data))\n					}\n				});\n			},\n			test() {\n				this.$u.post(\'/v1/reperson/create\', {\n					\"cnName\": this.model.cnName,\n					\"gender\": this.model.gender,\n					\"hlocation\": this.model.hlocation,\n					\"htype\": this.model.htype,\n					\"idNo\": this.model.idNo,\n					\"nplace\": this.model.nplace,\n					\"pbirth\": this.model.pbirth,\n					\"polity\": this.model.polity,\n					\"race\": this.model.race,\n\n				}).then(res => {\n					console.log(res);\n					uni.setStorage({\n						key: \'empNo\',\n						data: res.payload,\n						success: res => {\n							console.log(res)\n						}\n					});\n				}).catch(err => {\n\n				});\n				console.log(this.model.cnName)\n				console.log(this.model.gender)\n				console.log(this.model.hlocation)\n				console.log(this.model.htype)\n				console.log(this.model.idNo)\n				console.log(this.model.nplace)\n				console.log(this.model.pbirth)\n				console.log(this.model.polity)\n				console.log(this.model.race)\n\n			},\n\n			cccc(e) {\n				this.model.nplace = e.province.label + \'-\' + e.city.label + \'-\' + e.area.label;\n			},\n			nativeP(e) {\n				this.model.pbirth = e.province.label + \'-\' + e.city.label + \'-\' + e.area.label;\n			},\n			// 选择学历回调\n			selectConfirm(e) {\n				this.model.goodsType = \'\';\n				e.map((val, index) => {\n					this.model.goodsType += this.model.goodsType == \'\' ? val.label : \'-\' + val.label;\n				})\n			},\n			nationConfirm(e) {\n				this.model.race = \'\';\n				e.map((val, index) => {\n					this.model.race += this.model.race == \'\' ? val.label : \'-\' + val.label;\n				})\n			}\n		}\n	};\n</script>\n\n<style scoped lang=\"scss\">\n	.wrap {\n		padding: 30rpx;\n	}\n\n	.row {\n		margin-top: 35px;\n		margin-left: 76px;\n	}\n</style>\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/fc5ceda372cd6eb0df497dd7ca7a985c.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/6ac70ac7162d0a89d032e9a1e3fd1f72.png)', 1, '', 0, 0, 1, '2021-06-27 22:06:27.000', NULL);
INSERT INTO `tb_article` VALUES (71, 1006, 190, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg', 'springBoot文件上传导出', '# 导包 这里使用阿里云OSS存储桶\n```xml\n  <!-- 阿里云oss-->\n        <dependency>\n            <groupId>com.aliyun.oss</groupId>\n            <artifactId>aliyun-sdk-oss</artifactId>\n            <version>3.8.0</version>\n        </dependency>\n```\n\n# 配置yml\n```yml\n  # 上传图片大小限制\n  servlet:\n    multipart:\n      max-file-size: 100MB\n      max-request-size:  100MB\n\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\n# 这里采用阿里云存储桶进行存储文件图片等。\nupload:\n  mode: oss\n  local:\n    # nginx映射本地文件路径，无域名则为 ip:83\n    url: http://你的文件上传子域名/\n    # 本地文件存储路径\n    path: /usr/local/upload/\n  oss:\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\n    bucketName: blog-felix                       # 存储桶名称\n  cos:\n    url: http://Bucket域名/\n    secretId: cos的secretId\n    secretKey: cos的secretKey\n    region: cos的region\n    bucketName: cos的bucketName\n\n```\n\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\n# 上传策略，可以分两种\n1. 第一种就是上传图片头像等\n2. 第二种就是上传文章\n```Java\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.InputStream;\n\n/**\n * 上传策略\n *\n * @author Felix\n * @date 2021/07/28\n */\npublic interface UploadStrategy {\n\n    /**\n     * 上传文件\n     *\n     * @param file 文件\n     * @param path 上传路径\n     * @return {@link String} 文件地址\n     */\n    String uploadFile(MultipartFile file, String path);\n\n    /**\n     * 上传文件\n     *\n     * @param fileName    文件名\n     * @param inputStream 输入流\n     * @param path        路径\n     * @return {@link String}\n     */\n    String uploadFile(String fileName, InputStream inputStream, String path);\n\n}\n```\n\n1. 搜索策略\n```Java\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * 上传模式枚举\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Getter\n@AllArgsConstructor\npublic enum UploadModeEnum {\n    /**\n     * oss\n     */\n    OSS(\"oss\", \"ossUploadStrategyImpl\"),\n    /**\n     * 本地\n     */\n    LOCAL(\"local\", \"localUploadStrategyImpl\"),\n\n    /**\n     * cos\n     */\n    COS(\"cos\", \"cosUploadStrategyImpl\");\n\n    /**\n     * 模式\n     */\n    private final String mode;\n\n    /**\n     * 策略\n     */\n    private final String strategy;\n\n    /**\n     * 获取策略\n     *\n     * @param mode 模式\n     * @return {@link String} 搜索策略\n     */\n    public static String getStrategy(String mode) {\n        for (UploadModeEnum value : UploadModeEnum.values()) {\n            if (value.getMode().equals(mode)) {\n                return value.getStrategy();\n            }\n        }\n        return null;\n    }\n\n}\n\n```\n2. OSS的一些前期操作\n- OSS配置属性\n```Java\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * oss配置属性\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"upload.oss\")\npublic class OssConfigProperties {\n\n    /**\n     * oss域名\n     */\n    private String url;\n\n    /**\n     * 终点\n     */\n    private String endpoint;\n\n    /**\n     * 访问密钥id\n     */\n    private String accessKeyId;\n\n    /**\n     * 访问密钥密码\n     */\n    private String accessKeySecret;\n\n    /**\n     * bucket名称\n     */\n    private String bucketName;\n\n}\n\n```\n- 抽象上传模板\n```Java\nimport com.minzheng.blog.exception.BizException;\nimport com.minzheng.blog.strategy.UploadStrategy;\nimport com.minzheng.blog.util.FileUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\n\n/**\n * 抽象上传模板\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Service\npublic abstract class AbstractUploadStrategyImpl implements UploadStrategy {\n\n    @Override\n    public String uploadFile(MultipartFile file, String path) {\n        try {\n            // 获取文件md5值\n            String md5 = FileUtils.getMd5(file.getInputStream());\n            // 获取文件扩展名\n            String extName = FileUtils.getExtName(file.getOriginalFilename());\n            // 重新生成文件名\n            String fileName = md5 + extName;\n            // 判断文件是否已存在\n            if (!exists(path + fileName)) {\n                // 不存在则继续上传\n                upload(path, fileName, file.getInputStream());\n            }\n            // 返回文件访问路径\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }\n\n    @Override\n    public String uploadFile(String fileName, InputStream inputStream, String path) {\n        try {\n            // 上传文件\n            upload(path, fileName, inputStream);\n            // 返回文件访问路径\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }\n\n    /**\n     * 判断文件是否存在\n     *\n     * @param filePath 文件路径\n     * @return {@link Boolean}\n     */\n    public abstract Boolean exists(String filePath);\n\n    /**\n     * 上传\n     *\n     * @param path        路径\n     * @param fileName    文件名\n     * @param inputStream 输入流\n     * @throws IOException io异常\n     */\n    public abstract void upload(String path, String fileName, InputStream inputStream) throws IOException;\n\n    /**\n     * 获取文件访问url\n     *\n     * @param filePath 文件路径\n     * @return {@link String}\n     */\n    public abstract String getFileAccessUrl(String filePath);\n\n}\n\n```\n\n- OSS上传策略\n```Java\nimport com.aliyun.oss.OSS;\nimport com.aliyun.oss.OSSClientBuilder;\nimport com.minzheng.blog.config.OssConfigProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.InputStream;\n\n/**\n * oss上传策略\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Service(\"ossUploadStrategyImpl\")\npublic class OssUploadStrategyImpl extends AbstractUploadStrategyImpl {\n    @Autowired\n    private OssConfigProperties ossConfigProperties;\n\n    @Override\n    public Boolean exists(String filePath) {\n        return getOssClient().doesObjectExist(ossConfigProperties.getBucketName(), filePath);\n    }\n\n    @Override\n    public void upload(String path, String fileName, InputStream inputStream) {\n        getOssClient().putObject(ossConfigProperties.getBucketName(), path + fileName, inputStream);\n    }\n\n    @Override\n    public String getFileAccessUrl(String filePath) {\n        return ossConfigProperties.getUrl() + filePath;\n    }\n\n    /**\n     * 获取ossClient\n     *\n     * @return {@link OSS} ossClient\n     */\n    private OSS getOssClient() {\n        return new OSSClientBuilder().build(ossConfigProperties.getEndpoint(), ossConfigProperties.getAccessKeyId(), ossConfigProperties.getAccessKeySecret());\n    }\n\n}\n\n```\n\n```Java\nimport com.minzheng.blog.strategy.UploadStrategy;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.InputStream;\nimport java.util.Map;\n\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\n\n\n/**\n * 上传策略上下文\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Service\npublic class UploadStrategyContext {\n    /**\n     * 上传模式\n     */\n    @Value(\"${upload.mode}\")\n    private String uploadMode;\n\n    @Autowired\n    private Map<String, UploadStrategy> uploadStrategyMap;\n\n    /**\n     * 执行上传策略\n     * 上传图片(头像等)\n     * @param file 文件\n     * @param path 路径\n     * @return {@link String} 文件地址\n     */\n    public String executeUploadStrategy(MultipartFile file, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\n    }\n\n\n    /**\n     * 执行上传策略\n     * 导出文章用这个\n     * @param fileName    文件名称\n     * @param inputStream 输入流\n     * @param path        路径\n     * @return {@link String} 文件地址\n     */\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\n    }\n\n}\n\n```\n## 导出文章\n```Java\n    @Override\n    public List<String> exportArticles(List<Integer> articleIdList) {\n        // 查询文章信息\n        List<Article> articleList = articleDao.selectList(new LambdaQueryWrapper<Article>()\n                .select(Article::getArticleTitle, Article::getArticleContent)\n                .in(Article::getId, articleIdList));\n        // 写入文件并上传\n        List<String> urlList = new ArrayList<>();\n        for (Article article : articleList) {\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\n                urlList.add(url);\n            } catch (Exception e) {\n                log.error(StrUtil.format(\"导出文章失败,堆栈:{}\", ExceptionUtil.stacktraceToString(e)));\n                throw new BizException(\"导出文章失败\");\n            }\n        }\n        return urlList;\n    }\n```\n\n```Java\n  /**\n     * 导出文章\n     *\n     * @param articleIdList 文章id列表\n     * @return {@link List<String>} 文件url列表\n     */\n    @ApiOperation(value = \"导出文章\")\n    @ApiImplicitParam(name = \"articleIdList\", value = \"文章id\", required = true, dataType = \"List<Integer>\")\n    @PostMapping(\"/admin/articles/export\")\n    public Result<List<String>> exportArticles(@RequestBody List<Integer> articleIdList) {\n        return Result.ok(articleService.exportArticles(articleIdList));\n    }\n```\n## 导入文章\n- 文章导入策略\n```Java\nimport org.springframework.web.multipart.MultipartFile;\n\n/**\n * 文章导入策略\n *\n * @author ting\n * @date 2022/07/28\n */\npublic interface ArticleImportStrategy {\n\n    /**\n     * 导入文章\n     *\n     * @param file 文件\n     */\n    void importArticles(MultipartFile file);\n}\n\n```\n- Markdown文章类型枚举\n分两种文章形式导入，第一种就是普通形式导入、第二种就是hexo形式导入\n- - 第一种普通形式导入策略\n```Java\nimport cn.hutool.core.exceptions.ExceptionUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.minzheng.blog.exception.BizException;\nimport com.minzheng.blog.service.ArticleService;\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\n\nimport com.minzheng.blog.vo.ArticleVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Objects;\n\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\n\n/**\n * 普通文章导入策略\n *\n * @author linweiyuan\n * @date 2022/07/28\n */\n@Slf4j\n@Service(\"normalArticleImportStrategyImpl\")\npublic class NormalArticleImportStrategyImpl implements ArticleImportStrategy {\n    @Autowired\n    private ArticleService articleService;\n\n    @Override\n    public void importArticles(MultipartFile file) {\n        // 获取文件名作为文章标题\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\"\\\\.\")[0];\n        // 获取文章内容\n        StringBuilder articleContent = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\n            while (reader.ready()) {\n                articleContent.append((char) reader.read());\n            }\n        } catch (IOException e) {\n            log.error(StrUtil.format(\"导入文章失败, 堆栈:{}\", ExceptionUtil.stacktraceToString(e)));\n            throw new BizException(\"导入文章失败\");\n        }\n        // 保存文章\n        ArticleVO articleVO = ArticleVO.builder()\n                .articleTitle(articleTitle)\n                .articleContent(articleContent.toString())\n                .status(DRAFT.getStatus())\n                .build();\n        articleService.saveOrUpdateArticle(articleVO);\n    }\n}\n\n```\n- - 第二种hexo形式导入\n```Java\nimport cn.hutool.core.exceptions.ExceptionUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.minzheng.blog.exception.BizException;\nimport com.minzheng.blog.service.ArticleService;\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\nimport com.minzheng.blog.vo.HexoArticleVO;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport static com.minzheng.blog.constant.HexoConst.*;\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\nimport static com.minzheng.blog.enums.ArticleStatusEnum.PUBLIC;\nimport static com.minzheng.blog.enums.ArticleTypeEnum.ORIGINAL;\n\n/**\n * Hexo文章导入策略\n *\n * @author linweiyuan\n * @date 2022/07/28\n */\n@Slf4j\n@Service(\"hexoArticleImportStrategyImpl\")\npublic class HexoArticleImportStrategyImpl implements ArticleImportStrategy {\n    @Autowired\n    private ArticleService articleService;\n\n    /**\n     * hexo最大分隔符数\n     */\n    private final int HEXO_MAX_DELIMITER_COUNT = 2;\n\n    /**\n     * hexo最小分隔符数\n     */\n    private final int HEXO_MIN_DELIMITER_COUNT = 1;\n\n    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n\n    @Override\n    public void importArticles(MultipartFile file) {\n        try {\n            HexoArticleVO hexoArticleVO = new HexoArticleVO();\n            // 原创\n            hexoArticleVO.setType(ORIGINAL.getType());\n            // 公开 （DRAFT不保存分类）\n            hexoArticleVO.setStatus(PUBLIC.getStatus());\n\n            AtomicInteger hexoDelimiterCount = new AtomicInteger();\n            StringBuilder articleContent = new StringBuilder();\n\n            // 分类或标签标记\n            AtomicInteger flag = new AtomicInteger(NORMAL_FLAG);\n\n            List<String> tagList = new ArrayList<>();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));\n            reader.lines().forEach(line -> {\n                if (hexoDelimiterCount.get() == HEXO_MAX_DELIMITER_COUNT) {\n                    // 分隔符结束就是正文\n                    articleContent.append(line).append(NEW_LINE);\n                } else {\n                    if (line.equals(DELIMITER)) {\n                        hexoDelimiterCount.getAndIncrement();\n                    }\n                    if (hexoDelimiterCount.get() == HEXO_MIN_DELIMITER_COUNT) {\n                        if (line.startsWith(TITLE_PREFIX)) {\n                            hexoArticleVO.setArticleTitle(line.replace(TITLE_PREFIX, \"\").trim());\n                        } else if (line.startsWith(DATE_PREFIX)) {\n                            hexoArticleVO.setCreateTime(LocalDateTime.parse(line.replace(DATE_PREFIX, \"\").trim(), formatter));\n                        } else if (line.startsWith(CATEGORIES_PREFIX)) {\n                            flag.set(CATEGORY_FLAG);\n                        } else if (line.startsWith(TAGS_PREFIX)) {\n                            flag.set(TAG_FLAG);\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == CATEGORY_FLAG) {\n                            hexoArticleVO.setCategoryName(line.replace(PREFIX, \"\").trim());\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == TAG_FLAG) {\n                            tagList.add(line.replace(PREFIX, \"\").trim());\n                        }\n                    }\n                }\n            });\n\n            hexoArticleVO.setTagNameList(tagList);\n            hexoArticleVO.setArticleContent(articleContent.toString());\n\n            // 如果分类或标签为空则设为草稿\n            if (CollectionUtils.isEmpty(hexoArticleVO.getTagNameList()) || StrUtil.isBlank(hexoArticleVO.getCategoryName())) {\n                hexoArticleVO.setStatus(DRAFT.getStatus());\n            }\n\n            articleService.saveOrUpdateArticle(hexoArticleVO);\n        } catch (IOException e) {\n            log.error(StrUtil.format(\"导入Hexo文章失败, 堆栈:{}\", ExceptionUtil.stacktraceToString(e)));\n            throw new BizException(\"导入Hexo文章失败\");\n        }\n    }\n\n}\n\n```\n```Java\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * Markdown文章类型枚举\n *\n * @author linweiyuan\n * @date 2022/07/28\n */\n@Getter\n@AllArgsConstructor\npublic enum MarkdownTypeEnum {\n    /**\n     * 普通文章\n     */\n    NORMAL(\"\", \"normalArticleImportStrategyImpl\"),\n    /**\n     * Hexo文章\n     */\n    HEXO(\"hexo\", \"hexoArticleImportStrategyImpl\");\n\n    /**\n     * 类型\n     */\n    private final String type;\n\n    /**\n     * 策略\n     */\n    private final String strategy;\n\n    public static String getMarkdownType(String name) {\n        if (name == null) {\n            return NORMAL.getStrategy();\n        }\n        for (MarkdownTypeEnum value : MarkdownTypeEnum.values()) {\n            if (value.getType().equalsIgnoreCase(name)) {\n                return value.getStrategy();\n            }\n        }\n        return null;\n    }\n}\n```\n\n-  文章导入策略上下文\n```Java\nimport com.minzheng.blog.enums.MarkdownTypeEnum;\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.Map;\n\n/**\n * 文章导入策略上下文\n *\n * @author linweiyuan\n * @date 2022/07/28\n */\n@Service\npublic class ArticleImportStrategyContext {\n    @Autowired\n    private Map<String, ArticleImportStrategy> articleImportStrategyMap;\n\n    public void importArticles(MultipartFile file, String type) {\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\n    }\n}\n\n```\n- controller层 通过markdown形式进行导入文章\n```Java\n\n    /**\n     * 导入文章\n     *\n     * @param file 文件\n     * @param type 文章类型\n     * @return {@link Result<>}\n     */\n    @ApiOperation(value = \"导入文章\")\n    @PostMapping(\"/admin/articles/import\")\n    public Result<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\n        articleImportStrategyContext.importArticles(file, type);\n        return Result.ok();\n    }\n```\n# 文件路径枚举\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\n```Java\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * 文件路径枚举\n *\n * @author Felix\n * @date 2021/08/04\n */\n@Getter\n@AllArgsConstructor\npublic enum FilePathEnum {\n    /**\n     * 头像路径\n     */\n    AVATAR(\"avatar/\", \"头像路径\"),\n    /**\n     * 文章图片路径\n     */\n    ARTICLE(\"articles/\", \"文章图片路径\"),\n    /**\n     * 音频路径\n     */\n    VOICE(\"voice/\", \"音频路径\"),\n    /**\n     * 照片路径\n     */\n    PHOTO(\"photos/\", \"相册路径\"),\n    /**\n     * 配置图片路径\n     */\n    CONFIG(\"config/\", \"配置图片路径\"),\n    /**\n     * 说说图片路径\n     */\n    TALK(\"talks/\", \"说说图片路径\"),\n    /**\n     * md文件路径\n     */\n    MD(\"markdown/\", \"md文件路径\");\n\n    /**\n     * 路径\n     */\n    private final String path;\n\n    /**\n     * 描述\n     */\n    private final String desc;\n\n}\n\n```\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\n```Java\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * 文件扩展名枚举\n *\n * @author Felix\n * @date 2021/08/12\n */\n@Getter\n@AllArgsConstructor\npublic enum FileExtEnum {\n    /**\n     * jpg文件\n     */\n    JPG(\".jpg\", \"jpg文件\"),\n    /**\n     * png文件\n     */\n    PNG(\".png\", \"png文件\"),\n    /**\n     * Jpeg文件\n     */\n    JPEG(\".jpeg\", \"jpeg文件\"),\n    /**\n     * wav文件\n     */\n    WAV(\".wav\", \"wav文件\"),\n    /**\n     * md文件\n     */\n    MD(\".md\",\"markdown文件\"),\n    /**\n     * txt文件\n     */\n    TXT(\".txt\",\"txt文件\");\n\n    /**\n     * 获取文件格式\n     *\n     * @param extName 扩展名\n     * @return {@link FileExtEnum} 文件格式\n     */\n    public static FileExtEnum getFileExt(String extName) {\n        for (FileExtEnum value : FileExtEnum.values()) {\n            if (value.getExtName().equalsIgnoreCase(extName)) {\n                return value;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 扩展名\n     */\n    private final String extName;\n\n    /**\n     * 描述\n     */\n    private final String desc;\n\n}\n\n```\n# 上传图片controller层\n```Java\n  /**\n     * 上传说说图片\n     *\n     * @param file 文件\n     * @return {@link Result<String>} 说说图片地址\n     */\n    @ApiOperation(value = \"上传说说图片\")\n    @ApiImplicitParam(name = \"file\", value = \"说说图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"/admin/talks/images\")\n    public Result<String> saveTalkImages(MultipartFile file) {\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\n    }\n\n\n /**\n     * 上传相册封面\n     *\n     * @param file 文件\n     * @return {@link Result<String>} 相册封面地址\n     */\n    @ApiOperation(value = \"上传相册封面\")\n    @ApiImplicitParam(name = \"file\", value = \"相册封面\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"/admin/photos/albums/cover\")\n    public Result<String> savePhotoAlbumCover(MultipartFile file) {\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\n    }\n\n\n  /**\n     * 上传文章图片\n     *\n     * @param file 文件\n     * @return {@link Result<String>} 文章图片地址\n     */\n    @ApiOperation(value = \"上传文章图片\")\n    @ApiImplicitParam(name = \"file\", value = \"文章图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"/admin/articles/images\")\n    public Result<String> saveArticleImages(MultipartFile file) {\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\n    }\n```\n# 编写前端进行上传\n```JavaScript\nexport default {\n  TENCENT_CAPTCHA: \"2088053498\",\n  UPLOAD_SIZE: 200 // 压缩文件大小\n};\n\n```\n\n```html\n        <el-form-item label=\"上传封面\">\n          <el-upload\n            class=\"upload-cover\"\n            drag\n            action=\"/api/admin/articles/images\"  // 这里调用后端接口\n            multiple\n            :before-upload=\"beforeUpload\"     //文件通过接口上传之前，一般用来判断规则\n            :on-success=\"uploadCover\"\n          >\n            <i class=\"el-icon-upload\" v-if=\"article.articleCover == \'\'\" />\n            <div class=\"el-upload__text\" v-if=\"article.articleCover == \'\'\">\n              将文件拖到此处，或<em>点击上传</em>\n            </div>\n            <img\n              v-else\n              :src=\"article.articleCover\"\n              width=\"360px\"\n              height=\"180px\"\n            />\n          </el-upload>\n        </el-form-item>\n\n\n\n<script>\narticle:{\narticleCover: \"\",\n}\n//压缩图片\n    beforeUpload(file) {\n      return new Promise(resolve => {\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n          resolve(file);\n        }\n        // 压缩到200KB,这里的200就是要压缩的大小,可自定义\n        imageConversion\n          .compressAccurately(file, this.config.UPLOAD_SIZE)\n          .then(res => {\n            resolve(res);\n          });\n      });\n    },\n\n   uploadCover(response) {\n      this.article.articleCover = response.data;\n    },\n</script>\n```\n\n**上传图片和发表文章是分开的，上传图片是存在oss阿里云存储桶里，而发表文章内容是存储在数据库里**\n下面是发表文章\n# 发表文章\n1. 把文章需要显示给客户端看的属性创建VO类进行表示\n```Java\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.*;\n\nimport javax.validation.constraints.NotBlank;\nimport java.util.List;\n\n\n/**\n * 文章\n *\n * @author Felix\n * @date 2021/08/03\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"文章\")\npublic class ArticleVO {\n\n    /**\n     * 文章id\n     */\n    @ApiModelProperty(name = \"id\", value = \"文章id\", dataType = \"Integer\")\n    private Integer id;\n\n    /**\n     * 标题\n     */\n    @NotBlank(message = \"文章标题不能为空\")\n    @ApiModelProperty(name = \"articleTitle\", value = \"文章标题\", required = true, dataType = \"String\")\n    private String articleTitle;\n\n    /**\n     * 内容\n     */\n    @NotBlank(message = \"文章内容不能为空\")\n    @ApiModelProperty(name = \"articleContent\", value = \"文章内容\", required = true, dataType = \"String\")\n    private String articleContent;\n\n    /**\n     * 文章封面\n     */\n    @ApiModelProperty(name = \"articleCover\", value = \"文章缩略图\", dataType = \"String\")\n    private String articleCover;\n\n    /**\n     * 文章分类\n     */\n    @ApiModelProperty(name = \"category\", value = \"文章分类\", dataType = \"Integer\")\n    private String categoryName;\n\n    /**\n     * 文章标签\n     */\n    @ApiModelProperty(name = \"tagNameList\", value = \"文章标签\", dataType = \"List<Integer>\")\n    private List<String> tagNameList;\n\n    /**\n     * 文章类型\n     */\n    @ApiModelProperty(name = \"type\", value = \"文章类型\", dataType = \"Integer\")\n    private Integer type;\n\n    /**\n     * 原文链接\n     */\n    @ApiModelProperty(name = \"originalUrl\", value = \"原文链接\", dataType = \"String\")\n    private String originalUrl;\n\n    /**\n     * 是否置顶\n     */\n    @ApiModelProperty(name = \"isTop\", value = \"是否置顶\", dataType = \"Integer\")\n    private Integer isTop;\n\n    /**\n     * 文章状态 1.公开 2.私密 3.评论可见\n     */\n    @ApiModelProperty(name = \"status\", value = \"文章状态\", dataType = \"String\")\n    private Integer status;\n\n}\n\n```\n2. 创建service层\n```Java\n/**\n * 文章服务\n *\n * @author Felix\n * @date 2021/07/29\n */\npublic interface ArticleService extends IService<Article> {\n    /**\n     * 添加或修改文章\n     *\n     * @param articleVO 文章信息\n     */\n    void saveOrUpdateArticle(ArticleVO articleVO);\n}\n```\n3. 创建Impl层进行业务逻辑编写\n```Java\n/**\n * 文章服务\n *\n * @author Felix\n * @date 2021/08/10\n */\n@Service\n@Slf4j\npublic class ArticleServiceImpl extends ServiceImpl<ArticleDao, Article> implements ArticleService {\n @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\n        // 查询博客配置信息\n        CompletableFuture<WebsiteConfigVO> webConfig = CompletableFuture.supplyAsync(() -> blogInfoService.getWebsiteConfig());\n\n        // 保存文章分类\n        Category category = saveArticleCategory(articleVO);\n        // 保存或修改文章\n        Article article = BeanCopyUtils.copyObject(articleVO, Article.class);\n        if (Objects.nonNull(category)) {\n            article.setCategoryId(category.getId());\n        }\n        // 设定默认文章封面\n        if (StrUtil.isBlank(article.getArticleCover())){\n            try {\n                article.setArticleCover(webConfig.get().getArticleCover());\n            } catch (Exception e) {\n                throw new BizException(\"设定默认文章封面失败\");\n            }\n        }\n        article.setUserId(UserUtils.getLoginUser().getUserInfoId());\n        this.saveOrUpdate(article);\n        // 保存文章标签\n        saveArticleTag(articleVO, article.getId());\n    }\n\n    /**\n     * 保存文章分类\n     *\n     * @param articleVO 文章信息\n     * @return {@link Category} 文章分类\n     */\n    private Category saveArticleCategory(ArticleVO articleVO) {\n        // 判断分类是否存在\n        Category category = categoryDao.selectOne(new LambdaQueryWrapper<Category>().eq(Category::getCategoryName, articleVO.getCategoryName()));\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\n            category = Category.builder().categoryName(articleVO.getCategoryName()).build();\n            categoryDao.insert(category);\n        }\n        return category;\n    }\n\n}\n```\n4. controller\n```Java\n\n    /**\n     * 添加或修改文章\n     *\n     * @param articleVO 文章信息\n     * @return {@link Result<>}\n     */\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改文章\")\n    @PostMapping(\"/admin/articles\")\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\n        articleService.saveOrUpdateArticle(articleVO);\n        return Result.ok();\n    }\n```\n# 前端实现\n```html\n      <div slot=\"footer\">\n        <el-button @click=\"addOrEdit = false\">取 消</el-button>\n        <el-button type=\"danger\" @click=\"saveOrUpdateArticle\">\n          发 表\n        </el-button>\n      </div>\n\n<script>\nreturn{\n  addOrEdit: false,\n  article: {\n        id: null,\n        articleTitle: this.$moment(new Date()).format(\"YYYY-MM-DD\"),\n        articleContent: \"\",\n        articleCover: \"\",\n        categoryName: null,\n        tagNameList: [],\n        originalUrl: \"\",\n        isTop: 0,\n        type: 1,\n        status: 1\n      }\n},\n saveOrUpdateArticle() {\n      if (this.article.articleTitle.trim() == \"\") {\n        this.$message.error(\"文章标题不能为空\");\n        return false;\n      }\n      if (this.article.articleContent.trim() == \"\") {\n        this.$message.error(\"文章内容不能为空\");\n        return false;\n      }\n      if (this.article.categoryName == null) {\n        this.$message.error(\"文章分类不能为空\");\n        return false;\n      }\n      if (this.article.tagNameList.length == 0) {\n        this.$message.error(\"文章标签不能为空\");\n        return false;\n      }\n      if (this.article.articleCover.trim() == \"\") {\n        this.$message.error(\"文章封面不能为空\");\n        return false;\n      }\n      this.axios.post(\"/api/admin/articles\", this.article).then(({ data }) => {\n        if (data.flag) {\n          if (this.article.id === null) {\n            this.$store.commit(\"removeTab\", \"发布文章\");\n          } else {\n            this.$store.commit(\"removeTab\", \"修改文章\");\n          }\n          sessionStorage.removeItem(\"article\");\n          this.$router.push({ path: \"/article-list\" });\n          this.$notify.success({\n            title: \"成功\",\n            message: data.message\n          });\n        } else {\n          this.$notify.error({\n            title: \"失败\",\n            message: data.message\n          });\n        }\n        this.addOrEdit = false;\n      });\n      //关闭自动保存功能\n      this.autoSave = false;\n    },\n</script>\n```\n\n# 可以参考这个博主的文章，挺不错的，里面有很多种不同的上传策略方式等\n[上传策略](https://juejin.cn/post/7169845295801450526)\n\n\n\n\n\n', 1, '', 0, 0, 1, '2021-07-28 14:10:11.000', '2021-09-28 15:50:08.000');
INSERT INTO `tb_article` VALUES (72, 1006, 187, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9929ed2c9e849f619e09c1e3d084b791.jpg', '日志操作', '# 操作日志注解\n```Java\nimport java.lang.annotation.*;\n\n/**\n * 操作日志注解\n *\n * @author Felix\n * @date 2021/07/28\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface OptLog {\n\n    /**\n     * @return 操作类型\n     */\n    String optType() default \"\";\n\n}\n\n```\n# 操作日志\n1. 操作日志maaper\n```Java\n/**\n * 操作日志\n *\n * @author Felix\n * @date 2021/08/10\n */\n@Repository\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\n}\n\n```\n2. 操作日志service\n- 前期工作\n- - 操作日志dto\n```Java\n/**\n * 操作日志\n *\n * @author yezhiqiu\n * @date 2021/08/01\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class OperationLogDTO {\n    /**\n     * 日志id\n     */\n    private Integer id;\n\n    /**\n     * 操作模块\n     */\n    private String optModule;\n\n    /**\n     * 操作路径\n     */\n    private String optUrl;\n\n    /**\n     * 操作类型\n     */\n    private String optType;\n\n    /**\n     * 操作方法\n     */\n    private String optMethod;\n\n    /**\n     * 操作描述\n     */\n    private String optDesc;\n\n    /**\n     * 请求方式\n     */\n    private String requestMethod;\n\n    /**\n     * 请求参数\n     */\n    private String requestParam;\n\n    /**\n     * 返回数据\n     */\n    private String responseData;\n\n    /**\n     * 用户昵称\n     */\n    private String nickname;\n\n    /**\n     * 用户登录ip\n     */\n    private String ipAddress;\n\n    /**\n     * ip来源\n     */\n    private String ipSource;\n\n    /**\n     * 创建时间\n     */\n    private LocalDateTime createTime;\n\n}\n```\n- - 对应的数据库表\n```Java\n/**\n * 操作日志\n *\n * @author Felix\n * @date 2021/08/01\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"tb_operation_log\")\npublic class OperationLog {\n\n    /**\n     * 日志id\n     */\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 操作模块\n     */\n    private String optModule;\n\n    /**\n     * 操作路径\n     */\n    private String optUrl;\n\n    /**\n     * 操作类型\n     */\n    private String optType;\n\n    /**\n     * 操作方法\n     */\n    private String optMethod;\n\n    /**\n     * 操作描述\n     */\n    private String optDesc;\n\n    /**\n     * 请求方式\n     */\n    private String requestMethod;\n\n    /**\n     * 请求参数\n     */\n    private String requestParam;\n\n    /**\n     * 返回数据\n     */\n    private String responseData;\n\n    /**\n     * 用户id\n     */\n    private Integer userId;\n\n    /**\n     * 用户昵称\n     */\n    private String nickname;\n\n    /**\n     * 用户登录ip\n     */\n    private String ipAddress;\n\n    /**\n     * ip来源\n     */\n    private String ipSource;\n\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    /**\n     * 修改时间\n     */\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}\n\n```\n- - 根据条件进行搜索日志消息\n```Java\n/**\n * 查询条件\n *\n * @author Felix\n * @date 2021/07/29\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"查询条件\")\npublic class ConditionVO {\n\n    /**\n     * 页码\n     */\n    @ApiModelProperty(name = \"current\", value = \"页码\", dataType = \"Long\")\n    private Long current;\n\n    /**\n     * 条数\n     */\n    @ApiModelProperty(name = \"size\", value = \"条数\", dataType = \"Long\")\n    private Long size;\n\n    /**\n     * 搜索内容\n     */\n    @ApiModelProperty(name = \"keywords\", value = \"搜索内容\", dataType = \"String\")\n    private String keywords;\n\n    /**\n     * 分类id\n     */\n    @ApiModelProperty(name = \"categoryId\", value = \"分类id\", dataType = \"Integer\")\n    private Integer categoryId;\n\n    /**\n     * 标签id\n     */\n    @ApiModelProperty(name = \"tagId\", value = \"标签id\", dataType = \"Integer\")\n    private Integer tagId;\n\n    /**\n     * 相册id\n     */\n    @ApiModelProperty(name = \"albumId\", value = \"相册id\", dataType = \"Integer\")\n    private Integer albumId;\n\n    /**\n     * 登录类型\n     */\n    @ApiModelProperty(name = \"type\", value = \"登录类型\", dataType = \"Integer\")\n    private Integer loginType;\n\n    /**\n     * 类型\n     */\n    @ApiModelProperty(name = \"type\", value = \"类型\", dataType = \"Integer\")\n    private Integer type;\n\n    /**\n     * 状态\n     */\n    @ApiModelProperty(name = \"status\", value = \"状态\", dataType = \"Integer\")\n    private Integer status;\n\n    /**\n     * 开始时间\n     */\n    @ApiModelProperty(name = \"startTime\", value = \"开始时间\", dataType = \"LocalDateTime\")\n    private LocalDateTime startTime;\n\n    /**\n     * 结束时间\n     */\n    @ApiModelProperty(name = \"endTime\", value = \"结束时间\", dataType = \"LocalDateTime\")\n    private LocalDateTime endTime;\n\n    /**\n     * 是否删除\n     */\n    @ApiModelProperty(name = \"isDelete\", value = \"是否删除\", dataType = \"Integer\")\n    private Integer isDelete;\n\n    /**\n     * 是否审核\n     */\n    @ApiModelProperty(name = \"isReview\", value = \"是否审核\", dataType = \"Integer\")\n    private Integer isReview;\n\n}\n```\n- 操作日志的Service\n```Java\n/**\n * 操作日志服务\n *\n * @author Felix\n * @date 2021/07/29\n */\npublic interface OperationLogService extends IService<OperationLog> {\n\n    /**\n     * 查询日志列表\n     *\n     * @param conditionVO 根据条件搜索文章\n     * @return 日志列表\n     */\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\n\n}\n\n```\n3. 操作日志Impl\n\n```Java\n/**\n * 操作日志服务\n *  PageUtils 分页工具类\n * @author Felix\n * @date 2021/08/08\n */\n@Service\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogDao, OperationLog> implements OperationLogService {\n\n    @Override\n    public PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\n        Page<OperationLog> page = new Page<>(PageUtils.getCurrent(), PageUtils.getSize());\n        // 查询日志列表  通过系统模块或者操作描述(关键字)进行搜索日志消息\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\n                .or()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\n                .orderByDesc(OperationLog::getId));\n        List<OperationLogDTO> operationLogDTOList = BeanCopyUtils.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\n        return new PageResult<>(operationLogDTOList, (int) operationLogPage.getTotal());\n    }\n\n}\n```\n4. 操作日志controller\n```Java\n/**\n * 日志控制器\n *\n * @author Felix\n * @date 2021/07/27\n */\n@Api(tags = \"日志模块\")\n@RestController\npublic class LogController {\n    @Autowired\n    private OperationLogService operationLogService;\n\n    /**\n     * 查看操作日志\n     *\n     * @param conditionVO 条件\n     * @return {@link Result<OperationLogDTO>} 日志列表\n     */\n    @ApiOperation(value = \"查看操作日志\")\n    @GetMapping(\"/admin/operation/logs\")\n    public Result<PageResult<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\n        return Result.ok(operationLogService.listOperationLogs(conditionVO));\n    }\n\n    /**\n     * 删除操作日志\n     *\n     * @param logIdList 日志id列表\n     * @return {@link Result<>}\n     */\n    @ApiOperation(value = \"删除操作日志\")\n    @DeleteMapping(\"/admin/operation/logs\")\n    public Result<?> deleteOperationLogs(@RequestBody List<Integer> logIdList) {\n        operationLogService.removeByIds(logIdList);\n        return Result.ok();\n    }\n\n}\n```\n# 效果\n通过系统模块或者操作描述(关键字)进行搜索日志消息\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/35da2d7b4bf48b4a2644832bbcd42bcc.png)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/46aed129263c4e9dc7104860c3c2ed68.png)\n# 通过切入点进行查看日志消息\n1. 首先需要切面\n```Java\n/**\n * 操作日志切面处理\n *\n * @author Felix\n * @date 2021/07/27\n */\n@Aspect\n@Component\npublic class OptLogAspect {\n\n    @Autowired\n    private OperationLogDao operationLogDao;\n\n    /**\n     * 设置操作日志切入点 记录操作日志 在注解的位置切入代码\n     */\n    @Pointcut(\"@annotation(com.minzheng.blog.annotation.OptLog)\")\n    public void optLogPointCut() {}\n\n\n    /**\n     * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行\n     *\n     * @param value 就是上面切入点的方法\n     * @param joinPoint 切入点\n     * @param keys      返回结果\n     */\n    @AfterReturning(value = \"optLogPointCut()\", returning = \"keys\")\n    @SuppressWarnings(\"unchecked\")\n    public void saveOptLog(JoinPoint joinPoint, Object keys) {\n        // 获取RequestAttributes\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        // 从获取RequestAttributes中获取HttpServletRequest的信息\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\n        OperationLog operationLog = new OperationLog();\n        // 从切面织入点处通过反射机制获取织入点处的方法\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        // 获取切入点所在的方法\n        Method method = signature.getMethod();\n        // 获取操作\n        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        OptLog optLog = method.getAnnotation(OptLog.class);\n        // 操作模块\n        operationLog.setOptModule(api.tags()[0]);\n        // 操作类型\n        operationLog.setOptType(optLog.optType());\n        // 操作描述\n        operationLog.setOptDesc(apiOperation.value());\n        // 获取请求的类名\n        String className = joinPoint.getTarget().getClass().getName();\n        // 获取请求的方法名\n        String methodName = method.getName();\n        methodName = className + \".\" + methodName;\n        // 请求方式\n        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\n        // 请求方法\n        operationLog.setOptMethod(methodName);\n        // 请求参数\n        operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\n        // 返回结果\n        operationLog.setResponseData(JSON.toJSONString(keys));\n        // 请求用户ID\n        operationLog.setUserId(UserUtils.getLoginUser().getId());\n        // 请求用户\n        operationLog.setNickname(UserUtils.getLoginUser().getNickname());\n        // 请求IP\n        String ipAddress = IpUtils.getIpAddress(request);\n        operationLog.setIpAddress(ipAddress);\n        operationLog.setIpSource(IpUtils.getIpSource(ipAddress));\n        // 请求URL\n        operationLog.setOptUrl(request.getRequestURI());\n        operationLogDao.insert(operationLog);\n    }\n\n}\n```\n2. 在controller中使用切点注解\n```Java\n /**\n     * 添加或修改文章\n     *\n     * @param articleVO 文章信息\n     * @return {@link Result<>}\n     */\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改文章\")\n    @PostMapping(\"/admin/articles\")\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\n        articleService.saveOrUpdateArticle(articleVO);\n        return Result.ok();\n    }\n\n    /**\n     * 修改文章置顶状态\n     *\n     * @param articleTopVO 文章置顶信息\n     * @return {@link Result<>}\n     */\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改文章置顶\")\n    @PutMapping(\"/admin/articles/top\")\n    public Result<?> updateArticleTop(@Valid @RequestBody ArticleTopVO articleTopVO) {\n        articleService.updateArticleTop(articleTopVO);\n        return Result.ok();\n    }\n```\n3. 在操作日志可以看到有关这两个接口的消息\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/b243fa449c283dc03ef27e6600afcfab.png)', 1, '', 0, 0, 1, '2021-07-28 23:23:20.000', '2021-07-29 23:42:08.000');
INSERT INTO `tb_article` VALUES (107, 1006, 200, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2F1724551123114_1724551178.jpg', 'Windows上安装Go环境并配置环境变量', '# 下载Go环境\n[GO下载官网链接](https://golang.google.cn/dl/)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724549940.png?t=1724549941561)\n> 解压完成之后得到的文件夹如下\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550005.png?t=1724550006252)\n# 配置环境变量\n> 右击此电脑–>属性–>高级系统设置–>环境变量，打开环境变量设置窗口\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550105.png?t=1724550106433)\n> 需要新建两个环境变量配置\n- 一个是 GOROOT ，这个就是 Go 环境所在目录的配置。\n- 另一个是 GOPATH ，这个是 Go 项目的工作目录，你以后开发的代码就写在这个文件夹中。\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550330.png?t=1724550331346)\n> GOPATH和GOROOT的配置略有不同，我建议配置两个GOPATH目录，第一个用于放 Go 语言的第三方包，第二个用于放自己的开发代码。我们来新建GOPATH。点击系统变量下的新建，在变量名一栏输入GOPATH，在变量值一栏输入任意两个目录，中间用英文分号隔开。\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550470.png?t=1724550471553)\n> 然后将新建的GOROOT配置到 Path 这个环境变量中去，在系统变量中找到 Path，点击编辑->新建，输入%GOROOT%\\bin，点击确定。并将所有母窗口的确定全部点下，确保环境变量生效。\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550642.png?t=1724550643747)\n# 检测是否配置成功\n> windows+R 输入 cmd 打开终端，输入go version，如果输出如下图所示，则安装成功。\n```C\n#查看Go版本\ngo version\n\n#查看Go环境变量\ngo env\n```\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550787.png?t=1724550788285)\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724550812.png?t=1724550812911)\n# 配置 GO111MODULE、GOPROXY、GOSUMDB\n> Go默认的GOPROXY的值是：GOPROXY=https://proxy.golang.org,direct。这个goproxy在使用go get安装第三方库的时候会报错，导致无法下载成功，所以必须要修改一下。\n比如 **https://goproxy.io,direct**(七牛镜像) **https://mirrors.aliyun.com/goproxy**(阿里云镜像)\n```C\n#开启mod模式（项目管理需要用到）\ngo env -w GO111MODULE=on\n#重新设置成七牛镜像源（推荐）或阿里镜像源（用原有的会比较慢）\ngo env -w GOPROXY=https://goproxy.cn,direct\ngo env -w GOPROXY=https://mirrors.aliyun.com/goproxy\n\n#关闭包的MD5校验\ngo env -w GOSUMDB=off\n\n#查看环境变量\ngo env\n\n```\n\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles%2Fimage_1724551056.png?t=1724551057277)', 1, '', 0, 0, 1, '2024-08-25 10:01:18.366', NULL);

-- ----------------------------
-- Table structure for tb_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `tb_article_tag`;
CREATE TABLE `tb_article_tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` bigint UNSIGNED NULL DEFAULT NULL,
  `tag_id` bigint NULL DEFAULT NULL,
  `created_at` datetime(3) NULL DEFAULT NULL,
  `updated_at` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_article_tag_1`(`article_id`) USING BTREE,
  INDEX `fk_article_tag_2`(`tag_id`) USING BTREE,
  INDEX `idx_tb_article_tag_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 969 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_article_tag
-- ----------------------------
INSERT INTO `tb_article_tag` VALUES (859, 56, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (860, 57, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (861, 58, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (862, 59, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (869, 66, 31, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (871, 65, 30, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (872, 67, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (875, 69, 33, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (876, 70, 31, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (881, 71, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (882, 71, 31, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (883, 72, 29, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (884, 73, 34, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (885, 73, 35, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (886, 74, 34, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (887, 74, 35, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (888, 79, 34, '2024-07-28 18:49:49.413', '2024-07-28 18:49:49.413', NULL);
INSERT INTO `tb_article_tag` VALUES (889, 79, 35, '2024-07-28 18:49:49.413', '2024-07-28 18:49:49.413', NULL);
INSERT INTO `tb_article_tag` VALUES (890, 80, 34, '2024-07-28 18:51:17.562', '2024-07-28 18:51:17.562', NULL);
INSERT INTO `tb_article_tag` VALUES (891, 80, 35, '2024-07-28 18:51:17.562', '2024-07-28 18:51:17.562', NULL);
INSERT INTO `tb_article_tag` VALUES (892, 81, 34, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (893, 81, 35, NULL, NULL, NULL);
INSERT INTO `tb_article_tag` VALUES (894, 82, 34, '2024-07-28 20:05:28.237', '2024-07-28 20:05:28.237', NULL);
INSERT INTO `tb_article_tag` VALUES (895, 82, 35, '2024-07-28 20:05:28.237', '2024-07-28 20:05:28.237', NULL);
INSERT INTO `tb_article_tag` VALUES (896, 83, 34, '2024-07-28 20:11:38.237', '2024-07-28 20:11:38.237', NULL);
INSERT INTO `tb_article_tag` VALUES (897, 83, 35, '2024-07-28 20:11:38.237', '2024-07-28 20:11:38.237', NULL);
INSERT INTO `tb_article_tag` VALUES (898, 84, 34, '2024-07-28 20:17:01.489', '2024-07-28 20:17:01.489', NULL);
INSERT INTO `tb_article_tag` VALUES (899, 84, 35, '2024-07-28 20:17:01.489', '2024-07-28 20:17:01.489', NULL);
INSERT INTO `tb_article_tag` VALUES (900, 85, 34, '2024-07-28 20:22:18.240', '2024-07-28 20:22:18.240', NULL);
INSERT INTO `tb_article_tag` VALUES (901, 85, 35, '2024-07-28 20:22:18.240', '2024-07-28 20:22:18.240', NULL);
INSERT INTO `tb_article_tag` VALUES (902, 86, 34, '2024-07-28 20:35:29.002', '2024-07-28 20:35:29.002', NULL);
INSERT INTO `tb_article_tag` VALUES (903, 86, 35, '2024-07-28 20:35:29.002', '2024-07-28 20:35:29.002', NULL);
INSERT INTO `tb_article_tag` VALUES (908, 89, 34, NULL, NULL, '2024-07-29 18:09:42.468');
INSERT INTO `tb_article_tag` VALUES (909, 89, 35, NULL, NULL, '2024-07-29 18:09:42.468');
INSERT INTO `tb_article_tag` VALUES (910, 90, 34, NULL, NULL, '2024-07-29 18:09:42.468');
INSERT INTO `tb_article_tag` VALUES (911, 90, 35, NULL, NULL, '2024-07-29 18:09:42.468');
INSERT INTO `tb_article_tag` VALUES (912, 91, 34, '2024-07-30 01:03:15.251', '2024-07-30 01:03:15.251', NULL);
INSERT INTO `tb_article_tag` VALUES (913, 91, 35, '2024-07-30 01:03:15.251', '2024-07-30 01:03:15.251', NULL);
INSERT INTO `tb_article_tag` VALUES (914, 92, 32, '2024-08-23 12:55:50.766', '2024-08-23 12:55:50.766', NULL);
INSERT INTO `tb_article_tag` VALUES (915, 93, 32, '2024-08-23 12:57:34.749', '2024-08-23 12:57:34.749', NULL);
INSERT INTO `tb_article_tag` VALUES (916, 94, 32, '2024-08-23 12:59:46.119', '2024-08-23 12:59:46.119', NULL);
INSERT INTO `tb_article_tag` VALUES (917, 95, 32, '2024-08-23 13:03:09.295', '2024-08-23 13:03:09.295', NULL);
INSERT INTO `tb_article_tag` VALUES (918, 96, 32, '2024-08-23 13:04:22.851', '2024-08-23 13:04:22.851', NULL);
INSERT INTO `tb_article_tag` VALUES (919, 97, 32, '2024-08-23 13:10:00.175', '2024-08-23 13:10:00.175', NULL);
INSERT INTO `tb_article_tag` VALUES (920, 98, 32, '2024-08-23 14:35:56.301', '2024-08-23 14:35:56.301', NULL);
INSERT INTO `tb_article_tag` VALUES (921, 99, 32, '2024-08-23 14:45:33.712', '2024-08-23 14:45:33.712', NULL);
INSERT INTO `tb_article_tag` VALUES (922, 100, 32, '2024-08-23 21:20:46.759', '2024-08-23 21:20:46.759', NULL);
INSERT INTO `tb_article_tag` VALUES (923, 101, 32, '2024-08-23 21:21:10.003', '2024-08-23 21:21:10.003', NULL);
INSERT INTO `tb_article_tag` VALUES (924, 102, 32, '2024-08-23 21:24:30.903', '2024-08-23 21:24:30.903', NULL);
INSERT INTO `tb_article_tag` VALUES (925, 103, 32, '2024-08-23 21:29:15.786', '2024-08-23 21:29:15.786', NULL);
INSERT INTO `tb_article_tag` VALUES (926, 104, 32, '2024-08-23 21:30:22.196', '2024-08-23 21:30:22.196', NULL);
INSERT INTO `tb_article_tag` VALUES (927, 105, 32, '2024-08-23 21:34:04.472', '2024-08-23 21:34:04.472', NULL);
INSERT INTO `tb_article_tag` VALUES (957, 68, 32, '2024-08-24 22:33:11.840', '2024-08-24 22:33:11.840', '2024-08-24 22:35:57.727');
INSERT INTO `tb_article_tag` VALUES (968, 107, 35, '2024-08-25 10:01:18.379', '2024-08-25 10:01:18.379', NULL);

-- ----------------------------
-- Table structure for tb_category
-- ----------------------------
DROP TABLE IF EXISTS `tb_category`;
CREATE TABLE `tb_category`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '分类名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 201 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_category
-- ----------------------------
INSERT INTO `tb_category` VALUES (187, 'Java', '2022-01-24 23:33:56', '2023-11-25 10:16:13');
INSERT INTO `tb_category` VALUES (188, 'uniapp', '2023-11-27 09:53:05', NULL);
INSERT INTO `tb_category` VALUES (189, '开发工具', '2023-11-27 20:25:46', NULL);
INSERT INTO `tb_category` VALUES (190, '前后端开发经验', '2023-11-27 21:53:36', NULL);
INSERT INTO `tb_category` VALUES (191, '分类标签', '2024-07-28 17:49:04', '2024-07-30 12:22:29');
INSERT INTO `tb_category` VALUES (200, 'GoLang', '2024-08-24 17:39:19', NULL);

-- ----------------------------
-- Table structure for tb_chat_record
-- ----------------------------
DROP TABLE IF EXISTS `tb_chat_record`;
CREATE TABLE `tb_chat_record`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NULL DEFAULT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头像',
  `content` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '聊天内容',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip地址',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip来源',
  `type` tinyint NOT NULL COMMENT '类型',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2994 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_chat_record
-- ----------------------------
INSERT INTO `tb_chat_record` VALUES (2990, 1006, 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/8ed4978eaf0a57910e43c5b4fe4d0ecb.jpg', '叼的', '未知ip', '', 3, '2023-11-25 16:41:49', NULL);
INSERT INTO `tb_chat_record` VALUES (2991, 1006, 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/8ed4978eaf0a57910e43c5b4fe4d0ecb.jpg', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/voice/63d9cd6ead0013dfb6b2b59a5472139c.wav', '未知ip', '', 5, '2023-11-25 16:42:10', NULL);
INSERT INTO `tb_chat_record` VALUES (2992, 1006, 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/8ed4978eaf0a57910e43c5b4fe4d0ecb.jpg', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/voice/bbd5e4b54f96440015c220c3fae7b11a.wav', '未知ip', '', 5, '2023-11-25 16:42:12', NULL);
INSERT INTO `tb_chat_record` VALUES (2993, 1006, 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/8ed4978eaf0a57910e43c5b4fe4d0ecb.jpg', '<img src= \'https://blog-felix.oss-cn-beijing.aliyuncs.com/emoji/heihei.png\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>', '未知ip', '', 3, '2023-11-25 16:57:43', NULL);
INSERT INTO `tb_chat_record` VALUES (2994, 1006, 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/8ed4978eaf0a57910e43c5b4fe4d0ecb.jpg', '<img src= \'https://blog-felix.oss-cn-beijing.aliyuncs.com/emoji/feiwen.png\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>', '未知ip', '', 3, '2023-11-25 17:18:29', NULL);

-- ----------------------------
-- Table structure for tb_comment
-- ----------------------------
DROP TABLE IF EXISTS `tb_comment`;
CREATE TABLE `tb_comment`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '评论用户Id',
  `topic_id` int NULL DEFAULT NULL COMMENT '评论主题id',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论内容',
  `reply_user_id` int NULL DEFAULT NULL COMMENT '回复用户id',
  `parent_id` int NULL DEFAULT NULL COMMENT '父评论id',
  `type` tinyint NOT NULL COMMENT '评论类型 1.文章 2.友链 3.说说',
  `is_delete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除  0否 1是',
  `is_review` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_comment_user`(`user_id`) USING BTREE,
  INDEX `fk_comment_parent`(`parent_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 885 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_comment
-- ----------------------------
INSERT INTO `tb_comment` VALUES (880, 1006, 68, '很好的文章，点赞', NULL, NULL, 1, 0, 1, '2024-08-14 11:03:35', '2024-08-14 11:03:35');
INSERT INTO `tb_comment` VALUES (881, 1006, 68, '赞', 1006, 880, 1, 0, 1, '2024-08-14 15:25:20', '2024-08-14 15:25:20');

-- ----------------------------
-- Table structure for tb_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `tb_friend_link`;
CREATE TABLE `tb_friend_link`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `link_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接名',
  `link_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接头像',
  `link_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接地址',
  `link_intro` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接介绍',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `fk_friend_link_user`(`link_name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_friend_link
-- ----------------------------
INSERT INTO `tb_friend_link` VALUES (1, 'Felix', 'https://blog-felix.oss-cn-beijing.aliyuncs.com/config/c45951c82d9274a38d58d0c840d1cda7.jpg', 'https://blog.csdn.net/m0_56787367?type=blog', '关于我的博客地址', '2023-11-25 15:19:24', '2023-11-25 15:19:27');

-- ----------------------------
-- Table structure for tb_menu
-- ----------------------------
DROP TABLE IF EXISTS `tb_menu`;
CREATE TABLE `tb_menu`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单名',
  `path` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单路径',
  `component` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '组件',
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单icon',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `order_num` tinyint(1) NOT NULL COMMENT '排序',
  `parent_id` int NULL DEFAULT NULL COMMENT '父id',
  `is_hidden` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否隐藏  0否1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 230 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_menu
-- ----------------------------
INSERT INTO `tb_menu` VALUES (1, '首页', '/', '/home/Home.vue', 'el-icon-myshouye', '2021-01-26 17:06:51', '2021-01-26 17:06:53', 1, NULL, 0);
INSERT INTO `tb_menu` VALUES (2, '文章管理', '/article-submenu', 'Layout', 'el-icon-mywenzhang-copy', '2021-01-25 20:43:07', '2021-01-25 20:43:09', 2, NULL, 0);
INSERT INTO `tb_menu` VALUES (3, '消息管理', '/message-submenu', 'Layout', 'el-icon-myxiaoxi', '2021-01-25 20:44:17', '2021-01-25 20:44:20', 3, NULL, 0);
INSERT INTO `tb_menu` VALUES (4, '系统管理', '/system-submenu', 'Layout', 'el-icon-myshezhi', '2021-01-25 20:45:57', '2021-01-25 20:45:59', 5, NULL, 0);
INSERT INTO `tb_menu` VALUES (5, '个人中心', '/setting', '/setting/Setting.vue', 'el-icon-myuser', '2021-01-26 17:22:38', '2021-01-26 17:22:41', 7, NULL, 0);
INSERT INTO `tb_menu` VALUES (6, '发布文章', '/articles', '/article/Article.vue', 'el-icon-myfabiaowenzhang', '2021-01-26 14:30:48', '2021-01-26 14:30:51', 1, 2, 0);
INSERT INTO `tb_menu` VALUES (7, '修改文章', '/articles/*', '/article/Article.vue', 'el-icon-myfabiaowenzhang', '2021-01-26 14:31:32', '2021-01-26 14:31:34', 2, 2, 1);
INSERT INTO `tb_menu` VALUES (8, '文章列表', '/article-list', '/article/ArticleList.vue', 'el-icon-mywenzhangliebiao', '2021-01-26 14:32:13', '2021-01-26 14:32:16', 3, 2, 0);
INSERT INTO `tb_menu` VALUES (9, '分类管理', '/categories', '/category/Category.vue', 'el-icon-myfenlei', '2021-01-26 14:33:42', '2021-01-26 14:33:43', 4, 2, 0);
INSERT INTO `tb_menu` VALUES (10, '标签管理', '/tags', '/tag/Tag.vue', 'el-icon-myicontag', '2021-01-26 14:34:33', '2021-01-26 14:34:36', 5, 2, 0);
INSERT INTO `tb_menu` VALUES (11, '评论管理', '/comments', '/comment/Comment.vue', 'el-icon-mypinglunzu', '2021-01-26 14:35:31', '2021-01-26 14:35:34', 1, 3, 0);
INSERT INTO `tb_menu` VALUES (12, '留言管理', '/messages', '/message/Message.vue', 'el-icon-myliuyan', '2021-01-26 14:36:09', '2021-01-26 14:36:13', 2, 3, 0);
INSERT INTO `tb_menu` VALUES (13, '用户列表', '/users', '/user/User.vue', 'el-icon-myyonghuliebiao', '2021-01-26 14:38:09', '2021-01-26 14:38:12', 1, 202, 0);
INSERT INTO `tb_menu` VALUES (14, '角色管理', '/roles', '/role/Role.vue', 'el-icon-myjiaoseliebiao', '2021-01-26 14:39:01', '2021-01-26 14:39:03', 2, 213, 0);
INSERT INTO `tb_menu` VALUES (15, '接口管理', '/resources', '/resource/Resource.vue', 'el-icon-myjiekouguanli', '2021-01-26 14:40:14', '2021-08-07 20:00:28', 2, 213, 0);
INSERT INTO `tb_menu` VALUES (16, '菜单管理', '/menus', '/menu/Menu.vue', 'el-icon-mycaidan', '2021-01-26 14:40:54', '2021-08-07 10:18:49', 2, 213, 0);
INSERT INTO `tb_menu` VALUES (17, '友链管理', '/links', '/friendLink/FriendLink.vue', 'el-icon-mydashujukeshihuaico-', '2021-01-26 14:41:35', '2021-01-26 14:41:37', 3, 4, 0);
INSERT INTO `tb_menu` VALUES (18, '关于我', '/about', '/about/About.vue', 'el-icon-myguanyuwo', '2021-01-26 14:42:05', '2021-01-26 14:42:10', 4, 4, 0);
INSERT INTO `tb_menu` VALUES (19, '日志管理', '/log-submenu', 'Layout', 'el-icon-myguanyuwo', '2021-01-31 21:33:56', '2021-01-31 21:33:59', 6, NULL, 0);
INSERT INTO `tb_menu` VALUES (20, '操作日志', '/operation/log', '/log/Operation.vue', 'el-icon-myguanyuwo', '2021-01-31 15:53:21', '2021-01-31 15:53:25', 1, 19, 0);
INSERT INTO `tb_menu` VALUES (201, '在线用户', '/online/users', '/user/Online.vue', 'el-icon-myyonghuliebiao', '2021-02-05 14:59:51', '2021-02-05 14:59:53', 7, 202, 0);
INSERT INTO `tb_menu` VALUES (202, '用户管理', '/users-submenu', 'Layout', 'el-icon-myyonghuliebiao', '2021-02-06 23:44:59', '2021-02-06 23:45:03', 4, NULL, 0);
INSERT INTO `tb_menu` VALUES (205, '相册管理', '/album-submenu', 'Layout', 'el-icon-myimage-fill', '2021-08-03 15:10:54', '2021-08-07 20:02:06', 5, NULL, 0);
INSERT INTO `tb_menu` VALUES (206, '相册列表', '/albums', '/album/Album.vue', 'el-icon-myzhaopian', '2021-08-03 20:29:19', '2021-08-04 11:45:47', 1, 205, 0);
INSERT INTO `tb_menu` VALUES (208, '照片管理', '/albums/:albumId', '/album/Photo.vue', 'el-icon-myzhaopian', '2021-08-03 21:37:47', '2021-08-05 10:24:08', 1, 205, 1);
INSERT INTO `tb_menu` VALUES (209, '页面管理', '/pages', '/page/Page.vue', 'el-icon-myyemianpeizhi', '2021-08-04 11:36:27', '2021-08-07 20:01:26', 2, 4, 0);
INSERT INTO `tb_menu` VALUES (210, '照片回收站', '/photos/delete', '/album/Delete.vue', 'el-icon-myhuishouzhan', '2021-08-05 13:55:19', NULL, 3, 205, 1);
INSERT INTO `tb_menu` VALUES (213, '权限管理', '/permission-submenu', 'Layout', 'el-icon-mydaohanglantubiao_quanxianguanli', '2021-08-07 19:56:55', '2021-08-07 19:59:40', 4, NULL, 0);
INSERT INTO `tb_menu` VALUES (214, '网站管理', '/website', '/website/Website.vue', 'el-icon-myxitong', '2021-08-07 20:06:41', NULL, 1, 4, 0);
INSERT INTO `tb_menu` VALUES (215, '说说管理', '/talk-submenu', 'Layout', 'el-icon-mypinglun', '2022-01-23 20:17:59', '2022-01-23 20:38:06', 5, NULL, 0);
INSERT INTO `tb_menu` VALUES (216, '发布说说', '/talks', '/talk/Talk.vue', 'el-icon-myfabusekuai', '2022-01-23 20:18:43', '2022-01-23 20:38:19', 1, 215, 0);
INSERT INTO `tb_menu` VALUES (217, '说说列表', '/talk-list', '/talk/TalkList.vue', 'el-icon-myiconfontdongtaidianji', '2022-01-23 23:28:24', '2022-01-24 00:02:48', 2, 215, 0);
INSERT INTO `tb_menu` VALUES (218, '修改说说', '/talks/:talkId', '/talk/Talk.vue', 'el-icon-myshouye', '2022-01-24 00:10:44', NULL, 3, 215, 1);

-- ----------------------------
-- Table structure for tb_message
-- ----------------------------
DROP TABLE IF EXISTS `tb_message`;
CREATE TABLE `tb_message`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `nickname` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `message_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `ip_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `ip_source` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `time` bigint NULL DEFAULT NULL,
  `is_review` bigint NULL DEFAULT 1,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  `deleted_at` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_tb_message_deleted_at`(`deleted_at`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3946 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_message
-- ----------------------------
INSERT INTO `tb_message` VALUES (3938, '管理员', 'https://static.talkxj.com/avatar/user.png', '测试留言', '127.0.0.1', '', 9, 1, '2022-01-24 23:34:41.000', NULL, NULL);
INSERT INTO `tb_message` VALUES (3939, '游客', 'https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png', '大大', '127.0.0.1', '', 8, 1, '2024-05-06 22:10:54.000', NULL, NULL);

-- ----------------------------
-- Table structure for tb_operation_log
-- ----------------------------
DROP TABLE IF EXISTS `tb_operation_log`;
CREATE TABLE `tb_operation_log`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `opt_module` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作模块',
  `opt_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作类型',
  `opt_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作url',
  `opt_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作方法',
  `opt_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作描述',
  `request_param` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求参数',
  `request_method` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求方式',
  `response_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '返回数据',
  `user_id` int NOT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `ip_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1169 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_operation_log
-- ----------------------------
INSERT INTO `tb_operation_log` VALUES (1083, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"恭喜你成功运行博客，开启你的文章之旅吧。\",\"articleCover\":\"https://static.talkxj.com/articles/3dffb2fcbd541886616ab54c92570de3.jpg\",\"articleTitle\":\"测试文章\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"测试标签\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '127.0.0.1', '', '2022-01-24 23:33:57', NULL);
INSERT INTO `tb_operation_log` VALUES (1084, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"blog\",\"articleCover\":\"http://你的文件上传子域名/articles/2801c9ca1267b198a961ebdc07e77077.jpg\",\"articleTitle\":\"测试001\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '127.0.0.1', '', '2023-11-24 20:03:16', NULL);
INSERT INTO `tb_operation_log` VALUES (1085, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[55],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 20:37:09', NULL);
INSERT INTO `tb_operation_log` VALUES (1086, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"0001\",\"articleCover\":\"S:/picture/articles/2801c9ca1267b198a961ebdc07e77077.jpg\",\"articleTitle\":\"测试--001\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 20:37:58', NULL);
INSERT INTO `tb_operation_log` VALUES (1087, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"222\",\"articleCover\":\"S:\\\\picturearticles/2801c9ca1267b198a961ebdc07e77077.jpg\",\"articleTitle\":\"22\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 20:41:04', NULL);
INSERT INTO `tb_operation_log` VALUES (1088, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[57],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 20:41:20', NULL);
INSERT INTO `tb_operation_log` VALUES (1089, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[56],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 20:41:21', NULL);
INSERT INTO `tb_operation_log` VALUES (1090, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"22\",\"articleCover\":\"muzinan-blog.oss-cn-beijing.aliyuncs.comarticles/f55abf871bbc433aae6eda2f43ff9c30.jpg\",\"articleTitle\":\"2023-11-24\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 21:45:38', NULL);
INSERT INTO `tb_operation_log` VALUES (1091, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"2023\",\"articleCover\":\"blog-felix.oss-cn-beijing.aliyuncs.comarticles/f55abf871bbc433aae6eda2f43ff9c30.jpg\",\"articleTitle\":\"2023\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 22:59:44', NULL);
INSERT INTO `tb_operation_log` VALUES (1092, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[59],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:00:57', NULL);
INSERT INTO `tb_operation_log` VALUES (1093, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"测试002\",\"articleCover\":\"blog-felix.oss-cn-beijing.aliyuncs.comarticles/2801c9ca1267b198a961ebdc07e77077.jpg\",\"articleTitle\":\"测试\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:09:56', NULL);
INSERT INTO `tb_operation_log` VALUES (1094, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"2222\",\"articleCover\":\"blog-felix.oss-cn-beijing.aliyuncs.comarticles/f55abf871bbc433aae6eda2f43ff9c30.jpg\",\"articleTitle\":\"555\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:27:07', NULL);
INSERT INTO `tb_operation_log` VALUES (1095, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[61],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:31:22', NULL);
INSERT INTO `tb_operation_log` VALUES (1096, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[60],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:31:25', NULL);
INSERT INTO `tb_operation_log` VALUES (1097, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"1111\",\"articleCover\":\"blog-felix.oss-cn-beijing.aliyuncs.comarticles/f55abf871bbc433aae6eda2f43ff9c30.jpg\",\"articleTitle\":\"测试测试测试测试\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:31:57', NULL);
INSERT INTO `tb_operation_log` VALUES (1098, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"22221312eadasd\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f55abf871bbc433aae6eda2f43ff9c30.jpg\",\"articleTitle\":\"222\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:40:34', NULL);
INSERT INTO `tb_operation_log` VALUES (1099, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[62],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-24 23:40:37', NULL);
INSERT INTO `tb_operation_log` VALUES (1100, '用户信息模块', '修改', '/admin/users/role', 'com.minzheng.blog.controller.UserInfoController.updateUserRole', '修改用户角色', '[{\"nickname\":\"用户1728226941569335298\",\"roleIdList\":[2,1],\"userInfoId\":1006}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 1, '管理员', '10.240.12.21', '本地局域网', '2023-11-25 09:43:01', NULL);
INSERT INTO `tb_operation_log` VALUES (1101, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"1\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/c45951c82d9274a38d58d0c840d1cda7.jpg\",\"articleTitle\":\"测试\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 09:45:07', NULL);
INSERT INTO `tb_operation_log` VALUES (1102, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[64],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 09:45:52', NULL);
INSERT INTO `tb_operation_log` VALUES (1103, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[63],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 09:45:55', NULL);
INSERT INTO `tb_operation_log` VALUES (1104, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[54],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 09:45:59', NULL);
INSERT INTO `tb_operation_log` VALUES (1105, '友链模块', '删除', '/admin/links', 'com.minzheng.blog.controller.FriendLinkController.deleteFriendLink', '删除友链', '[[26]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 10:08:51', NULL);
INSERT INTO `tb_operation_log` VALUES (1106, '评论模块', '删除', '/admin/comments', 'com.minzheng.blog.controller.CommentController.deleteComments', '删除评论', '[[730,729,728,727,726,725]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 10:09:34', NULL);
INSERT INTO `tb_operation_log` VALUES (1107, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"Java\",\"id\":187}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 10:16:13', NULL);
INSERT INTO `tb_operation_log` VALUES (1108, '标签模块', '新增或修改', '/admin/tags', 'com.minzheng.blog.controller.TagController.saveOrUpdateTag', '添加或修改标签', '[{\"id\":29,\"tagName\":\"SpringBoot\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, '用户1728226941569335298', '10.240.12.21', '本地局域网', '2023-11-25 10:16:43', NULL);
INSERT INTO `tb_operation_log` VALUES (1109, '标签模块', '新增或修改', '/admin/tags', 'com.minzheng.blog.controller.TagController.saveOrUpdateTag', '添加或修改标签', '[{\"tagName\":\"算法\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-25 23:24:49', NULL);
INSERT INTO `tb_operation_log` VALUES (1110, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 推荐核心算法\\npackage com.example.demo.recommend.core;\\n\\nimport com.example.demo.recommend.dto.RelateDTO;\\nimport com.google.common.collect.Lists;\\n\\n\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.IntStream;\\n\\n/**\\n * @author Felix\\n * @Description:核心算法\\n * @Package com.supermarket.product.core\\n * @date 2021/4/22 16:12\\n */\\npublic class CoreMath {\\n    /**\\n     * 推荐\\n     * @param userId 用户id\\n     * @param list 推荐的idList集合\\n     * @return\\n     */\\n    public List<Integer> recommend(Integer userId, List<RelateDTO> list) {\\n        //找到最近邻用户id\\n        Map<Double, Integer> distances = computeNearestNeighbor(userId, list);\\n        //取出相似度最近的用户id\\n        Integer nearest = distances.values().iterator().next();\\n        Iterator<Integer> iterator = distances.values().iterator();\\n        while(iterator.hasNext()){\\n            nearest = iterator.next();\\n        }\\n        Map<Integer, List<RelateDTO>> userMap =list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\\n\\n        //最近邻用户买过的商品id列表\\n        List<Integer> neighborItemList = userMap.get(nearest).stream().map(e->e.getProductId()).collect(Collectors.toList());\\n        //指定用户买过的商品id列表\\n        List<Integer> userItemList  = userMap.get(userId).stream().map(e->e.getProductId()).collect(Collectors.toList());\\n\\n        //找到最近邻买过，但是该用户没买过的商品id，计算推荐，放入推荐列表\\n        List<Integer> recommendList = new ArrayList<>();\\n        for (Integer item : neighborItemList) {\\n            if (!userItemList.contains(item)) {\\n                recommendList.add(item);\\n            }\\n        }\\n        Collections.sort(recommendList);\\n        return recommendList;\\n    }\\n\\n    /**\\n     * 在给定userId的情况下，计算其他用户和它的相关系数并排序\\n     * @param userId\\n     * @param list\\n     * @return\\n     */\\n    private Map<Double, Integer> computeNearestNeighbor(Integer userId, List<RelateDTO> list) {\\n        Map<Integer, List<RelateDTO>> userMap = list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\\n        //treemap是从小到大排好序的\\n        Map<Double, Integer> distances = new TreeMap<>();\\n        userMap.forEach((k,v)->{\\n            if(k.intValue() != userId.intValue()){\\n                double distance = pearson_dis(v,userMap.get(userId));\\n                distances.put(distance, k);\\n            }\\n        });\\n        return distances;\\n    }\\n\\n    /**\\n     * 计算两个序列间的相关系数\\n     *\\n     * @param xList 其他用户的数据集\\n     * @param yList 当前用户的数据集\\n     * @return\\n     */\\n    private double pearson_dis(List<RelateDTO> xList, List<RelateDTO> yList) {\\n        List<Integer> xs= Lists.newArrayList();\\n        List<Integer> ys= Lists.newArrayList();\\n        xList.forEach(x->{\\n            yList.forEach(y->{\\n                if(x.getProductId().intValue() == y.getProductId().intValue()){\\n                    xs.add(x.getIndex());\\n                    ys.add(y.getIndex());\\n                }\\n            });\\n        });\\n        return getRelate(xs,ys);\\n    }\\n\\n    /**\\n     * 方法描述: 皮尔森（pearson）相关系数计算\\n     * (x1,y1) 理解为 a 用户对 x 商品的点击次数和对 y 商品的点击次数\\n     * @param xs\\n     * @param ys\\n     * @Return {@link Double}\\n     * @throws\\n     * @author tarzan\\n     * @date 2020年07月31日 17:03:20\\n     */\\n    public static Double getRelate(List<Integer> xs, List<Integer> ys){\\n        int n=xs.size();\\n        double Ex= xs.stream().mapToDouble(x->x).sum();\\n        double Ey=ys.stream().mapToDouble(y->y).sum();\\n        double Ex2=xs.stream().mapToDouble(x-> Math.pow(x,2)).sum();\\n        double Ey2=ys.stream().mapToDouble(y-> Math.pow(y,2)).sum();\\n        double Exy= IntStream.range(0,n).mapToDouble(i->xs.get(i)*ys.get(i)).sum();\\n        double numerator=Exy-Ex*Ey/n;\\n        double denominator= Math.sqrt((Ex2- Math.pow(Ex,2)/n)*(Ey2- Math.pow(Ey,2)/n));\\n        if (denominator==0) {\\n            return 0.0;\\n        }\\n        return numerator/denominator;\\n    }\\n\\n}\\n\\n## 创建Impl层写业务，比如想在一个模块中引用用户行为进行推荐。\\n这里做个例子，比如要做音乐系统，想通过用户的**收藏**这个**行为**进行推荐相似的音乐则在这个业务层里写业务。\\n1. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a2c8582123afde21ad6979ab03f818f4.png)\\n2. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/b921d978559c00165b650f57da87220d.png)\\n3. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d8f2b06c718ff93a62a82117873246bc.png)\\n4. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/92e3ba5506847804acd85f2d2d217997.png)\\n5. 获取收藏的歌\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e0f6721dc0b6f0cb3ee432708d6e321e.png)\\n6. 获取歌曲\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d0ff9af0868a5fe0b2193829fed9bfa6.png)\\n7. 推荐歌曲\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/eaff1e5550a796c1e21b0832ef71e990.png)\\n8. 通过收藏行为推荐歌单列表\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e95f3e165ece0a067131e72b78b7035b.png)、\\n## 在controller层中调用\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8da1128aa927ea6782573acd4a2d74c0.png)\\n ## 效果 ----------------->\\n前端是拿别人的，所以我们只看效果\\n1. 用户1\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/1284190681838bfb368455f52f2e9990.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d9cab0b1d6b72a2b7d6d4f3486a06f44.png)\\n2. 用户2\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ccac757dc4c1e31b69b42f5d5192a724.png)\\n![image.png](1)\\n## 项目链接\\n[gitee地址](https://gitee.com/yuxuan-yuxuan/collaborative-filtering-example)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/db9d713ef259621c67aeab6fbd8ebba6.jpg\",\"articleTitle\":\"springBoot的协同过滤算法\",\"categoryName\":\"Java\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-25 23:27:43', NULL);
INSERT INTO `tb_operation_log` VALUES (1111, '相册模块', '新增或修改', '/admin/photos/albums', 'com.minzheng.blog.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum', '保存或更新相册', '[{\"albumCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/7ed270813bd642c86bf6cb438a504738.jpg\",\"albumDesc\":\"马里奥\",\"albumName\":\"马里奥\",\"status\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-26 12:30:46', NULL);
INSERT INTO `tb_operation_log` VALUES (1112, '照片模块', '新增', '/admin/photos', 'com.minzheng.blog.controller.PhotoController.savePhotos', '保存照片', '[{\"albumId\":8,\"photoUrlList\":[\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/7ed270813bd642c86bf6cb438a504738.jpg\",\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/13464b9a67c9aee1770a846e9a2674d2.jpg\",\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/5dd6ed872f385faf64b02363858d14ca.jpg\",\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/4adcb161393e7d0bc9f3aa21bea75d0a.jpg\",\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/11b16bda6e0d43c8074475b83ad55794.jpg\"]}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-26 12:31:16', NULL);
INSERT INTO `tb_operation_log` VALUES (1113, '标签模块', '新增或修改', '/admin/tags', 'com.minzheng.blog.controller.TagController.saveOrUpdateTag', '添加或修改标签', '[{\"tagName\":\"前端\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 09:52:58', NULL);
INSERT INTO `tb_operation_log` VALUES (1114, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"uniapp\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 09:53:06', NULL);
INSERT INTO `tb_operation_log` VALUES (1115, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 这里用百度OCR\\n## 第一步：注册百度云账号\\n [百度OCR链接](https://login.bce.baidu.com/?account=&redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F%3F_%3D1660902879514%26fromai%3D1#/ai/ocr/app/list)\\n## 第二步：进入百度云点击控制台 -> 搜索OCR -> 根据情况创建应用\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/45da5656751d54b7be065e6ed2ac598c.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/414572f75f75066c1f784a35164b7945.png)\\n点击立即使用\\n## 第三步：创建应用 获取AK、SK\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/36cd355568d9d5b8417cc4063e09b018.png)\\n## 第四步： 填写相应的东西（可以随便填）\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/fc01152c52295c1aac774b23f10fc19a.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/3a7e58a68028108abb997c914cd48a60.png)\\n## 第五步： 查看AK、SK\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/aa71f230a6c6359e775e59a0e8a5da0d.png)\\n查看百度OCR Api文档\\n[文字识别OCR](https://cloud.baidu.com/doc/OCR/s/1k3h7y3db)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/4249f3d70a84046cce4b604520b451c7.png)\\n\\n**最重要的： 要想在uniapp中使用百度OCR的话 必须要运行在微信开发者工具里，不然会报错**\\n# 在微信小程序开发者运行\\n其中微信小程序开发者运行的时候 要改的Appid 可以扫码获取的 如果是游客的话，运行不了\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e6b3e0e7502467ca90782d4fb0e97622.png)\\n# 代码整合\\n```Uniapp\\n<template>\\n\\t<view class=\\\"content\\\">\\n\\t\\t<!-- <image class=\\\"logo\\\" src=\\\"/static/logo.png\\\"></image> -->\\n\\t\\t<view class=\\\"text-area\\\">\\n\\t\\t\\t<text class=\\\"title\\\">{{title}}</text>\\n\\t\\t</view>\\n\\t\\t<view class=\\\"\\\" @click=\\\"getACSS_TOKEN\\\" style=\\\"font-size: 36px;\\\">\\n\\t\\t\\tgettoken\\n\\t\\t</view>\\n\\t\\t<view class=\\\"\\\" @click=\\\"test\\\">\\n\\t\\t\\ttest\\n\\t\\t</view>\\n\\t\\t<image :src=\\\"base64str\\\" mode=\\\"\\\"></image>\\n\\t</view>\\n</template>\\n \\n<script>\\n\\texport default {\\n\\t\\tdata() {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\ttitle: \'Hello\',\\n\\t\\t\\t\\tapiKey: \'\',\\n\\t\\t\\t\\tSecretKey: \'\',\\n\\t\\t\\t\\tbase64str: \'\'\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tonLoad() {\\n\\t\\t\\t// 在百度智能云那边创建一个应用后可以获取到下面两个参数 api Key  和  Secret Key\\n\\t\\t\\tthis.apiKey = uni.getStorageSync(\'apiKey\')\\n\\t\\t\\tthis.SecretKey = uni.getStorageSync(\'SecretKey\')\\n\\t\\t},\\n\\t\\tmethods: {\\n\\t\\t\\ttest() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tlet access_token = uni.getStorageSync(\'access_token\')\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuni.chooseImage({\\n\\t\\t\\t\\t    count: 1, //默认9\\n\\t\\t\\t\\t    sizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\\n\\t\\t\\t\\t    sourceType: [\'camera\',\'album\'], //从拍照或者相册选择 \\n\\t\\t\\t\\t    success: function (res) {\\n\\t\\t\\t\\t        \\n\\t\\t\\t\\t\\t\\tlet tempFilePaths = res.tempFilePaths[0]\\n\\t\\t\\t\\t\\t\\t// 图片转 base64\\n\\t\\t\\t\\t\\t\\tuni.getFileSystemManager().readFile({\\n\\t\\t\\t\\t\\t\\t\\tfilePath: tempFilePaths, //选择图片返回的相对路径  \\n\\t\\t\\t\\t\\t\\t\\tencoding: \'base64\', //编码格式  \\n\\t\\t\\t\\t\\t\\t\\tsuccess: v=> { //成功的回调  \\n\\t\\t\\t\\t\\t\\t\\t\\tlet base64 =  v.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \\n\\t\\t\\t\\t\\t\\t\\t\\tthat.base64str = \'data:image/jpeg;base64,\' + base64\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t// 开始识别\\n\\t\\t\\t\\t\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' + access_token,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\timage: base64,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid_card_side: \'front\'// 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t }  \\n\\t\\t\\t\\t\\t\\t}) \\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t    }\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\n\\t\\t\\t},\\n\\t\\t\\t// access_token 有效期为 2592000 秒 / 30天\\n\\t\\t\\tgetACSS_TOKEN() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/oauth/2.0/token\',\\n\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\tgrant_type: \'client_credentials\',\\n\\t\\t\\t\\t\\t\\tclient_id: \'5tiRo6aR7rMao1Yee0KQenu1\',// 对应自己创建应用里获取的AK\\n\\t\\t\\t\\t\\t\\tclient_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\'// 对应自己创建应用里获取的SK\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\tuni.setStorageSync(\'access_token\', res.data.access_token)\\n\\t\\t\\t\\t\\t\\t// console.log(JSON.parse(res.data))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n</script>\\n \\n<style>\\n\\t.content {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\talign-items: center;\\n\\t\\tjustify-content: center;\\n\\t}\\n \\n\\t.logo {\\n\\t\\theight: 200rpx;\\n\\t\\twidth: 200rpx;\\n\\t\\tmargin-top: 200rpx;\\n\\t\\tmargin-left: auto;\\n\\t\\tmargin-right: auto;\\n\\t\\tmargin-bottom: 50rpx;\\n\\t}\\n \\n\\t.text-area {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: center;\\n\\t}\\n \\n\\t.title {\\n\\t\\tfont-size: 36rpx;\\n\\t\\tcolor: #8f8f94;\\n\\t}\\n</style>\\n```\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a4152f1f3bec039e2006c0d2f0f71efc.png)\\n# 实战代码整合 ----> 结合表单进行\\n```html\\n<template>\\n\\t<view class=\\\"wrap\\\">\\n\\t\\t<u-form :model=\\\"model\\\" :rules=\\\"rules\\\" ref=\\\"uForm\\\">\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" label-width=\\\"150\\\" :label-position=\\\"labelPosition\\\" label=\\\"身份证号码\\\" prop=\\\"idNo\\\">\\n\\t\\t\\t\\t<u-input placeholder=\\\"请输入身份证号码\\\" v-model=\\\"model.idNo\\\" type=\\\"text\\\" maxlength=\\\"18\\\"></u-input>\\n\\t\\t\\t\\t<u-icon size=\\\"30px\\\" name=\\\"camera\\\" slot=\\\"right\\\" color=\\\"#2979ff\\\" @click=\\\"info()\\\"></u-icon>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t\\n\\t\\t</u-form>\\n \\n\\t\\t\\n\\t\\n\\t</view>\\n</template>\\n \\n<script>\\n\\texport default {\\n\\t\\tdata() {\\n\\t\\t\\tlet that = this;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tmodel: {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tidNo: \'\',\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\tonReady() {\\n\\t\\t\\tthis.$refs.uForm.setRules(this.rules);\\n\\t\\t},\\n\\t\\n\\t\\tonLoad() {\\n\\t\\n\\t\\t\\tthis.getToken()\\n\\t\\t},\\n\\t\\tmethods: {\\n\\t\\t\\tinfo() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tlet access_token = uni.getStorageSync(\'access_token\')\\n \\n\\t\\t\\t\\tuni.chooseImage({\\n\\t\\t\\t\\t\\tcount: 1, //默认9\\n\\t\\t\\t\\t\\tsizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\\n\\t\\t\\t\\t\\tsourceType: [\'camera\', \'album\'], //从相册选择 或者拍照\\n\\t\\t\\t\\t\\tsuccess: function(res) {\\n \\n\\t\\t\\t\\t\\t\\tlet tempFilePaths = res.tempFilePaths[0]\\n\\t\\t\\t\\t\\t\\t// 图片转 base64\\n\\t\\t\\t\\t\\t\\tuni.getFileSystemManager().readFile({\\n\\t\\t\\t\\t\\t\\t\\tfilePath: tempFilePaths, //选择图片返回的相对路径  \\n\\t\\t\\t\\t\\t\\t\\tencoding: \'base64\', //编码格式  \\n\\t\\t\\t\\t\\t\\t\\tsuccess: v => { //成功的回调  \\n\\t\\t\\t\\t\\t\\t\\t\\tlet base64 = v\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \\n\\t\\t\\t\\t\\t\\t\\t\\tthat.base64str = \'data:image/jpeg;base64,\' + base64\\n \\n\\t\\t\\t\\t\\t\\t\\t\\t// 开始识别\\n\\t\\t\\t\\t\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taccess_token,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\timage: base64,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid_card_side: \'front\' // 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// console.log(res.data.words_result.住址.words)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.idNo = res.data.words_result.公民身份号码\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.hlocation = res.data.words_result.住址\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.race = res.data.words_result.民族\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.gender = res.data.words_result.性别\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t})\\n \\n \\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\tgetToken() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/oauth/2.0/token\',\\n\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\tgrant_type: \'client_credentials\',\\n\\t\\t\\t\\t\\t\\tclient_id: \'5tiRo6aR7rMao1Yee0KQenu1\', // 在百度智能云那边创建一个应用后可以获取\\n\\t\\t\\t\\t\\t\\tclient_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\' // 在百度智能云那边创建一个应用后可以获取\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\tuni.setStorageSync(\'access_token\', res.data.access_token)\\n\\t\\t\\t\\t\\t\\t// console.log(JSON.parse(res.data))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\t\\n\\t\\t}\\n\\t};\\n</script>\\n \\n<style scoped lang=\\\"scss\\\">\\n\\t.wrap {\\n\\t\\tpadding: 30rpx;\\n\\t}\\n \\n\\t.row {\\n\\t\\tmargin-top: 35px;\\n\\t\\tmargin-left: 76px;\\n\\t}\\n</style>\\n```\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9af51b55bddae69ca8319350964f9a40.png)\\n\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f18480a830d359d481d92d652e1ebe04.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/01231c4c2de1ab58b43547c0898ef4da.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/c273ca9b0ffcbd842d7ec4f082eda8b6.png)\\n**主动获取access_token变成 运行主动获取 **\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9cd12d940fdd94279b0506c8234b1d28.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/efd8584c4a76cf2e1b916bdebe05b9cd.png)\\n## 效果图\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f41831a89f3434423a2578caf4b57a77.png)\\n在手机上运行的效果，可以从相册获取也可以拍照获取\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f9703454b05973b5345b9635643664d8.png)\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/963322878219602581b2f725ffddf128.png\",\"articleTitle\":\"企业级uniapp集成OCR的应用\",\"categoryName\":\"uniapp\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 09:53:28', NULL);
INSERT INTO `tb_operation_log` VALUES (1116, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这里讲的是有关springBoot 安全开发的步骤以及思路！！！\\n# Jwt Token的编写思路\\n- 第一步：导包\\n```xml\\n        <dependency>\\n            <groupId>com.auth0</groupId>\\n            <artifactId>java-jwt</artifactId>\\n            <version>3.9.0</version>\\n        </dependency>\\n        <!-- https://mvnrepository.com/artifact/org.json/json -->\\n        <dependency>\\n            <groupId>org.json</groupId>\\n            <artifactId>json</artifactId>\\n            <version>20190722</version>\\n        </dependency>\\n```\\n- 第二步 token工具(生成、校验)\\n- - 其中令牌有效期可以在 application.yml文件配置\\n```yml\\nmybatis:\\n  mapperLocations: classpath:mapper/*.xml\\n  typeAliasesPackage: com.example.demo.domain\\n\\nserver:\\n  port: 8888\\nspring:\\n  datasource:\\n    driver-class-name: com.mysql.cj.jdbc.Driver\\n    password: 123456\\n    url: jdbc:mysql://localhost:3306/music_data?serverTimezone=Asia/Shanghai\\n    username: root\\n  devtools:\\n    restart:\\n      additional-paths: src/main/java\\n      enabled: true\\n      exclude: WEB-INF/**\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n  server:\\n    MaxFileSize: 50MB\\n    MaxRequestSize: 50MB\\n  redis:\\n    host: localhost\\n    port: 6379\\n    jedis:\\n      pool:\\n        max-active: -1\\n        max-wait: 3000ms\\n    timeout: 3000ms\\n\\nswagger:\\n  # 是否开启swagger\\n  enabled: true\\ntoken:  # 与spring同级\\n  # 令牌自定义标识\\n  header: Authorization\\n  # 令牌密钥\\n  secret: abcdefghijklmnopqrstuvwxyz\\n  # 令牌有效期（默认5分钟）\\n  expireTime: 300000\\n```\\n\\n```Java\\npackage com.example.demo.service.impl;\\n\\nimport cn.hutool.core.date.DateUtil;\\nimport com.auth0.jwt.JWT;\\nimport com.auth0.jwt.JWTVerifier;\\nimport com.auth0.jwt.algorithms.Algorithm;\\nimport com.auth0.jwt.exceptions.JWTCreationException;\\n\\nimport com.auth0.jwt.interfaces.DecodedJWT;\\n\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\n\\n\\nimport java.util.Calendar;\\nimport java.util.Date;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\n/**\\n * @Author Felix\\n * The type Token service.\\n */\\n@Service\\npublic class TokenService {\\n\\n    // 令牌有效期（默认5分钟）\\n    private static Integer expireTime;\\n    public static final long REFRESH_EXPIRE_TIME=30*60;//RefreshToken到期时间为30分钟，秒为单位\\n    private static final String TOKEN_SECRET=\\\"ljdyaishijin**3nkjnj??\\\";  //密钥盐\\n    /**\\n     * Sets expired time in.\\n     * @Author Felix\\n     * @param expiredTimeIn the expired time in\\n     */\\n    @Value(\\\"${token.expireTime}\\\")\\n    public void setExpiredTimeIn(Integer expiredTimeIn) {\\n        TokenService.expireTime = expiredTimeIn;\\n    }\\n\\n\\n    /**\\n     * Gets token.\\n     * @Author Felix\\n     *\\n     * @return the token\\n     */\\n    public static String getToken(String account, Long currentTime) {\\n        Map<String, Date> map = TokenService.calculateExpiredIssues();\\n        String token = \\\"\\\";\\n        Date expireAt = new Date(currentTime + TokenService.expireTime);\\n        try {\\n            token = JWT.create()\\n                    //.withAudience(user.getUsername()) // 将 user id 保存到 token 里面\\n                    .withIssuer(\\\"Felix\\\")\\n                    .withClaim(\\\"account\\\", account)\\n                    .withClaim(\\\"currentTime\\\", currentTime)\\n                  // .withExpiresAt(map.get(\\\"expiredTime\\\")) //五分钟后token过期\\n                    .withExpiresAt(expireAt)\\n                    .sign(Algorithm.HMAC256(TokenService.TOKEN_SECRET)); // 以 password 作为 token 的密钥\\n        } catch (IllegalArgumentException | JWTCreationException e) {\\n\\n        }\\n\\n        return token;\\n\\n    }\\n\\n    /**\\n     * Get expire time string.\\n     * @Author Felix\\n     * @param token the token\\n     * @return the string\\n     */\\n    public  String getExpireTime(String token){\\n        return DateUtil.formatDateTime(JWT.decode(token).getExpiresAt());\\n    }\\n\\n    private static Map<String, Date> calculateExpiredIssues() {\\n        Map<String, Date> map = new HashMap<>();\\n        Calendar calendar = Calendar.getInstance();\\n        Date now = calendar.getTime();\\n        calendar.add(Calendar.SECOND,TokenService.expireTime);\\n        map.put(\\\"now\\\", now);\\n        map.put(\\\"expiredTime\\\", calendar.getTime());\\n        return map;\\n    }\\n    public static Boolean verify(String token) throws Exception{\\n\\n        JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(\\\"auth0\\\").build();//创建token验证器\\n        DecodedJWT decodedJWT=jwtVerifier.verify(token);\\n        System.out.println(\\\"认证通过：\\\");\\n        System.out.println(\\\"account: \\\" + decodedJWT.getClaim(\\\"account\\\").asString());\\n        System.out.println(\\\"过期时间：      \\\" + decodedJWT.getExpiresAt());\\n        return true;\\n    }\\n    public static String getAccount(String token){\\n        try{\\n            DecodedJWT decodedJWT=JWT.decode(token);\\n            return decodedJWT.getClaim(\\\"account\\\").asString();\\n\\n        }catch (JWTCreationException e){\\n            return null;\\n        }\\n    }\\n    public static Long getCurrentTime(String token){\\n        try{\\n            DecodedJWT decodedJWT=JWT.decode(token);\\n            return decodedJWT.getClaim(\\\"currentTime\\\").asLong();\\n\\n        }catch (JWTCreationException e){\\n            return null;\\n        }\\n    }\\n}\\n```\\n# 将生成token 的工具类 进行“认证与授权”，即需要使用shiro的授权认证功能\\n要写在 Realm中\\n\\t**Realm 充当了 Shiro 与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro 会从应用配置的 Realm 中查找用户及其权限信息**\\n- Realm能做的工作主要有以下几个方面：\\n\\n身份验证（getAuthenticationInfo 方法）验证账户和密码，并返回相关信息\\n\\n权限获取（getAuthorizationInfo 方法） 获取指定身份的权限，并返回相关信息\\n\\n令牌支持（supports方法）判断该令牌（Token）是否被支持\\n\\n令牌有很多种类型，例如：HostAuthenticationToken（主机验证令牌），UsernamePasswordToken（账户密码验证令牌）\\n```Java\\npackage com.example.demo.config;\\n\\nimport com.example.demo.po.JWTToken;\\nimport com.example.demo.service.impl.TokenService;\\nimport org.apache.shiro.authc.AuthenticationException;\\nimport org.apache.shiro.authc.AuthenticationInfo;\\nimport org.apache.shiro.authc.AuthenticationToken;\\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\\nimport org.apache.shiro.authz.AuthorizationInfo;\\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\\nimport org.apache.shiro.realm.AuthorizingRealm;\\nimport org.apache.shiro.subject.PrincipalCollection;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.HashSet;\\nimport java.util.Set;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 20:31\\n * @Version: 1.0\\n */\\n\\n@Component\\npublic class CustomRealm extends AuthorizingRealm {\\n    @Override\\n    public boolean supports(AuthenticationToken token) {\\n        return token instanceof JWTToken;\\n    }\\n    /**\\n     * 用户授权\\n     * @param principalCollection\\n     * @return\\n     */\\n    @Override\\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\\n        System.out.println(\\\"用户授权\\\");\\n        String username= TokenService.getAccount(principalCollection.toString());\\n        SimpleAuthorizationInfo info= new SimpleAuthorizationInfo();\\n        //正确的业务流程是到数据库拿该用户的权限再去进行授权的，这里只是简单的直接授权\\n        if (username.equals(\\\"admin\\\")){\\n            Set<String> role=new HashSet<>();\\n            role.add(\\\"admin\\\");\\n            info.setRoles(role);\\n        }else {\\n            Set<String> role=new HashSet<>();\\n            role.add(\\\"user\\\");\\n            info.setRoles(role);\\n        }\\n        return info;\\n    }\\n\\n    /**\\n     * 用户身份认证\\n     * @param authenticationToken\\n     * @return\\n     * @throws AuthenticationException\\n     */\\n    @Override\\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\\n        System.out.println(\\\"身份认证\\\");\\n        String token= (String) authenticationToken.getCredentials();\\n        String username= TokenService.getAccount(token);\\n        System.out.println(username);\\n        //这里要去数据库查找是否存在该用户，这里直接放行\\n        if (username==null){\\n            throw new AuthenticationException(\\\"认证失败！\\\");\\n        }\\n        return new SimpleAuthenticationInfo(token,token,\\\"MyRealm\\\");\\n    }\\n}\\n\\n```\\n# redis连接\\n```Java\\npackage com.example.demo.config;\\n\\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\\nimport org.springframework.data.redis.core.*;\\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 13:21\\n * @Version: 1.0\\n */\\n\\n@Configuration\\npublic class RedisConfig {\\n    @Bean\\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\\n\\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\\n        // 配置连接工厂\\n        template.setConnectionFactory(factory);\\n\\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\\n        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);\\n\\n        ObjectMapper om = new ObjectMapper();\\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\\n        jacksonSeial.setObjectMapper(om);\\n\\n        // 值采用json序列化\\n        template.setValueSerializer(jacksonSeial);\\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\\n        template.setKeySerializer(new StringRedisSerializer());\\n\\n        // 设置hash key 和value序列化模式\\n        template.setHashKeySerializer(new StringRedisSerializer());\\n        template.setHashValueSerializer(jacksonSeial);\\n        template.afterPropertiesSet();\\n\\n        return template;\\n    }\\n\\n\\n    /**\\n     * 对hash类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForHash();\\n    }\\n\\n    /**\\n     * 对redis字符串类型数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForValue();\\n    }\\n\\n    /**\\n     * 对链表类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForList();\\n    }\\n\\n    /**\\n     * 对无序集合类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForSet();\\n    }\\n\\n    /**\\n     * 对有序集合类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForZSet();\\n    }\\n\\n}\\n\\n```\\n\\n## 编写redis工具类\\n```Java\\npackage com.example.demo.util;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.data.redis.connection.RedisConnection;\\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\\nimport org.springframework.data.redis.core.Cursor;\\nimport org.springframework.data.redis.core.RedisConnectionUtils;\\nimport org.springframework.data.redis.core.RedisTemplate;\\nimport org.springframework.data.redis.core.ScanOptions;\\nimport org.springframework.stereotype.Component;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport javax.annotation.Resource;\\nimport java.util.*;\\nimport java.util.concurrent.TimeUnit;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 13:31\\n * @Version: 1.0\\n */\\n\\n@Component\\npublic class RedisUtil {\\n    @Autowired\\n    private static RedisTemplate redisTemplate;\\n\\n    public RedisUtil(RedisTemplate  redisTemplate) {\\n        this.redisTemplate = redisTemplate;\\n    }\\n\\n\\n    // =============================common============================\\n    /**\\n     * 指定缓存失效时间\\n     * @param key  键\\n     * @param time 时间(秒)\\n     */\\n    public static boolean expire(String key, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 根据key 获取过期时间\\n     * @param key 键 不能为null\\n     * @return 时间(秒) 返回0代表为永久有效\\n     */\\n    public static long getExpire(String key) {\\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\\n    }\\n\\n\\n    /**\\n     * 判断key是否存在\\n     * @param key 键\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean hasKey(String key) {\\n        try {\\n            return redisTemplate.hasKey(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 删除缓存\\n     * @param key 可以传一个值 或多个\\n     */\\n//    @SuppressWarnings(\\\"unchecked\\\")\\n    public static void del(String... key) {\\n        if (key != null && key.length > 0) {\\n            if (key.length == 1) {\\n                redisTemplate.delete(key[0]);\\n            } else {\\n                redisTemplate.delete(Arrays.asList(key));\\n//                redisTemplate.delete(CollectionUtils.arrayToList(key));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * 获取并删除缓存\\n     * @param key 键\\n     * @return 值\\n     */\\n    public static Object getAndDelete(String key) {\\n        try{\\n            return key == null ? null : get(key);\\n        }finally {\\n            del(key);\\n        }\\n    }\\n\\n    // ============================String=============================\\n\\n    /**\\n     * 普通缓存获取\\n     * @param key 键\\n     * @return 值\\n     */\\n    public static Object get(String key) {\\n        return key == null ? null : redisTemplate.opsForValue().get(key);\\n    }\\n\\n    /**\\n     * 普通缓存放入\\n     * @param key   键\\n     * @param value 值\\n     * @return true成功 false失败\\n     */\\n\\n    public static boolean set(String key, Object value) {\\n        try {\\n            redisTemplate.opsForValue().set(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 普通缓存放入并设置时间\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\\n     * @return true成功 false 失败\\n     */\\n\\n    public static boolean set(String key, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 递增\\n     * @param key   键\\n     * @param delta 要增加几(大于0)\\n     */\\n    public static long incr(String key, long delta) {\\n        if (delta < 0) {\\n            throw new RuntimeException(\\\"递增因子必须大于0\\\");\\n        }\\n        return redisTemplate.opsForValue().increment(key, delta);\\n    }\\n\\n\\n    /**\\n     * 递减\\n     * @param key   键\\n     * @param delta 要减少几(小于0)\\n     */\\n    public static long decr(String key, long delta) {\\n        if (delta < 0) {\\n            throw new RuntimeException(\\\"递减因子必须大于0\\\");\\n        }\\n        return redisTemplate.opsForValue().increment(key, -delta);\\n    }\\n\\n\\n    // ================================Map=================================\\n\\n    /**\\n     * HashGet\\n     * @param key  键 不能为null\\n     * @param item 项 不能为null\\n     */\\n    public static Object hget(String key, String item) {\\n        return redisTemplate.opsForHash().get(key, item);\\n    }\\n\\n    /**\\n     * 获取hashKey对应的所有键值\\n     * @param key 键\\n     * @return 对应的多个键值\\n     */\\n    public static Map<Object, Object> hmget(String key) {\\n        return redisTemplate.opsForHash().entries(key);\\n    }\\n\\n    /**\\n     * HashSet\\n     * @param key 键\\n     * @param map 对应多个键值\\n     */\\n    public static boolean hmset(String key, Map<String, Object> map) {\\n        try {\\n            redisTemplate.opsForHash().putAll(key, map);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * HashSet 并设置时间\\n     * @param key  键\\n     * @param map  对应多个键值\\n     * @param time 时间(秒)\\n     * @return true成功 false失败\\n     */\\n    public static boolean hmset(String key, Map<String, Object> map, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForHash().putAll(key, map);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 向一张hash表中放入数据,如果不存在将创建\\n     *\\n     * @param key   键\\n     * @param item  项\\n     * @param value 值\\n     * @return true 成功 false失败\\n     */\\n    public static boolean hset(String key, String item, Object value) {\\n        try {\\n            redisTemplate.opsForHash().put(key, item, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 向一张hash表中放入数据,如果不存在将创建\\n     *\\n     * @param key   键\\n     * @param item  项\\n     * @param value 值\\n     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\\n     * @return true 成功 false失败\\n     */\\n    public static boolean hset(String key, String item, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForHash().put(key, item, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 删除hash表中的值\\n     *\\n     * @param key  键 不能为null\\n     * @param item 项 可以使多个 不能为null\\n     */\\n    public static void hdel(String key, Object... item) {\\n        redisTemplate.opsForHash().delete(key, item);\\n    }\\n\\n\\n    /**\\n     * 判断hash表中是否有该项的值\\n     *\\n     * @param key  键 不能为null\\n     * @param item 项 不能为null\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean hHasKey(String key, String item) {\\n        return redisTemplate.opsForHash().hasKey(key, item);\\n    }\\n\\n\\n    /**\\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\\n     *\\n     * @param key  键\\n     * @param item 项\\n     * @param by   要增加几(大于0)\\n     */\\n    public static double hincr(String key, String item, double by) {\\n        return redisTemplate.opsForHash().increment(key, item, by);\\n    }\\n\\n\\n    /**\\n     * hash递减\\n     *\\n     * @param key  键\\n     * @param item 项\\n     * @param by   要减少记(小于0)\\n     */\\n    public static double hdecr(String key, String item, double by) {\\n        return redisTemplate.opsForHash().increment(key, item, -by);\\n    }\\n\\n\\n    // ============================set=============================\\n\\n    /**\\n     * 根据key获取Set中的所有值\\n     * @param key 键\\n     */\\n    public static Set<Object> sGet(String key) {\\n        try {\\n            return redisTemplate.opsForSet().members(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 根据value从一个set中查询,是否存在\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean sHasKey(String key, Object value) {\\n        try {\\n            return redisTemplate.opsForSet().isMember(key, value);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将数据放入set缓存\\n     *\\n     * @param key    键\\n     * @param values 值 可以是多个\\n     * @return 成功个数\\n     */\\n    public static long sSet(String key, Object... values) {\\n        try {\\n            return redisTemplate.opsForSet().add(key, values);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将set数据放入缓存\\n     *\\n     * @param key    键\\n     * @param time   时间(秒)\\n     * @param values 值 可以是多个\\n     * @return 成功个数\\n     */\\n    public static long sSetAndTime(String key, long time, Object... values) {\\n        try {\\n            Long count = (long)values.length;\\n            if (time > 0) {\\n                count = redisTemplate.opsForSet().add(key, values);\\n                expire(key, time);\\n            }\\n            return count;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 获取set缓存的长度\\n     *\\n     * @param key 键\\n     */\\n    public static long sGetSetSize(String key) {\\n        try {\\n            return redisTemplate.opsForSet().size(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 移除值为value的\\n     *\\n     * @param key    键\\n     * @param values 值 可以是多个\\n     * @return 移除的个数\\n     */\\n\\n    public static long setRemove(String key, Object... values) {\\n        try {\\n            return redisTemplate.opsForSet().remove(key, values);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n    // ===============================list=================================\\n\\n    /**\\n     * 获取list缓存的内容\\n     *\\n     * @param key   键\\n     * @param start 开始\\n     * @param end   结束 0 到 -1代表所有值\\n     */\\n    public static List<Object> lGet(String key, long start, long end) {\\n        try {\\n            return redisTemplate.opsForList().range(key, start, end);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 获取list缓存的长度\\n     *\\n     * @param key 键\\n     */\\n    public static long lGetListSize(String key) {\\n        try {\\n            return redisTemplate.opsForList().size(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 通过索引 获取list中的值\\n     *\\n     * @param key   键\\n     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推\\n     */\\n    public static Object lGetIndex(String key, long index) {\\n        try {\\n            return redisTemplate.opsForList().index(key, index);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     */\\n    public static boolean lSet(String key, Object value) {\\n        try {\\n            redisTemplate.opsForList().rightPush(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒)\\n     */\\n    public static boolean lSet(String key, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForList().rightPush(key, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @return true 存放成功 false存放失败\\n     */\\n    public static boolean lSet(String key, List<Object> value) {\\n        try {\\n            redisTemplate.opsForList().rightPushAll(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒)\\n     * @return true 存放成功 false存放失败\\n     */\\n    public static boolean lSet(String key, List<Object> value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForList().rightPushAll(key, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 根据索引修改list中的某条数据\\n     *\\n     * @param key   键\\n     * @param index 索引\\n     * @param value 值\\n     * @return true 存放成功 false存放失败\\n     */\\n\\n    public static boolean lUpdateIndex(String key, long index, Object value) {\\n        try {\\n            redisTemplate.opsForList().set(key, index, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 移除N个值为value\\n     *\\n     * @param key   键\\n     * @param count 移除多少个\\n     * @param value 值\\n     * @return 移除的个数\\n     */\\n\\n    public static long lRemove(String key, long count, Object value) {\\n        try {\\n            return redisTemplate.opsForList().remove(key, count, value);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n}\\n\\n```\\n\\n## 编写 Jwt 拦截器\\n```Java\\npackage com.example.demo.filter;\\n\\nimport com.auth0.jwt.exceptions.TokenExpiredException;\\nimport com.example.demo.po.JWTToken;\\nimport com.example.demo.po.Result;\\nimport com.example.demo.service.impl.TokenService;\\nimport com.example.demo.util.RedisUtil;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.shiro.authc.AuthenticationToken;\\nimport org.apache.shiro.subject.Subject;\\nimport org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.RequestMethod;\\n\\nimport javax.servlet.ServletRequest;\\nimport javax.servlet.ServletResponse;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\n/**\\n * @Author Felix\\n * The type Jwt interceptor.\\n */\\n@Slf4j\\npublic class JwtInterceptor extends BasicHttpAuthenticationFilter {\\n\\n    /**\\n     * 判断是否允许通过\\n     * @param request\\n     * @param response\\n     * @param mappedValue\\n     * @return\\n     */\\n    @Override\\n    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {\\n        System.out.println(\\\"isAccessAllowed方法\\\");\\n        try{\\n            return executeLogin(request,response);\\n        }catch (Exception e){\\n            System.out.println(\\\"错误\\\"+e);\\n//            throw new ShiroException(e.getMessage());\\n            responseError(response,\\\"shiro fail\\\");\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 是否进行登录请求\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    @Override\\n    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) {\\n        System.out.println(\\\"isLoginAttempt方法\\\");\\n        String token=((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        if (token!=null){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 创建shiro token\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    @Override\\n    protected AuthenticationToken createToken(ServletRequest request, ServletResponse response) {\\n        System.out.println(\\\"createToken方法\\\");\\n        String jwtToken = ((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        if(jwtToken!=null) {\\n            return new JWTToken(jwtToken);\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * isAccessAllowed为false时调用，验证失败\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {\\n        System.out.println(\\\"onAccessDenied\\\");\\n        this.sendChallenge(request,response);\\n        responseError(response,\\\"token verify fail\\\");\\n        return false;\\n    }\\n\\n\\n\\n    /**\\n     * shiro验证成功调用\\n     * @param token\\n     * @param subject\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception {\\n        System.out.println(\\\"onLoginSuccess：\\\");\\n        String jwttoken= (String) token.getPrincipal();\\n        if (jwttoken!=null){\\n            try{\\n                if(TokenService.verify(jwttoken)){\\n                    //判断Redis是否存在所对应的RefreshToken\\n                    String account = TokenService.getAccount(jwttoken);\\n                    Long currentTime=TokenService.getCurrentTime(jwttoken);\\n                    if (RedisUtil.hasKey(account)) {\\n                        Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\\n                        if (currentTimeMillisRedis.equals(currentTime)) {\\n                            return true;\\n                        }\\n                    }\\n                }\\n                return false;\\n            }catch (Exception e){\\n                Throwable throwable = e.getCause();\\n                System.out.println(\\\"token验证：\\\"+e.getClass());\\n                if (e instanceof TokenExpiredException){\\n                    System.out.println(\\\"TokenExpiredException\\\");\\n                    if (refreshToken(request, response)) {\\n                        return true;\\n                    }else {\\n                        return false;\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n\\n    /**\\n     * 拦截器的前置方法，此处进行跨域处理\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception {\\n        HttpServletRequest httpServletRequest= (HttpServletRequest) request;\\n        HttpServletResponse httpServletResponse= (HttpServletResponse) response;\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Origin\\\",httpServletRequest.getHeader(\\\"Origin\\\"));\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Methods\\\",\\\"GET,POST,OPTIONS,PUT,DELETE\\\");\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Headers\\\",httpServletRequest.getHeader(\\\"Access-Control-Resquest-Headers\\\"));\\n        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())){\\n            httpServletResponse.setStatus(HttpStatus.OK.value());\\n        }\\n\\n        //如果不带token，不去验证shiro\\n        if (!isLoginAttempt(request,response)){\\n            responseError(httpServletResponse,\\\"no token\\\");\\n            return false;\\n        }\\n        return super.preHandle(request,response);\\n\\n    }\\n\\n\\n    /**\\n     * 刷新AccessToken，进行判断RefreshToken是否过期，未过期就返回新的AccessToken且继续正常访问\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    private boolean refreshToken(ServletRequest request, ServletResponse response) {\\n        String token = ((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        String account = TokenService.getAccount(token);\\n        Long currentTime=TokenService.getCurrentTime(token);\\n        // 判断Redis中RefreshToken是否存在\\n        if (RedisUtil.hasKey(account)) {\\n            // Redis中RefreshToken还存在，获取RefreshToken的时间戳\\n            Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\\n            // 获取当前AccessToken中的时间戳，与RefreshToken的时间戳对比，如果当前时间戳一致，进行AccessToken刷新\\n            if (currentTimeMillisRedis.equals(currentTime)) {\\n                // 获取当前最新时间戳\\n                Long currentTimeMillis =System.currentTimeMillis();\\n                RedisUtil.set(account, currentTimeMillis,\\n                        TokenService.REFRESH_EXPIRE_TIME);\\n                // 刷新AccessToken，设置时间戳为当前最新时间戳\\n                token = TokenService.getToken(account, currentTimeMillis);\\n                HttpServletResponse httpServletResponse = (HttpServletResponse) response;\\n                httpServletResponse.setHeader(\\\"Authorization\\\", token);\\n                httpServletResponse.setHeader(\\\"Access-Control-Expose-Headers\\\", \\\"Authorization\\\");\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    private void responseError(ServletResponse response,String msg){\\n\\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\\n        httpResponse.setStatus(401);\\n        httpResponse.setCharacterEncoding(\\\"UTF-8\\\");\\n        httpResponse.setContentType(\\\"application/json;charset=UTF-8\\\");\\n        try {\\n            String rj = new ObjectMapper().writeValueAsString(new Result(401,msg));\\n            httpResponse.getWriter().append(rj);\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n}\\n```\\n# 使用shiro框架，将Jwt 拦截注册并使用\\n- ShiroFilterFactoryBean 用于放行接口，拦截接口，将jwt工具类注册在这里\\n- SecurityManager  注册 Realm 使其在shiro框架中\\n- AuthorizationAttributeSourceAdvisor 授权属性源配置\\n- LifecycleBeanPostProcessor 管理Shiro中一些bean的生命周期\\n```Java\\npackage com.example.demo.filter;\\n\\nimport com.example.demo.config.CustomRealm;\\nimport org.apache.shiro.mgt.DefaultSessionStorageEvaluator;\\nimport org.apache.shiro.mgt.DefaultSubjectDAO;\\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.apache.shiro.mgt.SecurityManager;\\n\\nimport javax.servlet.Filter;\\nimport java.util.LinkedHashMap;\\nimport java.util.Map;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 20:27\\n * @Version: 1.0\\n */\\n@Configuration\\npublic class MyShiroConfig {\\n    @Bean\\n    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager){\\n        ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();\\n        Map<String, Filter> filterMap=new LinkedHashMap<>();\\n        filterMap.put(\\\"jwt\\\", new JwtInterceptor());  // 将Jwt 拦截器注册\\n        shiroFilterFactoryBean.setFilters(filterMap);\\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\\n        //不要用HashMap来创建Map，会有某些配置失效，要用链表的LinkedHashmap\\n        Map<String,String> filterRuleMap=new LinkedHashMap<>();\\n        //放行接口\\n        filterRuleMap.put(\\\"/\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/webjars/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/user/login/status\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/css/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/images/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/js/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/lib/**\\\",\\\"anon\\\");\\n        //拦截所有接口\\n        filterRuleMap.put(\\\"/**\\\",\\\"jwt\\\");\\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterRuleMap);\\n        return shiroFilterFactoryBean;\\n\\n    }\\n\\n\\n    @Bean\\n    public SecurityManager securityManager(CustomRealm customRealm){\\n        //设置自定义Realm\\n        DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();\\n        securityManager.setRealm(customRealm);\\n        //关闭shiro自带的session\\n        DefaultSubjectDAO subjectDAO=new DefaultSubjectDAO();\\n        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator=new DefaultSessionStorageEvaluator();\\n        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);\\n        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);\\n        securityManager.setSubjectDAO(subjectDAO);\\n        return securityManager;\\n    }\\n\\n    /**\\n     * 配置代理会导致doGetAuthorizationInfo执行两次\\n     */\\n//    @Bean\\n//    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator(){\\n//        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=new DefaultAdvisorAutoProxyCreator();\\n//        //强制使用从cglib动态代理机制，防止重复代理可能引起代理出错问题\\n//        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\\n//        return defaultAdvisorAutoProxyCreator;\\n//    }\\n\\n    /**\\n     * 授权属性源配置\\n     * @param securityManager\\n     * @return\\n     */\\n    @Bean\\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=new AuthorizationAttributeSourceAdvisor();\\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\\n\\n        return authorizationAttributeSourceAdvisor;\\n\\n    }\\n\\n    @Bean\\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor(){\\n        return new LifecycleBeanPostProcessor();\\n    }\\n}\\n\\n```\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/04608c2976b3a09b09b9b077c72232d7.jpg\",\"articleTitle\":\"springBoot 开发基本思路\",\"categoryName\":\"Java\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 10:22:17', NULL);
INSERT INTO `tb_operation_log` VALUES (1117, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 推荐核心算法\\n```Java\\npackage com.example.demo.recommend.core;\\n\\nimport com.example.demo.recommend.dto.RelateDTO;\\nimport com.google.common.collect.Lists;\\n\\n\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.IntStream;\\n\\n/**\\n * @author Felix\\n * @Description:核心算法\\n * @Package com.supermarket.product.core\\n * @date 2021/4/22 16:12\\n */\\npublic class CoreMath {\\n    /**\\n     * 推荐\\n     * @param userId 用户id\\n     * @param list 推荐的idList集合\\n     * @return\\n     */\\n    public List<Integer> recommend(Integer userId, List<RelateDTO> list) {\\n        //找到最近邻用户id\\n        Map<Double, Integer> distances = computeNearestNeighbor(userId, list);\\n        //取出相似度最近的用户id\\n        Integer nearest = distances.values().iterator().next();\\n        Iterator<Integer> iterator = distances.values().iterator();\\n        while(iterator.hasNext()){\\n            nearest = iterator.next();\\n        }\\n        Map<Integer, List<RelateDTO>> userMap =list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\\n\\n        //最近邻用户买过的商品id列表\\n        List<Integer> neighborItemList = userMap.get(nearest).stream().map(e->e.getProductId()).collect(Collectors.toList());\\n        //指定用户买过的商品id列表\\n        List<Integer> userItemList  = userMap.get(userId).stream().map(e->e.getProductId()).collect(Collectors.toList());\\n\\n        //找到最近邻买过，但是该用户没买过的商品id，计算推荐，放入推荐列表\\n        List<Integer> recommendList = new ArrayList<>();\\n        for (Integer item : neighborItemList) {\\n            if (!userItemList.contains(item)) {\\n                recommendList.add(item);\\n            }\\n        }\\n        Collections.sort(recommendList);\\n        return recommendList;\\n    }\\n\\n    /**\\n     * 在给定userId的情况下，计算其他用户和它的相关系数并排序\\n     * @param userId\\n     * @param list\\n     * @return\\n     */\\n    private Map<Double, Integer> computeNearestNeighbor(Integer userId, List<RelateDTO> list) {\\n        Map<Integer, List<RelateDTO>> userMap = list.stream().collect(Collectors.groupingBy(RelateDTO::getUserId));\\n        //treemap是从小到大排好序的\\n        Map<Double, Integer> distances = new TreeMap<>();\\n        userMap.forEach((k,v)->{\\n            if(k.intValue() != userId.intValue()){\\n                double distance = pearson_dis(v,userMap.get(userId));\\n                distances.put(distance, k);\\n            }\\n        });\\n        return distances;\\n    }\\n\\n    /**\\n     * 计算两个序列间的相关系数\\n     *\\n     * @param xList 其他用户的数据集\\n     * @param yList 当前用户的数据集\\n     * @return\\n     */\\n    private double pearson_dis(List<RelateDTO> xList, List<RelateDTO> yList) {\\n        List<Integer> xs= Lists.newArrayList();\\n        List<Integer> ys= Lists.newArrayList();\\n        xList.forEach(x->{\\n            yList.forEach(y->{\\n                if(x.getProductId().intValue() == y.getProductId().intValue()){\\n                    xs.add(x.getIndex());\\n                    ys.add(y.getIndex());\\n                }\\n            });\\n        });\\n        return getRelate(xs,ys);\\n    }\\n\\n    /**\\n     * 方法描述: 皮尔森（pearson）相关系数计算\\n     * (x1,y1) 理解为 a 用户对 x 商品的点击次数和对 y 商品的点击次数\\n     * @param xs\\n     * @param ys\\n     * @Return {@link Double}\\n     * @throws\\n     * @author tarzan\\n     * @date 2020年07月31日 17:03:20\\n     */\\n    public static Double getRelate(List<Integer> xs, List<Integer> ys){\\n        int n=xs.size();\\n        double Ex= xs.stream().mapToDouble(x->x).sum();\\n        double Ey=ys.stream().mapToDouble(y->y).sum();\\n        double Ex2=xs.stream().mapToDouble(x-> Math.pow(x,2)).sum();\\n        double Ey2=ys.stream().mapToDouble(y-> Math.pow(y,2)).sum();\\n        double Exy= IntStream.range(0,n).mapToDouble(i->xs.get(i)*ys.get(i)).sum();\\n        double numerator=Exy-Ex*Ey/n;\\n        double denominator= Math.sqrt((Ex2- Math.pow(Ex,2)/n)*(Ey2- Math.pow(Ey,2)/n));\\n        if (denominator==0) {\\n            return 0.0;\\n        }\\n        return numerator/denominator;\\n    }\\n\\n}\\n```\\n\\n\\n## 创建Impl层写业务，比如想在一个模块中引用用户行为进行推荐。\\n这里做个例子，比如要做音乐系统，想通过用户的**收藏**这个**行为**进行推荐相似的音乐则在这个业务层里写业务。\\n1. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a2c8582123afde21ad6979ab03f818f4.png)\\n2. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/b921d978559c00165b650f57da87220d.png)\\n3. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d8f2b06c718ff93a62a82117873246bc.png)\\n4. ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/92e3ba5506847804acd85f2d2d217997.png)\\n5. 获取收藏的歌\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e0f6721dc0b6f0cb3ee432708d6e321e.png)\\n6. 获取歌曲\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d0ff9af0868a5fe0b2193829fed9bfa6.png)\\n7. 推荐歌曲\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/eaff1e5550a796c1e21b0832ef71e990.png)\\n8. 通过收藏行为推荐歌单列表\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e95f3e165ece0a067131e72b78b7035b.png)、\\n## 在controller层中调用\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8da1128aa927ea6782573acd4a2d74c0.png)\\n ## 效果 ----------------->\\n前端是拿别人的，所以我们只看效果\\n1. 用户1\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/1284190681838bfb368455f52f2e9990.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/d9cab0b1d6b72a2b7d6d4f3486a06f44.png)\\n2. 用户2\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ccac757dc4c1e31b69b42f5d5192a724.png)\\n![image.png](1)\\n## 项目链接\\n[gitee地址](https://gitee.com/yuxuan-yuxuan/collaborative-filtering-example)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/db9d713ef259621c67aeab6fbd8ebba6.jpg\",\"articleTitle\":\"springBoot的协同过滤算法\",\"categoryName\":\"Java\",\"id\":65,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 10:23:31', NULL);
INSERT INTO `tb_operation_log` VALUES (1118, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这里讲的是有关springBoot 安全开发的步骤以及思路！！！\\n# Jwt Token的编写思路\\n- 第一步：导包\\n```xml\\n        <dependency>\\n            <groupId>com.auth0</groupId>\\n            <artifactId>java-jwt</artifactId>\\n            <version>3.9.0</version>\\n        </dependency>\\n        <!-- https://mvnrepository.com/artifact/org.json/json -->\\n        <dependency>\\n            <groupId>org.json</groupId>\\n            <artifactId>json</artifactId>\\n            <version>20190722</version>\\n        </dependency>\\n<!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring -->\\n        <dependency>\\n            <groupId>org.apache.shiro</groupId>\\n            <artifactId>shiro-spring</artifactId>\\n            <version>1.4.0</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.springframework.boot</groupId>\\n            <artifactId>spring-boot-starter-data-redis</artifactId>\\n        </dependency>\\n\\n\\n        <dependency>\\n            <groupId>cn.hutool</groupId>\\n            <artifactId>hutool-all</artifactId>\\n            <version>5.5.7</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.apache.shiro</groupId>\\n            <artifactId>shiro-spring</artifactId>\\n            <version>1.4.0</version>\\n        </dependency>\\n        <!-- Token生成与解析-->\\n        <dependency>\\n            <groupId>io.jsonwebtoken</groupId>\\n            <artifactId>jjwt</artifactId>\\n            <version>0.9.1</version>\\n        </dependency>\\n```\\n- 第二步 token工具(生成、校验)\\n- - 其中令牌有效期可以在 application.yml文件配置\\n```yml\\nmybatis:\\n  mapperLocations: classpath:mapper/*.xml\\n  typeAliasesPackage: com.example.demo.domain\\n\\nserver:\\n  port: 8888\\nspring:\\n  datasource:\\n    driver-class-name: com.mysql.cj.jdbc.Driver\\n    password: 123456\\n    url: jdbc:mysql://localhost:3306/music_data?serverTimezone=Asia/Shanghai\\n    username: root\\n  devtools:\\n    restart:\\n      additional-paths: src/main/java\\n      enabled: true\\n      exclude: WEB-INF/**\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n  server:\\n    MaxFileSize: 50MB\\n    MaxRequestSize: 50MB\\n  redis:\\n    host: localhost\\n    port: 6379\\n    jedis:\\n      pool:\\n        max-active: -1\\n        max-wait: 3000ms\\n    timeout: 3000ms\\n\\nswagger:\\n  # 是否开启swagger\\n  enabled: true\\ntoken:  # 与spring同级\\n  # 令牌自定义标识\\n  header: Authorization\\n  # 令牌密钥\\n  secret: abcdefghijklmnopqrstuvwxyz\\n  # 令牌有效期（默认5分钟）\\n  expireTime: 300000\\n```\\n\\n```Java\\npackage com.example.demo.service.impl;\\n\\nimport cn.hutool.core.date.DateUtil;\\nimport com.auth0.jwt.JWT;\\nimport com.auth0.jwt.JWTVerifier;\\nimport com.auth0.jwt.algorithms.Algorithm;\\nimport com.auth0.jwt.exceptions.JWTCreationException;\\n\\nimport com.auth0.jwt.interfaces.DecodedJWT;\\n\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\n\\n\\nimport java.util.Calendar;\\nimport java.util.Date;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\n/**\\n * @Author Felix\\n * The type Token service.\\n */\\n@Service\\npublic class TokenService {\\n\\n    // 令牌有效期（默认5分钟）\\n    private static Integer expireTime;\\n    public static final long REFRESH_EXPIRE_TIME=30*60;//RefreshToken到期时间为30分钟，秒为单位\\n    private static final String TOKEN_SECRET=\\\"ljdyaishijin**3nkjnj??\\\";  //密钥盐\\n    /**\\n     * Sets expired time in.\\n     * @Author Felix\\n     * @param expiredTimeIn the expired time in\\n     */\\n    @Value(\\\"${token.expireTime}\\\")\\n    public void setExpiredTimeIn(Integer expiredTimeIn) {\\n        TokenService.expireTime = expiredTimeIn;\\n    }\\n\\n\\n    /**\\n     * Gets token.\\n     * @Author Felix\\n     *\\n     * @return the token\\n     */\\n    public static String getToken(String account, Long currentTime) {\\n        Map<String, Date> map = TokenService.calculateExpiredIssues();\\n        String token = \\\"\\\";\\n        Date expireAt = new Date(currentTime + TokenService.expireTime);\\n        try {\\n            token = JWT.create()\\n                    //.withAudience(user.getUsername()) // 将 user id 保存到 token 里面\\n                    .withIssuer(\\\"Felix\\\")\\n                    .withClaim(\\\"account\\\", account)\\n                    .withClaim(\\\"currentTime\\\", currentTime)\\n                  // .withExpiresAt(map.get(\\\"expiredTime\\\")) //五分钟后token过期\\n                    .withExpiresAt(expireAt)\\n                    .sign(Algorithm.HMAC256(TokenService.TOKEN_SECRET)); // 以 password 作为 token 的密钥\\n        } catch (IllegalArgumentException | JWTCreationException e) {\\n\\n        }\\n\\n        return token;\\n\\n    }\\n\\n    /**\\n     * Get expire time string.\\n     * @Author Felix\\n     * @param token the token\\n     * @return the string\\n     */\\n    public  String getExpireTime(String token){\\n        return DateUtil.formatDateTime(JWT.decode(token).getExpiresAt());\\n    }\\n\\n    private static Map<String, Date> calculateExpiredIssues() {\\n        Map<String, Date> map = new HashMap<>();\\n        Calendar calendar = Calendar.getInstance();\\n        Date now = calendar.getTime();\\n        calendar.add(Calendar.SECOND,TokenService.expireTime);\\n        map.put(\\\"now\\\", now);\\n        map.put(\\\"expiredTime\\\", calendar.getTime());\\n        return map;\\n    }\\n    public static Boolean verify(String token) throws Exception{\\n\\n        JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(\\\"auth0\\\").build();//创建token验证器\\n        DecodedJWT decodedJWT=jwtVerifier.verify(token);\\n        System.out.println(\\\"认证通过：\\\");\\n        System.out.println(\\\"account: \\\" + decodedJWT.getClaim(\\\"account\\\").asString());\\n        System.out.println(\\\"过期时间：      \\\" + decodedJWT.getExpiresAt());\\n        return true;\\n    }\\n    public static String getAccount(String token){\\n        try{\\n            DecodedJWT decodedJWT=JWT.decode(token);\\n            return decodedJWT.getClaim(\\\"account\\\").asString();\\n\\n        }catch (JWTCreationException e){\\n            return null;\\n        }\\n    }\\n    public static Long getCurrentTime(String token){\\n        try{\\n            DecodedJWT decodedJWT=JWT.decode(token);\\n            return decodedJWT.getClaim(\\\"currentTime\\\").asLong();\\n\\n        }catch (JWTCreationException e){\\n            return null;\\n        }\\n    }\\n}\\n```\\n# 将生成token 的工具类 进行“认证与授权”，即需要使用shiro的授权认证功能\\n要写在 Realm中\\n\\t**Realm 充当了 Shiro 与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro 会从应用配置的 Realm 中查找用户及其权限信息**\\n- Realm能做的工作主要有以下几个方面：\\n\\n身份验证（getAuthenticationInfo 方法）验证账户和密码，并返回相关信息\\n\\n权限获取（getAuthorizationInfo 方法） 获取指定身份的权限，并返回相关信息\\n\\n令牌支持（supports方法）判断该令牌（Token）是否被支持\\n\\n令牌有很多种类型，例如：HostAuthenticationToken（主机验证令牌），UsernamePasswordToken（账户密码验证令牌）\\n```Java\\npackage com.example.demo.config;\\n\\nimport com.example.demo.po.JWTToken;\\nimport com.example.demo.service.impl.TokenService;\\nimport org.apache.shiro.authc.AuthenticationException;\\nimport org.apache.shiro.authc.AuthenticationInfo;\\nimport org.apache.shiro.authc.AuthenticationToken;\\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\\nimport org.apache.shiro.authz.AuthorizationInfo;\\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\\nimport org.apache.shiro.realm.AuthorizingRealm;\\nimport org.apache.shiro.subject.PrincipalCollection;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.HashSet;\\nimport java.util.Set;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 20:31\\n * @Version: 1.0\\n */\\n\\n@Component\\npublic class CustomRealm extends AuthorizingRealm {\\n    @Override\\n    public boolean supports(AuthenticationToken token) {\\n        return token instanceof JWTToken;\\n    }\\n    /**\\n     * 用户授权\\n     * @param principalCollection\\n     * @return\\n     */\\n    @Override\\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\\n        System.out.println(\\\"用户授权\\\");\\n        String username= TokenService.getAccount(principalCollection.toString());\\n        SimpleAuthorizationInfo info= new SimpleAuthorizationInfo();\\n        //正确的业务流程是到数据库拿该用户的权限再去进行授权的，这里只是简单的直接授权\\n        if (username.equals(\\\"admin\\\")){\\n            Set<String> role=new HashSet<>();\\n            role.add(\\\"admin\\\");\\n            info.setRoles(role);\\n        }else {\\n            Set<String> role=new HashSet<>();\\n            role.add(\\\"user\\\");\\n            info.setRoles(role);\\n        }\\n        return info;\\n    }\\n\\n    /**\\n     * 用户身份认证\\n     * @param authenticationToken\\n     * @return\\n     * @throws AuthenticationException\\n     */\\n    @Override\\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\\n        System.out.println(\\\"身份认证\\\");\\n        String token= (String) authenticationToken.getCredentials();\\n        String username= TokenService.getAccount(token);\\n        System.out.println(username);\\n        //这里要去数据库查找是否存在该用户，这里直接放行\\n        if (username==null){\\n            throw new AuthenticationException(\\\"认证失败！\\\");\\n        }\\n        return new SimpleAuthenticationInfo(token,token,\\\"MyRealm\\\");\\n    }\\n}\\n\\n```\\n# redis连接\\n```Java\\npackage com.example.demo.config;\\n\\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\\nimport org.springframework.data.redis.core.*;\\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 13:21\\n * @Version: 1.0\\n */\\n\\n@Configuration\\npublic class RedisConfig {\\n    @Bean\\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\\n\\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\\n        // 配置连接工厂\\n        template.setConnectionFactory(factory);\\n\\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\\n        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);\\n\\n        ObjectMapper om = new ObjectMapper();\\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\\n        jacksonSeial.setObjectMapper(om);\\n\\n        // 值采用json序列化\\n        template.setValueSerializer(jacksonSeial);\\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\\n        template.setKeySerializer(new StringRedisSerializer());\\n\\n        // 设置hash key 和value序列化模式\\n        template.setHashKeySerializer(new StringRedisSerializer());\\n        template.setHashValueSerializer(jacksonSeial);\\n        template.afterPropertiesSet();\\n\\n        return template;\\n    }\\n\\n\\n    /**\\n     * 对hash类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForHash();\\n    }\\n\\n    /**\\n     * 对redis字符串类型数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForValue();\\n    }\\n\\n    /**\\n     * 对链表类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForList();\\n    }\\n\\n    /**\\n     * 对无序集合类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForSet();\\n    }\\n\\n    /**\\n     * 对有序集合类型的数据操作\\n     *\\n     * @param redisTemplate\\n     * @return\\n     */\\n    @Bean\\n    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {\\n        return redisTemplate.opsForZSet();\\n    }\\n\\n}\\n\\n```\\n\\n## 编写redis工具类\\n```Java\\npackage com.example.demo.util;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.data.redis.connection.RedisConnection;\\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\\nimport org.springframework.data.redis.core.Cursor;\\nimport org.springframework.data.redis.core.RedisConnectionUtils;\\nimport org.springframework.data.redis.core.RedisTemplate;\\nimport org.springframework.data.redis.core.ScanOptions;\\nimport org.springframework.stereotype.Component;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport javax.annotation.Resource;\\nimport java.util.*;\\nimport java.util.concurrent.TimeUnit;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 13:31\\n * @Version: 1.0\\n */\\n\\n@Component\\npublic class RedisUtil {\\n    @Autowired\\n    private static RedisTemplate redisTemplate;\\n\\n    public RedisUtil(RedisTemplate  redisTemplate) {\\n        this.redisTemplate = redisTemplate;\\n    }\\n\\n\\n    // =============================common============================\\n    /**\\n     * 指定缓存失效时间\\n     * @param key  键\\n     * @param time 时间(秒)\\n     */\\n    public static boolean expire(String key, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 根据key 获取过期时间\\n     * @param key 键 不能为null\\n     * @return 时间(秒) 返回0代表为永久有效\\n     */\\n    public static long getExpire(String key) {\\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\\n    }\\n\\n\\n    /**\\n     * 判断key是否存在\\n     * @param key 键\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean hasKey(String key) {\\n        try {\\n            return redisTemplate.hasKey(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 删除缓存\\n     * @param key 可以传一个值 或多个\\n     */\\n//    @SuppressWarnings(\\\"unchecked\\\")\\n    public static void del(String... key) {\\n        if (key != null && key.length > 0) {\\n            if (key.length == 1) {\\n                redisTemplate.delete(key[0]);\\n            } else {\\n                redisTemplate.delete(Arrays.asList(key));\\n//                redisTemplate.delete(CollectionUtils.arrayToList(key));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * 获取并删除缓存\\n     * @param key 键\\n     * @return 值\\n     */\\n    public static Object getAndDelete(String key) {\\n        try{\\n            return key == null ? null : get(key);\\n        }finally {\\n            del(key);\\n        }\\n    }\\n\\n    // ============================String=============================\\n\\n    /**\\n     * 普通缓存获取\\n     * @param key 键\\n     * @return 值\\n     */\\n    public static Object get(String key) {\\n        return key == null ? null : redisTemplate.opsForValue().get(key);\\n    }\\n\\n    /**\\n     * 普通缓存放入\\n     * @param key   键\\n     * @param value 值\\n     * @return true成功 false失败\\n     */\\n\\n    public static boolean set(String key, Object value) {\\n        try {\\n            redisTemplate.opsForValue().set(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 普通缓存放入并设置时间\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\\n     * @return true成功 false 失败\\n     */\\n\\n    public static boolean set(String key, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 递增\\n     * @param key   键\\n     * @param delta 要增加几(大于0)\\n     */\\n    public static long incr(String key, long delta) {\\n        if (delta < 0) {\\n            throw new RuntimeException(\\\"递增因子必须大于0\\\");\\n        }\\n        return redisTemplate.opsForValue().increment(key, delta);\\n    }\\n\\n\\n    /**\\n     * 递减\\n     * @param key   键\\n     * @param delta 要减少几(小于0)\\n     */\\n    public static long decr(String key, long delta) {\\n        if (delta < 0) {\\n            throw new RuntimeException(\\\"递减因子必须大于0\\\");\\n        }\\n        return redisTemplate.opsForValue().increment(key, -delta);\\n    }\\n\\n\\n    // ================================Map=================================\\n\\n    /**\\n     * HashGet\\n     * @param key  键 不能为null\\n     * @param item 项 不能为null\\n     */\\n    public static Object hget(String key, String item) {\\n        return redisTemplate.opsForHash().get(key, item);\\n    }\\n\\n    /**\\n     * 获取hashKey对应的所有键值\\n     * @param key 键\\n     * @return 对应的多个键值\\n     */\\n    public static Map<Object, Object> hmget(String key) {\\n        return redisTemplate.opsForHash().entries(key);\\n    }\\n\\n    /**\\n     * HashSet\\n     * @param key 键\\n     * @param map 对应多个键值\\n     */\\n    public static boolean hmset(String key, Map<String, Object> map) {\\n        try {\\n            redisTemplate.opsForHash().putAll(key, map);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * HashSet 并设置时间\\n     * @param key  键\\n     * @param map  对应多个键值\\n     * @param time 时间(秒)\\n     * @return true成功 false失败\\n     */\\n    public static boolean hmset(String key, Map<String, Object> map, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForHash().putAll(key, map);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 向一张hash表中放入数据,如果不存在将创建\\n     *\\n     * @param key   键\\n     * @param item  项\\n     * @param value 值\\n     * @return true 成功 false失败\\n     */\\n    public static boolean hset(String key, String item, Object value) {\\n        try {\\n            redisTemplate.opsForHash().put(key, item, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 向一张hash表中放入数据,如果不存在将创建\\n     *\\n     * @param key   键\\n     * @param item  项\\n     * @param value 值\\n     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\\n     * @return true 成功 false失败\\n     */\\n    public static boolean hset(String key, String item, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForHash().put(key, item, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 删除hash表中的值\\n     *\\n     * @param key  键 不能为null\\n     * @param item 项 可以使多个 不能为null\\n     */\\n    public static void hdel(String key, Object... item) {\\n        redisTemplate.opsForHash().delete(key, item);\\n    }\\n\\n\\n    /**\\n     * 判断hash表中是否有该项的值\\n     *\\n     * @param key  键 不能为null\\n     * @param item 项 不能为null\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean hHasKey(String key, String item) {\\n        return redisTemplate.opsForHash().hasKey(key, item);\\n    }\\n\\n\\n    /**\\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\\n     *\\n     * @param key  键\\n     * @param item 项\\n     * @param by   要增加几(大于0)\\n     */\\n    public static double hincr(String key, String item, double by) {\\n        return redisTemplate.opsForHash().increment(key, item, by);\\n    }\\n\\n\\n    /**\\n     * hash递减\\n     *\\n     * @param key  键\\n     * @param item 项\\n     * @param by   要减少记(小于0)\\n     */\\n    public static double hdecr(String key, String item, double by) {\\n        return redisTemplate.opsForHash().increment(key, item, -by);\\n    }\\n\\n\\n    // ============================set=============================\\n\\n    /**\\n     * 根据key获取Set中的所有值\\n     * @param key 键\\n     */\\n    public static Set<Object> sGet(String key) {\\n        try {\\n            return redisTemplate.opsForSet().members(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 根据value从一个set中查询,是否存在\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @return true 存在 false不存在\\n     */\\n    public static boolean sHasKey(String key, Object value) {\\n        try {\\n            return redisTemplate.opsForSet().isMember(key, value);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将数据放入set缓存\\n     *\\n     * @param key    键\\n     * @param values 值 可以是多个\\n     * @return 成功个数\\n     */\\n    public static long sSet(String key, Object... values) {\\n        try {\\n            return redisTemplate.opsForSet().add(key, values);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将set数据放入缓存\\n     *\\n     * @param key    键\\n     * @param time   时间(秒)\\n     * @param values 值 可以是多个\\n     * @return 成功个数\\n     */\\n    public static long sSetAndTime(String key, long time, Object... values) {\\n        try {\\n            Long count = (long)values.length;\\n            if (time > 0) {\\n                count = redisTemplate.opsForSet().add(key, values);\\n                expire(key, time);\\n            }\\n            return count;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 获取set缓存的长度\\n     *\\n     * @param key 键\\n     */\\n    public static long sGetSetSize(String key) {\\n        try {\\n            return redisTemplate.opsForSet().size(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 移除值为value的\\n     *\\n     * @param key    键\\n     * @param values 值 可以是多个\\n     * @return 移除的个数\\n     */\\n\\n    public static long setRemove(String key, Object... values) {\\n        try {\\n            return redisTemplate.opsForSet().remove(key, values);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n    // ===============================list=================================\\n\\n    /**\\n     * 获取list缓存的内容\\n     *\\n     * @param key   键\\n     * @param start 开始\\n     * @param end   结束 0 到 -1代表所有值\\n     */\\n    public static List<Object> lGet(String key, long start, long end) {\\n        try {\\n            return redisTemplate.opsForList().range(key, start, end);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 获取list缓存的长度\\n     *\\n     * @param key 键\\n     */\\n    public static long lGetListSize(String key) {\\n        try {\\n            return redisTemplate.opsForList().size(key);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * 通过索引 获取list中的值\\n     *\\n     * @param key   键\\n     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推\\n     */\\n    public static Object lGetIndex(String key, long index) {\\n        try {\\n            return redisTemplate.opsForList().index(key, index);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return null;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     */\\n    public static boolean lSet(String key, Object value) {\\n        try {\\n            redisTemplate.opsForList().rightPush(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒)\\n     */\\n    public static boolean lSet(String key, Object value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForList().rightPush(key, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @return true 存放成功 false存放失败\\n     */\\n    public static boolean lSet(String key, List<Object> value) {\\n        try {\\n            redisTemplate.opsForList().rightPushAll(key, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n\\n    }\\n\\n\\n    /**\\n     * 将list放入缓存\\n     *\\n     * @param key   键\\n     * @param value 值\\n     * @param time  时间(秒)\\n     * @return true 存放成功 false存放失败\\n     */\\n    public static boolean lSet(String key, List<Object> value, long time) {\\n        try {\\n            if (time > 0) {\\n                redisTemplate.opsForList().rightPushAll(key, value);\\n                expire(key, time);\\n            }\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 根据索引修改list中的某条数据\\n     *\\n     * @param key   键\\n     * @param index 索引\\n     * @param value 值\\n     * @return true 存放成功 false存放失败\\n     */\\n\\n    public static boolean lUpdateIndex(String key, long index, Object value) {\\n        try {\\n            redisTemplate.opsForList().set(key, index, value);\\n            return true;\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return false;\\n        }\\n    }\\n\\n\\n    /**\\n     * 移除N个值为value\\n     *\\n     * @param key   键\\n     * @param count 移除多少个\\n     * @param value 值\\n     * @return 移除的个数\\n     */\\n\\n    public static long lRemove(String key, long count, Object value) {\\n        try {\\n            return redisTemplate.opsForList().remove(key, count, value);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            return 0;\\n        }\\n    }\\n\\n}\\n\\n```\\n\\n## 编写 Jwt 拦截器\\n```Java\\npackage com.example.demo.filter;\\n\\nimport com.auth0.jwt.exceptions.TokenExpiredException;\\nimport com.example.demo.po.JWTToken;\\nimport com.example.demo.po.Result;\\nimport com.example.demo.service.impl.TokenService;\\nimport com.example.demo.util.RedisUtil;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.shiro.authc.AuthenticationToken;\\nimport org.apache.shiro.subject.Subject;\\nimport org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.RequestMethod;\\n\\nimport javax.servlet.ServletRequest;\\nimport javax.servlet.ServletResponse;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\n/**\\n * @Author Felix\\n * The type Jwt interceptor.\\n */\\n@Slf4j\\npublic class JwtInterceptor extends BasicHttpAuthenticationFilter {\\n\\n    /**\\n     * 判断是否允许通过\\n     * @param request\\n     * @param response\\n     * @param mappedValue\\n     * @return\\n     */\\n    @Override\\n    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {\\n        System.out.println(\\\"isAccessAllowed方法\\\");\\n        try{\\n            return executeLogin(request,response);\\n        }catch (Exception e){\\n            System.out.println(\\\"错误\\\"+e);\\n//            throw new ShiroException(e.getMessage());\\n            responseError(response,\\\"shiro fail\\\");\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * 是否进行登录请求\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    @Override\\n    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) {\\n        System.out.println(\\\"isLoginAttempt方法\\\");\\n        String token=((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        if (token!=null){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * 创建shiro token\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    @Override\\n    protected AuthenticationToken createToken(ServletRequest request, ServletResponse response) {\\n        System.out.println(\\\"createToken方法\\\");\\n        String jwtToken = ((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        if(jwtToken!=null) {\\n            return new JWTToken(jwtToken);\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * isAccessAllowed为false时调用，验证失败\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {\\n        System.out.println(\\\"onAccessDenied\\\");\\n        this.sendChallenge(request,response);\\n        responseError(response,\\\"token verify fail\\\");\\n        return false;\\n    }\\n\\n\\n\\n    /**\\n     * shiro验证成功调用\\n     * @param token\\n     * @param subject\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception {\\n        System.out.println(\\\"onLoginSuccess：\\\");\\n        String jwttoken= (String) token.getPrincipal();\\n        if (jwttoken!=null){\\n            try{\\n                if(TokenService.verify(jwttoken)){\\n                    //判断Redis是否存在所对应的RefreshToken\\n                    String account = TokenService.getAccount(jwttoken);\\n                    Long currentTime=TokenService.getCurrentTime(jwttoken);\\n                    if (RedisUtil.hasKey(account)) {\\n                        Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\\n                        if (currentTimeMillisRedis.equals(currentTime)) {\\n                            return true;\\n                        }\\n                    }\\n                }\\n                return false;\\n            }catch (Exception e){\\n                Throwable throwable = e.getCause();\\n                System.out.println(\\\"token验证：\\\"+e.getClass());\\n                if (e instanceof TokenExpiredException){\\n                    System.out.println(\\\"TokenExpiredException\\\");\\n                    if (refreshToken(request, response)) {\\n                        return true;\\n                    }else {\\n                        return false;\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n\\n    /**\\n     * 拦截器的前置方法，此处进行跨域处理\\n     * @param request\\n     * @param response\\n     * @return\\n     * @throws Exception\\n     */\\n    @Override\\n    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception {\\n        HttpServletRequest httpServletRequest= (HttpServletRequest) request;\\n        HttpServletResponse httpServletResponse= (HttpServletResponse) response;\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Origin\\\",httpServletRequest.getHeader(\\\"Origin\\\"));\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Methods\\\",\\\"GET,POST,OPTIONS,PUT,DELETE\\\");\\n        httpServletResponse.setHeader(\\\"Access-Control-Allow-Headers\\\",httpServletRequest.getHeader(\\\"Access-Control-Resquest-Headers\\\"));\\n        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())){\\n            httpServletResponse.setStatus(HttpStatus.OK.value());\\n        }\\n\\n        //如果不带token，不去验证shiro\\n        if (!isLoginAttempt(request,response)){\\n            responseError(httpServletResponse,\\\"no token\\\");\\n            return false;\\n        }\\n        return super.preHandle(request,response);\\n\\n    }\\n\\n\\n    /**\\n     * 刷新AccessToken，进行判断RefreshToken是否过期，未过期就返回新的AccessToken且继续正常访问\\n     * @param request\\n     * @param response\\n     * @return\\n     */\\n    private boolean refreshToken(ServletRequest request, ServletResponse response) {\\n        String token = ((HttpServletRequest)request).getHeader(\\\"token\\\");\\n        String account = TokenService.getAccount(token);\\n        Long currentTime=TokenService.getCurrentTime(token);\\n        // 判断Redis中RefreshToken是否存在\\n        if (RedisUtil.hasKey(account)) {\\n            // Redis中RefreshToken还存在，获取RefreshToken的时间戳\\n            Long currentTimeMillisRedis = (Long) RedisUtil.get(account);\\n            // 获取当前AccessToken中的时间戳，与RefreshToken的时间戳对比，如果当前时间戳一致，进行AccessToken刷新\\n            if (currentTimeMillisRedis.equals(currentTime)) {\\n                // 获取当前最新时间戳\\n                Long currentTimeMillis =System.currentTimeMillis();\\n                RedisUtil.set(account, currentTimeMillis,\\n                        TokenService.REFRESH_EXPIRE_TIME);\\n                // 刷新AccessToken，设置时间戳为当前最新时间戳\\n                token = TokenService.getToken(account, currentTimeMillis);\\n                HttpServletResponse httpServletResponse = (HttpServletResponse) response;\\n                httpServletResponse.setHeader(\\\"Authorization\\\", token);\\n                httpServletResponse.setHeader(\\\"Access-Control-Expose-Headers\\\", \\\"Authorization\\\");\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    private void responseError(ServletResponse response,String msg){\\n\\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\\n        httpResponse.setStatus(401);\\n        httpResponse.setCharacterEncoding(\\\"UTF-8\\\");\\n        httpResponse.setContentType(\\\"application/json;charset=UTF-8\\\");\\n        try {\\n            String rj = new ObjectMapper().writeValueAsString(new Result(401,msg));\\n            httpResponse.getWriter().append(rj);\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n}\\n```\\n# 使用shiro框架，将Jwt 拦截注册并使用\\n- ShiroFilterFactoryBean 用于放行接口，拦截接口，将jwt工具类注册在这里\\n- SecurityManager  注册 Realm 使其在shiro框架中\\n- AuthorizationAttributeSourceAdvisor 授权属性源配置\\n- LifecycleBeanPostProcessor 管理Shiro中一些bean的生命周期\\n```Java\\npackage com.example.demo.filter;\\n\\nimport com.example.demo.config.CustomRealm;\\nimport org.apache.shiro.mgt.DefaultSessionStorageEvaluator;\\nimport org.apache.shiro.mgt.DefaultSubjectDAO;\\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.apache.shiro.mgt.SecurityManager;\\n\\nimport javax.servlet.Filter;\\nimport java.util.LinkedHashMap;\\nimport java.util.Map;\\n\\n/**\\n * @Author: Felix\\n * @Description: TODO\\n * @Date: 2023/11/23 20:27\\n * @Version: 1.0\\n */\\n@Configuration\\npublic class MyShiroConfig {\\n    @Bean\\n    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager){\\n        ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();\\n        Map<String, Filter> filterMap=new LinkedHashMap<>();\\n        filterMap.put(\\\"jwt\\\", new JwtInterceptor());  // 将Jwt 拦截器注册\\n        shiroFilterFactoryBean.setFilters(filterMap);\\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\\n        //不要用HashMap来创建Map，会有某些配置失效，要用链表的LinkedHashmap\\n        Map<String,String> filterRuleMap=new LinkedHashMap<>();\\n        //放行接口\\n        filterRuleMap.put(\\\"/\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/webjars/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/user/login/status\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/css/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/images/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/js/**\\\",\\\"anon\\\");\\n        filterRuleMap.put(\\\"/lib/**\\\",\\\"anon\\\");\\n        //拦截所有接口\\n        filterRuleMap.put(\\\"/**\\\",\\\"jwt\\\");\\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterRuleMap);\\n        return shiroFilterFactoryBean;\\n\\n    }\\n\\n\\n    @Bean\\n    public SecurityManager securityManager(CustomRealm customRealm){\\n        //设置自定义Realm\\n        DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();\\n        securityManager.setRealm(customRealm);\\n        //关闭shiro自带的session\\n        DefaultSubjectDAO subjectDAO=new DefaultSubjectDAO();\\n        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator=new DefaultSessionStorageEvaluator();\\n        defaultSessionStorageEvaluator.setSessionStorageEnabled(false);\\n        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);\\n        securityManager.setSubjectDAO(subjectDAO);\\n        return securityManager;\\n    }\\n\\n    /**\\n     * 配置代理会导致doGetAuthorizationInfo执行两次\\n     */\\n//    @Bean\\n//    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator(){\\n//        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=new DefaultAdvisorAutoProxyCreator();\\n//        //强制使用从cglib动态代理机制，防止重复代理可能引起代理出错问题\\n//        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\\n//        return defaultAdvisorAutoProxyCreator;\\n//    }\\n\\n    /**\\n     * 授权属性源配置\\n     * @param securityManager\\n     * @return\\n     */\\n    @Bean\\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=new AuthorizationAttributeSourceAdvisor();\\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\\n\\n        return authorizationAttributeSourceAdvisor;\\n\\n    }\\n\\n    @Bean\\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor(){\\n        return new LifecycleBeanPostProcessor();\\n    }\\n}\\n\\n```\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/04608c2976b3a09b09b9b077c72232d7.jpg\",\"articleTitle\":\"springBoot 开发基本思路\",\"categoryName\":\"Java\",\"id\":67,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '10.240.12.21', '本地局域网', '2023-11-27 10:24:17', NULL);
INSERT INTO `tb_operation_log` VALUES (1119, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"开发工具\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 20:25:48', NULL);
INSERT INTO `tb_operation_log` VALUES (1120, '标签模块', '新增或修改', '/admin/tags', 'com.minzheng.blog.controller.TagController.saveOrUpdateTag', '添加或修改标签', '[{\"tagName\":\"git\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 20:25:56', NULL);
INSERT INTO `tb_operation_log` VALUES (1121, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# git的使用\\n## 上传文件\\n- 初始化，创建本地仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/4631afd8346ddf5c91fbd90879a1c75c.png)\\n## 初始化命令 ** git init **\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ea6b253056db3dfbcf41e3aed4dd89c9.png)\\n将本地文件添加到本地仓库\\n## 添加本地仓库命令  ** git add .**   “注意的是这个命令后面还有一个点”\\n**即add 空格 点**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8f3ccc5c5179782a157e4106fb88fd3c.png)\\n- 添加注释 作用为提交暂存区的文件（也就是上一步添加的文件） 后面双引号内可以填写关于提交的注释信息。\\n## 添加注释的命令：git commit -m \\\" \\\"\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/bea6150841eab0181c079038b65d8169.png)\\n- 添加远程仓库，打开gitee 或者 github 新建仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/55890c13a519ed8c713d63701f706487.png)\\n- 建立本地仓库和远程仓库的关联\\n- - 复制新建仓库的地址\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/3ee35e7d0dca27785a1378f624fac38d.png)\\n- 关联\\n## 关联的命令: git remote add origin 后面是新建仓库的地址\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/857cab30afa4ee97ef85445ba2123b8e.png)\\n- 同步仓库内容 本地仓库和远程仓库的内容是一样的\\n## 同步仓库命令：git pull --rebase origin master\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/012b898fcb7da01ee07f14e563c598da.png)\\n- 上传文件\\n## 上传命令：git push -u origin master\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8d2935e8dc739afc6c27fa5b18149ae3.png)\\n上传成功后看远程仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/6354d7e3aff7b9e75c8427e4b15a862b.png)\\n\\n# 上传中间出错\\n**如果 git push -u origin master出错 如下图**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a4ddc52892997f779e09b6bf8ecb7067.png)\\n## 解决方案\\n**先输入命令 git pull --rebase origin master**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/63f12209a29078c8c6229a8712945adc.png)\\n**再上传文件 命令： git push origin master**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/71722ce8eab646bcb69d4013afb1dc83.png)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/59b97ca13c105581ad513caacf8fa42c.png\",\"articleTitle\":\"git的基本使用步骤\",\"categoryName\":\"开发工具\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 20:26:59', NULL);
INSERT INTO `tb_operation_log` VALUES (1122, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# git的使用\\n## 上传文件\\n- 初始化，创建本地仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/4631afd8346ddf5c91fbd90879a1c75c.png)\\n## 初始化命令 ** git init **\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/ea6b253056db3dfbcf41e3aed4dd89c9.png)\\n将本地文件添加到本地仓库\\n## 添加本地仓库命令  ** git add .**   “注意的是这个命令后面还有一个点”\\n**即add 空格 点**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8f3ccc5c5179782a157e4106fb88fd3c.png)\\n- 添加注释 作用为提交暂存区的文件（也就是上一步添加的文件） 后面双引号内可以填写关于提交的注释信息。\\n## 添加注释的命令：git commit -m \\\" \\\"\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/bea6150841eab0181c079038b65d8169.png)\\n- 添加远程仓库，打开gitee 或者 github 新建仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/55890c13a519ed8c713d63701f706487.png)\\n- 建立本地仓库和远程仓库的关联\\n- - 复制新建仓库的地址\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/3ee35e7d0dca27785a1378f624fac38d.png)\\n- 关联\\n## 关联的命令: git remote add origin 后面是新建仓库的地址\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/857cab30afa4ee97ef85445ba2123b8e.png)\\n- 同步仓库内容 本地仓库和远程仓库的内容是一样的\\n## 同步仓库命令：git pull --rebase origin master\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/012b898fcb7da01ee07f14e563c598da.png)\\n- 上传文件\\n## 上传命令：git push -u origin master\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/8d2935e8dc739afc6c27fa5b18149ae3.png)\\n上传成功后看远程仓库\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/6354d7e3aff7b9e75c8427e4b15a862b.png)\\n\\n# 上传中间出错\\n**如果 git push -u origin master出错 如下图**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/a4ddc52892997f779e09b6bf8ecb7067.png)\\n## 解决方案\\n**先输入命令 git pull --rebase origin master**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/63f12209a29078c8c6229a8712945adc.png)\\n**再上传文件 命令： git push origin master**\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/71722ce8eab646bcb69d4013afb1dc83.png)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/59b97ca13c105581ad513caacf8fa42c.png\",\"articleTitle\":\"git的基本使用步骤\",\"categoryName\":\"开发工具\",\"id\":68,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 20:27:07', NULL);
INSERT INTO `tb_operation_log` VALUES (1123, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"前后端开发经验\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 21:53:36', NULL);
INSERT INTO `tb_operation_log` VALUES (1124, '标签模块', '新增或修改', '/admin/tags', 'com.minzheng.blog.controller.TagController.saveOrUpdateTag', '添加或修改标签', '[{\"tagName\":\"微信\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 21:53:51', NULL);
INSERT INTO `tb_operation_log` VALUES (1125, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# Java\\n## 导包并在yml文件配置信息\\n```xml\\n<!-- https://mvnrepository.com/artifact/com.github.binarywang/weixin-java-mp -->\\n<dependency>\\n    <groupId>com.github.binarywang</groupId>\\n    <artifactId>weixin-java-miniapp</artifactId>\\n    <version>4..0</version>\\n</dependency>\\n```\\n- 配置类，需要在yml文件中配置有关微信的配置\\n```yml\\nwx:\\nminiapp:\\nconfigs:\\n-   appid: wxedb7e15f323ef580  #微信小程序的appid\\n    secret: cabcb1df3978a894a6a979e7858f9f63 # #微信小程序的Secret\\n    token: TCLRL2021    #微信小程序消息服务器配置的token\\n    aesKey: 8xI4vXzxzvjCpMMqroNefThq6MHDAiz8n8uAHfS1ueg  #微信小程序消息服务器配置的EncodingAESKey\\n    msgDataFormat: JSON\\n```\\n**其中appid和aesKey都是微信小程序申请的**\\n## 小程序的配置\\nWxMaProperties 用于读取yml配置的信息\\n```Java\\nimport lombok.Data;\\nimport org.springframework.boot.context.properties.ConfigurationProperties;\\n\\nimport java.util.List;\\n\\n@Data\\n@ConfigurationProperties(prefix = \\\"wx.miniapp\\\")\\npublic class WxMaProperties {\\n\\n    private List<Config> configs;\\n\\n    @Data\\n    public static class Config {\\n        /**\\n         * 设置微信小程序的appid\\n         */\\n        private String appid;\\n\\n        /**\\n         * 设置微信小程序的Secret\\n         */\\n        private String secret;\\n\\n        /**\\n         * 设置微信小程序消息服务器配置的token\\n         */\\n        private String token;\\n\\n        /**\\n         * 设置微信小程序消息服务器配置的EncodingAESKey\\n         */\\n        private String aesKey;\\n\\n        /**\\n         * 消息格式，XML或者JSON\\n         */\\n        private String msgDataFormat;\\n    }\\n\\n}\\n```\\nWxMaConfiguration(官方demo照搬即可)\\n```Java\\nimport cn.binarywang.wx.miniapp.api.WxMaService;\\nimport cn.binarywang.wx.miniapp.api.impl.WxMaServiceImpl;\\nimport cn.binarywang.wx.miniapp.bean.WxMaKefuMessage;\\nimport cn.binarywang.wx.miniapp.bean.WxMaSubscribeMessage;\\nimport cn.binarywang.wx.miniapp.config.impl.WxMaDefaultConfigImpl;\\nimport cn.binarywang.wx.miniapp.message.WxMaMessageHandler;\\nimport cn.binarywang.wx.miniapp.message.WxMaMessageRouter;\\nimport com.google.common.collect.Lists;\\nimport lombok.extern.slf4j.Slf4j;\\nimport me.chanjar.weixin.common.bean.result.WxMediaUploadResult;\\nimport me.chanjar.weixin.common.error.WxErrorException;\\nimport me.chanjar.weixin.common.error.WxRuntimeException;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\n\\nimport java.io.File;\\nimport java.util.List;\\nimport java.util.stream.Collectors;\\n\\n@Slf4j\\n@Configuration\\n@EnableConfigurationProperties(WxMaProperties.class)\\npublic class WxMaConfiguration {\\n    private final WxMaProperties properties;\\n\\n    @Autowired\\n    public WxMaConfiguration(WxMaProperties properties) {\\n        this.properties = properties;\\n    }\\n\\n    @Bean\\n    public WxMaService wxMaService() {\\n        List<WxMaProperties.Config> configs = this.properties.getConfigs();\\n        if (configs == null) {\\n            throw new WxRuntimeException(\\\"大哥，拜托先看下项目首页的说明（readme文件），添加下相关配置，注意别配错了！\\\");\\n        }\\n        WxMaService maService = new WxMaServiceImpl();\\n        maService.setMultiConfigs(\\n            configs.stream()\\n                .map(a -> {\\n                    WxMaDefaultConfigImpl config = new WxMaDefaultConfigImpl();\\n//                WxMaDefaultConfigImpl config = new WxMaRedisConfigImpl(new JedisPool());\\n                    // 使用上面的配置时，需要同时引入jedis-lock的依赖，否则会报类无法找到的异常\\n                    config.setAppid(a.getAppid());\\n                    config.setSecret(a.getSecret());\\n                    config.setToken(a.getToken());\\n                    config.setAesKey(a.getAesKey());\\n                    config.setMsgDataFormat(a.getMsgDataFormat());\\n                    return config;\\n                }).collect(Collectors.toMap(WxMaDefaultConfigImpl::getAppid, a -> a, (o, n) -> o)));\\n        return maService;\\n    }\\n\\n    @Bean\\n    public WxMaMessageRouter wxMaMessageRouter(WxMaService wxMaService) {\\n        final WxMaMessageRouter router = new WxMaMessageRouter(wxMaService);\\n        router\\n            .rule().handler(logHandler).next()\\n            .rule().async(false).content(\\\"订阅消息\\\").handler(subscribeMsgHandler).end()\\n            .rule().async(false).content(\\\"文本\\\").handler(textHandler).end()\\n            .rule().async(false).content(\\\"图片\\\").handler(picHandler).end()\\n            .rule().async(false).content(\\\"二维码\\\").handler(qrcodeHandler).end();\\n        return router;\\n    }\\n\\n    private final WxMaMessageHandler subscribeMsgHandler = (wxMessage, context, service, sessionManager) -> {\\n        service.getMsgService().sendSubscribeMsg(WxMaSubscribeMessage.builder()\\n            .templateId(\\\"此处更换为自己的模板id\\\")\\n            .data(Lists.newArrayList(\\n                new WxMaSubscribeMessage.MsgData(\\\"keyword1\\\", \\\"339208499\\\")))\\n            .toUser(wxMessage.getFromUser())\\n            .build());\\n        return null;\\n    };\\n\\n    private final WxMaMessageHandler logHandler = (wxMessage, context, service, sessionManager) -> {\\n        log.info(\\\"收到消息：\\\" + wxMessage.toString());\\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\\\"收到信息为：\\\" + wxMessage.toJson())\\n            .toUser(wxMessage.getFromUser()).build());\\n        return null;\\n    };\\n\\n    private final WxMaMessageHandler textHandler = (wxMessage, context, service, sessionManager) -> {\\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\\\"回复文本消息\\\")\\n            .toUser(wxMessage.getFromUser()).build());\\n        return null;\\n    };\\n\\n    private final WxMaMessageHandler picHandler = (wxMessage, context, service, sessionManager) -> {\\n        try {\\n            WxMediaUploadResult uploadResult = service.getMediaService()\\n                .uploadMedia(\\\"image\\\", \\\"png\\\",\\n                    ClassLoader.getSystemResourceAsStream(\\\"tmp.png\\\"));\\n            service.getMsgService().sendKefuMsg(\\n                WxMaKefuMessage\\n                    .newImageBuilder()\\n                    .mediaId(uploadResult.getMediaId())\\n                    .toUser(wxMessage.getFromUser())\\n                    .build());\\n        } catch (WxErrorException e) {\\n            e.printStackTrace();\\n        }\\n\\n        return null;\\n    };\\n\\n    private final WxMaMessageHandler qrcodeHandler = (wxMessage, context, service, sessionManager) -> {\\n        try {\\n            final File file = service.getQrcodeService().createQrcode(\\\"123\\\", 430);\\n            WxMediaUploadResult uploadResult = service.getMediaService().uploadMedia(\\\"image\\\", file);\\n            service.getMsgService().sendKefuMsg(\\n                WxMaKefuMessage\\n                    .newImageBuilder()\\n                    .mediaId(uploadResult.getMediaId())\\n                    .toUser(wxMessage.getFromUser())\\n                    .build());\\n        } catch (WxErrorException e) {\\n            e.printStackTrace();\\n        }\\n\\n        return null;\\n    };\\n\\n}\\n```\\n这个是官方demo里面的，就是读取application.yml配置的信息进行初始化\\n\\n前期准备工作做完，以下是分企业级和普通的微信登录代码\\n## 企业级\\n- service层\\n```import cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\\nimport com.example.wxjava.common.result.R;\\nimport com.example.wxjava.domain.dto.WxUserInfo;\\n\\n/**\\n * @author Felix\\n * @since 2022/7/27 22:47\\n */\\npublic interface UserInfoService {\\n\\n  /**\\n     * 根据微信id查询用户信息\\n     * @param openid 微信标识\\n     * @return 用户信息\\n     */\\n    SysUser selectUserByOpenid(String openid);\\n}\\n```\\n- mapper层\\n```Java\\n    /**\\n     * 根据手机号码查询用户信息\\n     * @param openid 微信标识\\n     * @return 用户信息\\n     */\\n    SysUser selectUserByOpenid(String openid);\\n```\\n- Impl层\\n```Java\\n@Override\\n    public SysUser selectUserByOpenid(String openid) {\\n        return userMapper.selectUserByOpenid(openid);\\n    }\\n```\\n- controller层（企业级的 可能需要考虑的很多）\\n比如 考虑没有注册的 需要通过手机号进行注册等问题 可以看项目(basic_project,这个项目是电脑里的，由于代码量过大，就不传了)\\nWxMaUserController类\\n```Java\\n/**\\n     * 小程序登陆接口\\n     */\\n    @ApiOperation(value = \\\"小程序登陆接口\\\", notes = \\\"小程序登陆接口\\\")\\n    @GetMapping(\\\"/login\\\")\\n    public AjaxResult login(@PathVariable String appid, String code) {\\n        if (StringUtils.isBlank(code)) {\\n            return AjaxResult.error(\\\"empty jscode\\\");\\n        }\\n\\n        final WxMaService wxService = WxMaConfiguration.getMaService(appid);\\n\\n        try {\\n            WxMaJscode2SessionResult session = wxService.getUserService().getSessionInfo(code);\\n            this.logger.info(session.getSessionKey());\\n            this.logger.info(session.getOpenid());\\n            //TODO 通过openId查询用户信息，如果已注册返回token，否则返回空\\n            SysUser sysUser = sysUserService.selectUserByOpenid(session.getOpenid());\\n           /*  这是用户没有注册的时候 进行注册需要用到的\\n            if(sysUser != null) {\\n                String valid = generateValidCode(sysUser.getPhonenumber());\\n                //注册成功后进行用户登录  验证码\\n                String token = loginService.loginByPhone(sysUser.getPhonenumber(), valid,\\n                        null);\\n                return AjaxResult.success(token);\\n            }\\n            return AjaxResult.error(\\\"未注册\\\", session);\\n        } catch (WxErrorException e) {\\n            this.logger.error(e.getMessage(), e);\\n            return AjaxResult.error(e.toString());\\n        }\\n*/\\n    }\\n```\\n## 普通级的微信授权登录  \\ncontroller层\\n```Java\\nimport cn.binarywang.wx.miniapp.api.WxMaService;\\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\\nimport com.example.wxjava.common.result.R;\\nimport com.example.wxjava.domain.dto.WxUserInfo;\\nimport com.example.wxjava.service.UserInfoService;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.web.bind.annotation.*;\\n\\n/**\\n * @author Felix\\n * @since 2022/7/27 22:44\\n */\\n@Slf4j\\n@RestController\\n@RequestMapping(\\\"/wx/user\\\")\\n@RequiredArgsConstructor(onConstructor_ = @Autowired)\\npublic class WxUserInfoController {\\n    private final WxMaService wxMaService;\\n\\n    private final UserInfoService userInfoService;\\n\\n    /**\\n     * 登陆接口\\n     */\\n    @GetMapping(\\\"/login\\\")\\n    public R<WxMaJscode2SessionResult> login(@RequestParam(\\\"code\\\") String code) {\\n        return userInfoService.login(code);\\n    }\\n\\n    /**\\n     * <pre>\\n     * 获取用户信息接口\\n     * </pre>\\n     */\\n    @PostMapping(\\\"/getUserInfo\\\")\\n    public R<WxMaUserInfo> getUserInfo(@RequestBody WxUserInfo userInfo) {\\n        return userInfoService.getUserInfo(userInfo);\\n    }\\n}\\n```\\n- service\\n```Java\\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\\nimport com.example.wxjava.common.result.R;\\nimport com.example.wxjava.domain.dto.WxUserInfo;\\n\\n/**\\n * @author Felix\\n * @since 2022/7/27 22:47\\n */\\npublic interface UserInfoService {\\n\\n    /**\\n     * 登录\\n     * @param code code\\n     * @return   WxMaJscode2SessionResult\\n     */\\n    R<WxMaJscode2SessionResult> login(String code);\\n\\n    /**\\n     * 获取用户信息\\n     * @param userInfo  包含一些加密的信息\\n     * @return  WxMaUserInfo\\n     */\\n    R<WxMaUserInfo> getUserInfo(WxUserInfo userInfo);\\n}\\n\\n```\\n- Impl层\\n```Java\\nimport cn.binarywang.wx.miniapp.api.WxMaService;\\nimport cn.binarywang.wx.miniapp.bean.WxMaJscode2SessionResult;\\nimport cn.binarywang.wx.miniapp.bean.WxMaUserInfo;\\nimport cn.binarywang.wx.miniapp.util.WxMaConfigHolder;\\nimport com.example.wxjava.common.result.R;\\nimport com.example.wxjava.domain.dto.WxUserInfo;\\nimport com.example.wxjava.service.UserInfoService;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport me.chanjar.weixin.common.error.WxErrorException;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\n\\n/**\\n * @author Felix\\n * @since 2022/7/27 22:48\\n */\\n@Slf4j\\n@Service\\n@RequiredArgsConstructor(onConstructor_ = @Autowired)\\npublic class UserInfoServiceImpl implements UserInfoService {\\n\\n    private final WxMaService wxMaService;\\n\\n    /**\\n     * 登录\\n     * @param code code\\n     * @return   WxMaJscode2SessionResult\\n     */\\n    @Override\\n    public R<WxMaJscode2SessionResult> login(String code) {\\n        try {\\n            WxMaJscode2SessionResult session = wxMaService.getUserService().getSessionInfo(code);\\n            log.info(session.getSessionKey());\\n            log.info(session.getOpenid());\\n            //TODO 可以增加自己的逻辑，关联业务相关数据\\n            return R.ok(session);\\n        } catch (WxErrorException e) {\\n            log.error(e.getMessage(), e);\\n            return R.error(e.toString());\\n        } finally {\\n            WxMaConfigHolder.remove();//清理ThreadLocal\\n        }\\n    }\\n\\n    @Override\\n    public R<WxMaUserInfo> getUserInfo(WxUserInfo userInfo) {\\n\\n        // 用户信息校验\\n        if (!wxMaService.getUserService().checkUserInfo(userInfo.getSessionKey(), userInfo.getRawData(), userInfo.getSignature())) {\\n            WxMaConfigHolder.remove();//清理ThreadLocal\\n            return R.error(\\\"user check failed\\\");\\n        }\\n\\n        // 解密用户信息\\n        WxMaUserInfo wxMaUserInfo = wxMaService.getUserService().getUserInfo(userInfo.getSessionKey(), userInfo.getEncryptedData(), userInfo.getIv());\\n        WxMaConfigHolder.remove();//清理ThreadLocal\\n        return R.ok(wxMaUserInfo);\\n    }\\n}\\n```\\n## 前端，这里使用uniapp实现\\n- 使用HBuilder X 新建一个uniapp的项目\\n ![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e280f427cc0897031f9fd7b6ca5e92ad.png)\\n\\n```HTML\\n<template>\\n  <view class=\\\"content\\\">\\n  <button @click=\\\"login()\\\">微信登录</button>\\n  </view>\\n  </template>\\n\\n  <script>\\n  export default {\\n  data() {\\n    return {\\n      title: \'Hello\',\\n      sessionKey: \'\'\\n    }\\n  },\\n  onLoad() {\\n\\n  },\\n  methods: {\\n    async login(){\\n      let that = this //保存当前作用域\\n\\n      await uni.login({ //直接用这个调用微信接口\\n        onlyAuthorize:true,\\n        success:function(response){ // 用微信登录的话就要去微信开发工具\\n          console.log(response) //这里打印就说明接口调用成功了，然后看message login ：ok\\n          //微信登录就完了，后面就是获取用户信息\\n          uni.request({\\n            url: \'http://localhost:8888/wx/user/login\',\\n            data: {\\n              code: response.code\\n            },\\n            success(res) {\\n              console.log(\\\"sessionkey\\\",res)\\n              that.sessionKey = res.data.data.sessionKey\\n            }\\n          })\\n\\n        }\\n      })\\n      await uni.getUserProfile({\\n        desc:\'测试用例\',\\n        success:function(res){\\n          console.log(\\\"res\\\",res)\\n          uni.request({\\n            url: \'http://localhost:8888/wx/user/getUserInfo\',\\n            method: \'POST\',\\n            dataType: \'json\',\\n            data: {\\n              rawData: res.rawData,\\n              signature: res.signature,\\n              encryptedData: res.encryptedData,\\n              iv: res.iv,\\n              sessionKey: that.sessionKey\\n            },\\n            success(resc) {\\n              console.log(\\\"登录成功\\\",resc)\\n            }\\n          })\\n        }\\n      })\\n\\n    }\\n  }\\n}\\n  </script>\\n\\n  <style>\\n\\n  </style>\\n\\n```\\n- 直接选择运行到微信开发者工具\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/34b9549128c12d2132037cd03b76a8cf.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/37e7090370e38d2460e3fcb826adeba4.png)\\n![ce738fde20376ef0ca427e6454f4ef4.jpg](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/705b4535ebc21596b54b5204dd506576.jpg)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/911723577c3fad2d49528e54399796e4.png)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/e746d63e5df4dd2c748813e7b606b3eb.jpg\",\"articleTitle\":\"微信授权登录(前后端都有)\",\"categoryName\":\"前后端开发经验\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 21:56:35', NULL);
INSERT INTO `tb_operation_log` VALUES (1126, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这里通过创建“56个民族”的简单示例演示\\n- 第一步：在static文件夹下的common下新建js文件夹，新建js文件\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/32d42c2de371e1a24375874b33ef0704.png)\\n```html\\n//到出 js 文件  固定的需要一个 \\nfunction xxx(){\\nvar xx = [];\\nreturn  xx;\\n}\\nexport default  xxx\\n```\\n- js文件\\n```JavaScript\\nexport function dataInJs(){\\n\\t\\nvar nation_data = [\\n\\t\\t{value:1 ,label:\'汉族\'},\\n\\t\\t{value:2 ,label:\'蒙古族\'},\\n\\t\\t{value:3 ,label:\'回族\'},\\n\\t\\t{value:4 ,label:\'藏族\'},\\n\\t\\t{value:5 ,label:\'维吾尔族\'},\\n\\t\\t{value:6 ,label:\'苗族\'},\\n\\t\\t{value:7 ,label:\'彝族\'},\\n\\t\\t{value:8 ,label:\'壮族\'},\\n\\t\\t{value:9 ,label:\'布依族\'},\\n\\t\\t{value:10,label:\'朝鲜族\'},\\n\\t\\t{value:11,label:\'满族\'},\\n\\t\\t{value:12,label:\'侗族\'},\\n\\t\\t{value:13,label:\'瑶族\'},\\n\\t\\t{value:14,label:\'白族\'},\\n\\t\\t{value:15,label:\'土家族\'},\\n\\t\\t{value:16,label:\'哈尼族\'},\\n\\t\\t{value:17,label:\'哈萨克族\'},\\n\\t\\t{value:18,label:\'傣族\'},\\n\\t\\t{value:19,label:\'黎族\'},\\n\\t\\t{value:20,label:\'傈僳族\'},\\n\\t\\t{value:21,label:\'佤族\'},\\n\\t\\t{value:22,label:\'畲族\'},\\n\\t\\t{value:23,label:\'高山族\'},\\n\\t\\t{value:24,label:\'拉祜族\'},\\n\\t\\t{value:25,label:\'水族\'},\\n\\t\\t{value:26,label:\'东乡族\'},\\n\\t\\t{value:27,label:\'纳西族\'},\\n\\t\\t{value:28,label:\'景颇族\'},\\n\\t\\t{value:29,label:\'柯尔克孜族\'},\\n\\t\\t{value:30,label:\'土族\'},\\n\\t\\t{value:31,label:\'达翰尔族\'},\\n\\t\\t{value:32,label:\'么佬族\'},\\n\\t\\t{value:33,label:\'羌族\'},\\n\\t\\t{value:34,label:\'布朗族\'},\\n\\t\\t{value:35,label:\'撒拉族\'},\\n\\t\\t{value:36,label:\'毛南族\'},\\n\\t\\t{value:37,label:\'仡佬族\'},\\n\\t\\t{value:38,label:\'锡伯族\'},\\n\\t\\t{value:39,label:\'阿昌族\'},\\n\\t\\t{value:40,label:\'普米族\'},\\n\\t\\t{value:41,label:\'塔吉克族\'},\\n\\t\\t{value:42,label:\'怒族\'},\\n\\t\\t{value:43,label:\'乌孜别克族\'},\\n\\t\\t{value:44,label:\'俄罗斯族\'},\\n\\t\\t{value:45,label:\'鄂温克族\'},\\n\\t\\t{value:46,label:\'德昂族\'},\\n\\t\\t{value:47,label:\'保安族\'},\\n\\t\\t{value:48,label:\'裕固族\'},\\n\\t\\t{value:49,label:\'京族\'},\\n\\t\\t{value:50,label:\'塔塔尔族\'},\\n\\t\\t{value:51,label:\'独龙族\'},\\n\\t\\t{value:52,label:\'鄂伦春族\'},\\n\\t\\t{value:53,label:\'赫哲族\'},\\n\\t\\t{value:54,label:\'门巴族\'},\\n\\t\\t{value:55,label:\'珞巴族\'},\\n\\t\\t{value:56,label:\'基诺族\'},\\n \\n];\\nreturn nation_data;\\n}\\n\\nexport default dataInJs\\n```\\n- 第二步：引入js 文件\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/f6c78848c0fd5b1471fde558966902a4.png)\\n# 实战 ------>  写56个民族\\n**在<script>标签头引入\\n\\timport {dataInJs} from \'@/static/common/js/nation.js\'**\\n```html\\n<template>\\n\\t<view class=\\\"wrap\\\">\\n\\t\\t<u-steps :list=\\\"numList\\\" :current=\\\"1\\\" mode=\\\"number\\\"></u-steps>\\n\\t\\t<u-form :model=\\\"model\\\" :rules=\\\"rules\\\" ref=\\\"uForm\\\">\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" label-width=\\\"150\\\" :label-position=\\\"labelPosition\\\" label=\\\"身份证号码\\\" prop=\\\"idNo\\\">\\n\\t\\t\\t\\t<u-input placeholder=\\\"请输入身份证号码\\\" v-model=\\\"model.idNo\\\" type=\\\"text\\\" maxlength=\\\"18\\\"></u-input>\\n\\t\\t\\t\\t<u-icon size=\\\"30px\\\" name=\\\"camera\\\" slot=\\\"right\\\" color=\\\"#2979ff\\\" @click=\\\"info()\\\"></u-icon>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"住址\\\" prop=\\\"region\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input type=\\\"text\\\" v-model=\\\"model.hlocation\\\" placeholder=\\\"请选择是身份证地址\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"性别\\\" prop=\\\"payType\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-radio-group v-model=\\\"model.gender\\\" :width=\\\"radioCheckWidth\\\" :wrap=\\\"radioCheckWrap\\\">\\n\\t\\t\\t\\t\\t<u-radio shape=\\\"circle\\\" v-for=\\\"(item, index) in radioList\\\" :key=\\\"index\\\" :name=\\\"item.sex\\\">\\n\\t\\t\\t\\t\\t\\t{{ item.sex }}\\n\\t\\t\\t\\t\\t</u-radio>\\n\\t\\t\\t\\t</u-radio-group>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"民族\\\" prop=\\\"race\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input type=\\\"select\\\" v-model=\\\"model.race\\\" placeholder=\\\"请选择民族\\\" @click=\\\"nationShow = true\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"政治面貌\\\" prop=\\\"out\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-radio-group v-model=\\\"model.polity\\\" :width=\\\"radioCheckWidth\\\" :wrap=\\\"radioCheckWrap\\\">\\n\\t\\t\\t\\t\\t<u-radio shape=\\\"circle\\\" v-for=\\\"(item, index) in outlook\\\" :key=\\\"index\\\" :name=\\\"item.out\\\">\\n\\t\\t\\t\\t\\t\\t{{ item.out }}\\n\\t\\t\\t\\t\\t</u-radio>\\n\\t\\t\\t\\t</u-radio-group>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"最高学历\\\" prop=\\\"goodsType\\\"\\n\\t\\t\\t\\tlabel-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input type=\\\"select\\\" v-model=\\\"model.goodsType\\\" placeholder=\\\"请选择最高学历\\\" @click=\\\"selectShow = true\\\">\\n\\t\\t\\t\\t</u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"籍贯\\\" prop=\\\"pbirth\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input type=\\\"select\\\" :select-open=\\\"showjj\\\" v-model=\\\"model.pbirth\\\" placeholder=\\\"请选择现在住址\\\"\\n\\t\\t\\t\\t\\t@click=\\\"showjj = true\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :label-position=\\\"labelPosition\\\" label=\\\"户口性质\\\" prop=\\\"nature\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-radio-group v-model=\\\"model.htype\\\" :width=\\\"radioCheckWidth\\\" :wrap=\\\"radioCheckWrap\\\">\\n\\t\\t\\t\\t\\t<u-radio shape=\\\"circle\\\" v-for=\\\"(item, index) in registered \\\" :key=\\\"index\\\" :name=\\\"item.nature\\\">\\n\\t\\t\\t\\t\\t\\t{{ item.nature }}\\n\\t\\t\\t\\t\\t</u-radio>\\n\\t\\t\\t\\t</u-radio-group>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"现住址\\\" prop=\\\"nplace\\\" label-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input type=\\\"select\\\" :select-open=\\\"show\\\" v-model=\\\"model.nplace\\\" placeholder=\\\"请选择现在住址\\\"\\n\\t\\t\\t\\t\\t@click=\\\"show = true\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" label-width=\\\"120\\\" :label-position=\\\"labelPosition\\\" label=\\\"紧急联系人姓名\\\"\\n\\t\\t\\t\\tprop=\\\"cnName\\\">\\n\\t\\t\\t\\t<u-input placeholder=\\\"请输入紧急联系人姓名\\\" v-model=\\\"model.cnName\\\" type=\\\"text\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t\\t<u-form-item :required=\\\"true\\\" :label-position=\\\"labelPosition\\\" label=\\\"紧急联系人手机号码\\\" prop=\\\"phone\\\"\\n\\t\\t\\t\\tlabel-width=\\\"150\\\">\\n\\t\\t\\t\\t<u-input placeholder=\\\"请输入联系人手机号码\\\" v-model=\\\"model.phone\\\" type=\\\"number\\\"></u-input>\\n\\t\\t\\t</u-form-item>\\n\\t\\t</u-form>\\n\\n\\t\\t<u-picker mode=\\\"region\\\" v-model=\\\"show\\\" @confirm=\\\"cccc\\\"></u-picker>\\n\\t\\t<u-picker mode=\\\"region\\\" v-model=\\\"showjj\\\" @confirm=\\\"nativeP\\\"></u-picker>\\n\\t\\t<u-select mode=\\\"single-column\\\" :list=\\\"selectList\\\" v-model=\\\"selectShow\\\" @confirm=\\\"selectConfirm\\\"></u-select>\\n\\t\\t<u-select mode=\\\"single-column\\\" :list=\\\"list\\\" v-model=\\\"nationShow\\\" @confirm=\\\"nationConfirm\\\"></u-select>\\n\\t\\t<view>\\n\\t\\t\\t<u-row class=\\\"row\\\" :justify=\\\"justify\\\">\\n\\t\\t\\t\\t<u-col :span=\\\"span\\\">\\n\\t\\t\\t\\t\\t<u-button type=\\\"default\\\">以后再填</u-button>\\n\\t\\t\\t\\t</u-col>\\n\\t\\t\\t\\t<u-col :span=\\\"span\\\" :offset=\\\"offset\\\">\\n\\t\\t\\t\\t\\t<view>\\n\\t\\t\\t\\t\\t\\t<u-button @click=\\\"test\\\" type=\\\"primary\\\">下一步</u-button>\\n\\t\\t\\t\\t\\t</view>\\n\\t\\t\\t\\t</u-col>\\n\\t\\t\\t</u-row>\\n\\t\\t</view>\\n\\t</view>\\n</template>\\n\\n<script>\\n\\timport {dataInJs} from \'@/static/common/js/nation.js\'\\n\\texport default {\\n\\t\\tdata() {\\n\\t\\t\\tlet that = this;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tlist: dataInJs(),\\n\\t\\t\\t\\tmodel: {\\n\\t\\t\\t\\t\\trace: \'\',\\n\\t\\t\\t\\t\\tpolity: \'党员\',\\n\\t\\t\\t\\t\\thtype: \'农村户口\',\\n\\t\\t\\t\\t\\tgender: \'男\',\\n\\t\\t\\t\\t\\tcnName: \'\',\\n\\t\\t\\t\\t\\tnplace: \'\',\\n\\t\\t\\t\\t\\tpbirth: \'\',\\n\\t\\t\\t\\t\\tgoodsType: \'\',\\n\\t\\t\\t\\t\\thlocation: \'\',\\n\\t\\t\\t\\t\\tidNo: \'\',\\n\\t\\t\\t\\t\\taddress: \'\',\\n\\t\\t\\t\\t\\tnativePla: \'\',\\n\\t\\t\\t\\t\\turgent: \'\',\\n\\t\\t\\t\\t\\turgentPhone: \'\',\\n\\t\\t\\t\\t\\tcurrent: \'\',\\n\\t\\t\\t\\t\\tnation: \'\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tselectList: [{\\n\\t\\t\\t\\t\\t\\tvalue: \'小学\',\\n\\t\\t\\t\\t\\t\\tlabel: \'小学\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvalue: \'初中\',\\n\\t\\t\\t\\t\\t\\tlabel: \'初中\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvalue: \'高中\',\\n\\t\\t\\t\\t\\t\\tlabel: \'高中\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvalue: \'专科\',\\n\\t\\t\\t\\t\\t\\tlabel: \'专科\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvalue: \'本科\',\\n\\t\\t\\t\\t\\t\\tlabel: \'本科\'\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\trules: {\\n\\t\\t\\t\\t\\tphone: [{\\n\\t\\t\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'请输入手机号\',\\n\\t\\t\\t\\t\\t\\t\\ttrigger: [\'change\', \'blur\'],\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tvalidator: (rule, value, callback) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\\n\\t\\t\\t\\t\\t\\t\\t\\treturn this.$u.test.mobile(value);\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'手机号码不正确\',\\n\\t\\t\\t\\t\\t\\t\\t// 触发器可以同时用blur和change，二者之间用英文逗号隔开\\n\\t\\t\\t\\t\\t\\t\\ttrigger: [\'change\', \'blur\'],\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\tidNo: [{\\n\\t\\t\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'请输入身份证号\',\\n\\t\\t\\t\\t\\t\\t\\ttrigger: \'blur\',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t// 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明\\n\\t\\t\\t\\t\\t\\t\\tvalidator: (rule, value, callback) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\\n\\t\\t\\t\\t\\t\\t\\t\\treturn this.$u.test.idCard(value);\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'身份证号必须是18位\',\\n\\t\\t\\t\\t\\t\\t\\t// 触发器可以同时用blur和change，二者之间用英文逗号隔开\\n\\t\\t\\t\\t\\t\\t\\ttrigger: [\'change\', \'blur\'],\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\tcnName: [{\\n\\t\\t\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'请输入姓名\',\\n\\t\\t\\t\\t\\t\\t\\ttrigger: \'blur\',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tmin: 3,\\n\\t\\t\\t\\t\\t\\t\\tmax: 5,\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'姓名长度在3到5个字符\',\\n\\t\\t\\t\\t\\t\\t\\ttrigger: [\'change\', \'blur\'],\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t// 此为同步验证，可以直接返回true或者false，如果是异步验证，稍微不同，见下方说明\\n\\t\\t\\t\\t\\t\\t\\tvalidator: (rule, value, callback) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t// 调用uView自带的js验证规则，详见：https://www.uviewui.com/js/test.html\\n\\t\\t\\t\\t\\t\\t\\t\\treturn this.$u.test.chinese(value);\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\tmessage: \'姓名必须为中文\',\\n\\t\\t\\t\\t\\t\\t\\t// 触发器可以同时用blur和change，二者之间用英文逗号隔开\\n\\t\\t\\t\\t\\t\\t\\ttrigger: [\'change\', \'blur\'],\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tnumList: [{\\n\\t\\t\\t\\t\\tname: \'个人信息\'\\n\\t\\t\\t\\t}, {\\n\\t\\t\\t\\t\\tname: \'教育经历\'\\n\\t\\t\\t\\t}, {\\n\\t\\t\\t\\t\\tname: \'工作经历\'\\n\\t\\t\\t\\t}, {\\n\\t\\t\\t\\t\\tname: \'家庭成员\'\\n\\t\\t\\t\\t}, {\\n\\t\\t\\t\\t\\tname: \'确定入职\'\\n\\t\\t\\t\\t}],\\n\\t\\t\\t\\tshowjj: false,\\n\\t\\t\\t\\tspan: 4,\\n\\t\\t\\t\\toffset: 1,\\n\\t\\t\\t\\tjustify: \'start\',\\n\\t\\t\\t\\tregistered: [{\\n\\t\\t\\t\\t\\t\\tnature: \'农村户口\',\\n\\t\\t\\t\\t\\t\\tchecked: true,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tnature: \'城镇户口\',\\n\\t\\t\\t\\t\\t\\tchecked: false,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\toutlook: [{\\n\\t\\t\\t\\t\\t\\tout: \'党员\',\\n\\t\\t\\t\\t\\t\\tchecked: true,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tout: \'团员\',\\n\\t\\t\\t\\t\\t\\tchecked: false,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tout: \'群众\',\\n\\t\\t\\t\\t\\t\\tchecked: false,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tradioList: [{\\n\\t\\t\\t\\t\\t\\tsex: \'男\',\\n\\t\\t\\t\\t\\t\\tchecked: true,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tsex: \'女\',\\n\\t\\t\\t\\t\\t\\tchecked: false,\\n\\t\\t\\t\\t\\t\\tdisabled: false\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tactionSheetShow: false,\\n\\t\\t\\t\\tpickerShow: false,\\n\\t\\t\\t\\tshow: false,\\n\\t\\t\\t\\tselectShow: false,\\n\\t\\t\\t\\tnationShow: false,\\n\\t\\t\\t\\tradioCheckWidth: \'auto\',\\n\\t\\t\\t\\tradioCheckWrap: false,\\n\\t\\t\\t\\tlabelPosition: \'top\',\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\tonReady() {\\n\\t\\t\\tthis.$refs.uForm.setRules(this.rules);\\n\\t\\t},\\n\\t\\tcreated() {\\n\\t\\t\\tconsole.log(this.model.race);\\n\\t\\t},\\n\\t\\tonLoad() {\\n\\t\\n\\t\\t\\tthis.getToken()\\n\\t\\t},\\n\\t\\tmethods: {\\n\\t\\t\\tinfo() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tlet access_token = uni.getStorageSync(\'access_token\')\\n\\n\\t\\t\\t\\tuni.chooseImage({\\n\\t\\t\\t\\t\\tcount: 1, //默认9\\n\\t\\t\\t\\t\\tsizeType: [\'original\', \'compressed\'], //可以指定是原图还是压缩图，默认二者都有\\n\\t\\t\\t\\t\\tsourceType: [\'camera\', \'album\'], //从相册选择 或者拍照\\n\\t\\t\\t\\t\\tsuccess: function(res) {\\n\\n\\t\\t\\t\\t\\t\\tlet tempFilePaths = res.tempFilePaths[0]\\n\\t\\t\\t\\t\\t\\t// 图片转 base64\\n\\t\\t\\t\\t\\t\\tuni.getFileSystemManager().readFile({\\n\\t\\t\\t\\t\\t\\t\\tfilePath: tempFilePaths, //选择图片返回的相对路径  \\n\\t\\t\\t\\t\\t\\t\\tencoding: \'base64\', //编码格式  \\n\\t\\t\\t\\t\\t\\t\\tsuccess: v => { //成功的回调  \\n\\t\\t\\t\\t\\t\\t\\t\\tlet base64 = v\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.data // 返回的是没有 \'data:image/jpeg;base64,\'头的数据, 需要在页面显示图片可自行追加上  \\n\\t\\t\\t\\t\\t\\t\\t\\tthat.base64str = \'data:image/jpeg;base64,\' + base64\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// 开始识别\\n\\t\\t\\t\\t\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=\' +\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taccess_token,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\timage: base64,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid_card_side: \'front\' // 身份证 正反面  front：身份证含照片的一面  back：身份证带国徽的一面\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// console.log(res.data.words_result.住址.words)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.idNo = res.data.words_result.公民身份号码\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.hlocation = res.data.words_result.住址\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.race = res.data.words_result.民族\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat.model.gender = res.data.words_result.性别\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.words\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t})\\n\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\tgetToken() {\\n\\t\\t\\t\\tlet that = this\\n\\t\\t\\t\\tuni.request({\\n\\t\\t\\t\\t\\turl: \'https://aip.baidubce.com/oauth/2.0/token\',\\n\\t\\t\\t\\t\\tmethod: \'POST\',\\n\\t\\t\\t\\t\\tdata: {\\n\\t\\t\\t\\t\\t\\tgrant_type: \'client_credentials\',\\n\\t\\t\\t\\t\\t\\tclient_id: \'5tiRo6aR7rMao1Yee0KQenu1\', // 在百度智能云那边创建一个应用后可以获取\\n\\t\\t\\t\\t\\t\\tclient_secret: \'AYuuPNliAQaQIIa1OZ4Rftwxwz0VVcGy\' // 在百度智能云那边创建一个应用后可以获取\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\theader: {\\n\\t\\t\\t\\t\\t\\t\'Content-Type\': \'application/x-www-form-urlencoded\'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\tconsole.log(res.data)\\n\\t\\t\\t\\t\\t\\tuni.setStorageSync(\'access_token\', res.data.access_token)\\n\\t\\t\\t\\t\\t\\t// console.log(JSON.parse(res.data))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\ttest() {\\n\\t\\t\\t\\tthis.$u.post(\'/v1/reperson/create\', {\\n\\t\\t\\t\\t\\t\\\"cnName\\\": this.model.cnName,\\n\\t\\t\\t\\t\\t\\\"gender\\\": this.model.gender,\\n\\t\\t\\t\\t\\t\\\"hlocation\\\": this.model.hlocation,\\n\\t\\t\\t\\t\\t\\\"htype\\\": this.model.htype,\\n\\t\\t\\t\\t\\t\\\"idNo\\\": this.model.idNo,\\n\\t\\t\\t\\t\\t\\\"nplace\\\": this.model.nplace,\\n\\t\\t\\t\\t\\t\\\"pbirth\\\": this.model.pbirth,\\n\\t\\t\\t\\t\\t\\\"polity\\\": this.model.polity,\\n\\t\\t\\t\\t\\t\\\"race\\\": this.model.race,\\n\\n\\t\\t\\t\\t}).then(res => {\\n\\t\\t\\t\\t\\tconsole.log(res);\\n\\t\\t\\t\\t\\tuni.setStorage({\\n\\t\\t\\t\\t\\t\\tkey: \'empNo\',\\n\\t\\t\\t\\t\\t\\tdata: res.payload,\\n\\t\\t\\t\\t\\t\\tsuccess: res => {\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(res)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}).catch(err => {\\n\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tconsole.log(this.model.cnName)\\n\\t\\t\\t\\tconsole.log(this.model.gender)\\n\\t\\t\\t\\tconsole.log(this.model.hlocation)\\n\\t\\t\\t\\tconsole.log(this.model.htype)\\n\\t\\t\\t\\tconsole.log(this.model.idNo)\\n\\t\\t\\t\\tconsole.log(this.model.nplace)\\n\\t\\t\\t\\tconsole.log(this.model.pbirth)\\n\\t\\t\\t\\tconsole.log(this.model.polity)\\n\\t\\t\\t\\tconsole.log(this.model.race)\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tcccc(e) {\\n\\t\\t\\t\\tthis.model.nplace = e.province.label + \'-\' + e.city.label + \'-\' + e.area.label;\\n\\t\\t\\t},\\n\\t\\t\\tnativeP(e) {\\n\\t\\t\\t\\tthis.model.pbirth = e.province.label + \'-\' + e.city.label + \'-\' + e.area.label;\\n\\t\\t\\t},\\n\\t\\t\\t// 选择学历回调\\n\\t\\t\\tselectConfirm(e) {\\n\\t\\t\\t\\tthis.model.goodsType = \'\';\\n\\t\\t\\t\\te.map((val, index) => {\\n\\t\\t\\t\\t\\tthis.model.goodsType += this.model.goodsType == \'\' ? val.label : \'-\' + val.label;\\n\\t\\t\\t\\t})\\n\\t\\t\\t},\\n\\t\\t\\tnationConfirm(e) {\\n\\t\\t\\t\\tthis.model.race = \'\';\\n\\t\\t\\t\\te.map((val, index) => {\\n\\t\\t\\t\\t\\tthis.model.race += this.model.race == \'\' ? val.label : \'-\' + val.label;\\n\\t\\t\\t\\t})\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n</script>\\n\\n<style scoped lang=\\\"scss\\\">\\n\\t.wrap {\\n\\t\\tpadding: 30rpx;\\n\\t}\\n\\n\\t.row {\\n\\t\\tmargin-top: 35px;\\n\\t\\tmargin-left: 76px;\\n\\t}\\n</style>\\n```\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/fc5ceda372cd6eb0df497dd7ca7a985c.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/6ac70ac7162d0a89d032e9a1e3fd1f72.png)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/c2eb87d7902003ff9a1cc3174e1c6b18.png\",\"articleTitle\":\"uniapp 引入js 文件\",\"categoryName\":\"uniapp\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 22:06:27', NULL);
INSERT INTO `tb_operation_log` VALUES (1127, '文章模块', '删除', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.deleteArticles', '物理删除文章', '[[64,63,62,61,60,55,54]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-27 22:10:19', NULL);
INSERT INTO `tb_operation_log` VALUES (1128, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 这个是写入文章并上传\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传图片头像等\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 最后引入文章数据库\\n```Java\\nimport com.baomidou.mybatisplus.annotation.*;\\n\\nimport java.time.LocalDateTime;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/07/29\\n * @since 2020-05-18\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_article\\\")\\npublic class Article {\\n\\n    /**\\n     * id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 作者\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 文章分类\\n     */\\n    private Integer categoryId;\\n\\n    /**\\n     * 文章缩略图\\n     */\\n    private String articleCover;\\n\\n    /**\\n     * 标题\\n     */\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    private String articleContent;\\n\\n    /**\\n     * 文章类型\\n     */\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    private Integer isTop;\\n\\n    /**\\n     * 是否删除\\n     */\\n    private Integer isDelete;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    private Integer status;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n```\\n# 开始写入文件并上传、在Impl层中进行的\\n前期工作\\n```Java\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface ArticleDao extends BaseMapper<Article> {}\\n```\\nImpl层\\n```Java\\n\\n    @Override\\n    public List<String> exportArticles(List<Integer> articleIdList) {\\n        // 查询文章信息，获取文章列表，这个文章dao自己写\\n        List<Article> articleList = articleDao.selectList(new LambdaQueryWrapper<Article>()\\n                .select(Article::getArticleTitle, Article::getArticleContent)\\n                .in(Article::getId, articleIdList));\\n        // 写入文件并上传\\n        List<String> urlList = new ArrayList<>();\\n        for (Article article : articleList) {\\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\\n                urlList.add(url);\\n            } catch (Exception e) {\\n                log.error(StrUtil.format(\\\"导入文章失败,堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n                throw new BizException(\\\"导出文章失败\\\");\\n            }\\n        }\\n        return urlList;\\n    }\\n```\\n\\n\\n\\n\",\"articleCover\":\"\",\"articleTitle\":\"springBoot文件上传\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 14:10:11', NULL);
INSERT INTO `tb_operation_log` VALUES (1129, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 这个是写入文章并上传\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传图片头像等\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 最后引入文章数据库\\n```Java\\nimport com.baomidou.mybatisplus.annotation.*;\\n\\nimport java.time.LocalDateTime;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/07/29\\n * @since 2020-05-18\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_article\\\")\\npublic class Article {\\n\\n    /**\\n     * id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 作者\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 文章分类\\n     */\\n    private Integer categoryId;\\n\\n    /**\\n     * 文章缩略图\\n     */\\n    private String articleCover;\\n\\n    /**\\n     * 标题\\n     */\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    private String articleContent;\\n\\n    /**\\n     * 文章类型\\n     */\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    private Integer isTop;\\n\\n    /**\\n     * 是否删除\\n     */\\n    private Integer isDelete;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    private Integer status;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n```\\n# 开始写入文件并上传、在Impl层中进行的\\n前期工作\\n```Java\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface ArticleDao extends BaseMapper<Article> {}\\n```\\n\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg\",\"articleTitle\":\"springBoot文件上传\",\"id\":71,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 14:22:06', NULL);
INSERT INTO `tb_operation_log` VALUES (1130, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 这个是写入文章并上传\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传图片头像等\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 最后引入文章数据库\\n```Java\\nimport com.baomidou.mybatisplus.annotation.*;\\n\\nimport java.time.LocalDateTime;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/07/29\\n * @since 2020-05-18\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_article\\\")\\npublic class Article {\\n\\n    /**\\n     * id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 作者\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 文章分类\\n     */\\n    private Integer categoryId;\\n\\n    /**\\n     * 文章缩略图\\n     */\\n    private String articleCover;\\n\\n    /**\\n     * 标题\\n     */\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    private String articleContent;\\n\\n    /**\\n     * 文章类型\\n     */\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    private Integer isTop;\\n\\n    /**\\n     * 是否删除\\n     */\\n    private Integer isDelete;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    private Integer status;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n```\\n# 上传图片controller层\\n```Java\\n  /**\\n     * 上传说说图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 说说图片地址\\n     */\\n    @ApiOperation(value = \\\"上传说说图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"说说图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/talks/images\\\")\\n    public Result<String> saveTalkImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\\n    }\\n\\n\\n /**\\n     * 上传相册封面\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 相册封面地址\\n     */\\n    @ApiOperation(value = \\\"上传相册封面\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"相册封面\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/photos/albums/cover\\\")\\n    public Result<String> savePhotoAlbumCover(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\\n    }\\n\\n\\n  /**\\n     * 上传文章图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 文章图片地址\\n     */\\n    @ApiOperation(value = \\\"上传文章图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"文章图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/articles/images\\\")\\n    public Result<String> saveArticleImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\\n    }\\n```\\n# 编写前端进行上传\\n```JavaScript\\nexport default {\\n  TENCENT_CAPTCHA: \\\"2088053498\\\",\\n  UPLOAD_SIZE: 200 // 压缩文件大小\\n};\\n\\n```\\n\\n```html\\n        <el-form-item label=\\\"上传封面\\\">\\n          <el-upload\\n            class=\\\"upload-cover\\\"\\n            drag\\n            action=\\\"/api/admin/articles/images\\\"  // 这里调用后端接口\\n            multiple\\n            :before-upload=\\\"beforeUpload\\\"     //文件通过接口上传之前，一般用来判断规则\\n            :on-success=\\\"uploadCover\\\"\\n          >\\n            <i class=\\\"el-icon-upload\\\" v-if=\\\"article.articleCover == \'\'\\\" />\\n            <div class=\\\"el-upload__text\\\" v-if=\\\"article.articleCover == \'\'\\\">\\n              将文件拖到此处，或<em>点击上传</em>\\n            </div>\\n            <img\\n              v-else\\n              :src=\\\"article.articleCover\\\"\\n              width=\\\"360px\\\"\\n              height=\\\"180px\\\"\\n            />\\n          </el-upload>\\n        </el-form-item>\\n\\n\\n\\n<script>\\narticle:{\\narticleCover: \\\"\\\",\\n}\\n//压缩图片\\n    beforeUpload(file) {\\n      return new Promise(resolve => {\\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\\n          resolve(file);\\n        }\\n        // 压缩到200KB,这里的200就是要压缩的大小,可自定义\\n        imageConversion\\n          .compressAccurately(file, this.config.UPLOAD_SIZE)\\n          .then(res => {\\n            resolve(res);\\n          });\\n      });\\n    },\\n\\n   uploadCover(response) {\\n      this.article.articleCover = response.data;\\n    },\\n</script>\\n```\\n\\n**上传图片和发表文章是分开的，上传图片是存在oss阿里云存储桶里，而发表文章内容是存储在数据库里**\\n下面是发表文章\\n# 发表文章\\n1. 把文章需要显示给客户端看的属性创建VO类进行表示\\n```Java\\nimport io.swagger.annotations.ApiModel;\\nimport io.swagger.annotations.ApiModelProperty;\\nimport lombok.*;\\n\\nimport javax.validation.constraints.NotBlank;\\nimport java.util.List;\\n\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/03\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"文章\\\")\\npublic class ArticleVO {\\n\\n    /**\\n     * 文章id\\n     */\\n    @ApiModelProperty(name = \\\"id\\\", value = \\\"文章id\\\", dataType = \\\"Integer\\\")\\n    private Integer id;\\n\\n    /**\\n     * 标题\\n     */\\n    @NotBlank(message = \\\"文章标题不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleTitle\\\", value = \\\"文章标题\\\", required = true, dataType = \\\"String\\\")\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    @NotBlank(message = \\\"文章内容不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleContent\\\", value = \\\"文章内容\\\", required = true, dataType = \\\"String\\\")\\n    private String articleContent;\\n\\n    /**\\n     * 文章封面\\n     */\\n    @ApiModelProperty(name = \\\"articleCover\\\", value = \\\"文章缩略图\\\", dataType = \\\"String\\\")\\n    private String articleCover;\\n\\n    /**\\n     * 文章分类\\n     */\\n    @ApiModelProperty(name = \\\"category\\\", value = \\\"文章分类\\\", dataType = \\\"Integer\\\")\\n    private String categoryName;\\n\\n    /**\\n     * 文章标签\\n     */\\n    @ApiModelProperty(name = \\\"tagNameList\\\", value = \\\"文章标签\\\", dataType = \\\"List<Integer>\\\")\\n    private List<String> tagNameList;\\n\\n    /**\\n     * 文章类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"文章类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    @ApiModelProperty(name = \\\"originalUrl\\\", value = \\\"原文链接\\\", dataType = \\\"String\\\")\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    @ApiModelProperty(name = \\\"isTop\\\", value = \\\"是否置顶\\\", dataType = \\\"Integer\\\")\\n    private Integer isTop;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"文章状态\\\", dataType = \\\"String\\\")\\n    private Integer status;\\n\\n}\\n\\n```\\n2. 创建service层\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface ArticleService extends IService<Article> {\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     */\\n    void saveOrUpdateArticle(ArticleVO articleVO);\\n}\\n```\\n3. 创建Impl层进行业务逻辑编写\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Service\\n@Slf4j\\npublic class ArticleServiceImpl extends ServiceImpl<ArticleDao, Article> implements ArticleService {\\n @Transactional(rollbackFor = Exception.class)\\n    @Override\\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\\n        // 查询博客配置信息\\n        CompletableFuture<WebsiteConfigVO> webConfig = CompletableFuture.supplyAsync(() -> blogInfoService.getWebsiteConfig());\\n\\n        // 保存文章分类\\n        Category category = saveArticleCategory(articleVO);\\n        // 保存或修改文章\\n        Article article = BeanCopyUtils.copyObject(articleVO, Article.class);\\n        if (Objects.nonNull(category)) {\\n            article.setCategoryId(category.getId());\\n        }\\n        // 设定默认文章封面\\n        if (StrUtil.isBlank(article.getArticleCover())){\\n            try {\\n                article.setArticleCover(webConfig.get().getArticleCover());\\n            } catch (Exception e) {\\n                throw new BizException(\\\"设定默认文章封面失败\\\");\\n            }\\n        }\\n        article.setUserId(UserUtils.getLoginUser().getUserInfoId());\\n        this.saveOrUpdate(article);\\n        // 保存文章标签\\n        saveArticleTag(articleVO, article.getId());\\n    }\\n\\n    /**\\n     * 保存文章分类\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Category} 文章分类\\n     */\\n    private Category saveArticleCategory(ArticleVO articleVO) {\\n        // 判断分类是否存在\\n        Category category = categoryDao.selectOne(new LambdaQueryWrapper<Category>().eq(Category::getCategoryName, articleVO.getCategoryName()));\\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\\n            category = Category.builder().categoryName(articleVO.getCategoryName()).build();\\n            categoryDao.insert(category);\\n        }\\n        return category;\\n    }\\n\\n}\\n```\\n4. controller\\n```Java\\n\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n```\\n# 前端实现\\n```html\\n      <div slot=\\\"footer\\\">\\n        <el-button @click=\\\"addOrEdit = false\\\">取 消</el-button>\\n        <el-button type=\\\"danger\\\" @click=\\\"saveOrUpdateArticle\\\">\\n          发 表\\n        </el-button>\\n      </div>\\n\\n<script>\\nreturn{\\n  addOrEdit: false,\\n  article: {\\n        id: null,\\n        articleTitle: this.$moment(new Date()).format(\\\"YYYY-MM-DD\\\"),\\n        articleContent: \\\"\\\",\\n        articleCover: \\\"\\\",\\n        categoryName: null,\\n        tagNameList: [],\\n        originalUrl: \\\"\\\",\\n        isTop: 0,\\n        type: 1,\\n        status: 1\\n      }\\n},\\n saveOrUpdateArticle() {\\n      if (this.article.articleTitle.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章标题不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleContent.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章内容不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.categoryName == null) {\\n        this.$message.error(\\\"文章分类不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.tagNameList.length == 0) {\\n        this.$message.error(\\\"文章标签不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleCover.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章封面不能为空\\\");\\n        return false;\\n      }\\n      this.axios.post(\\\"/api/admin/articles\\\", this.article).then(({ data }) => {\\n        if (data.flag) {\\n          if (this.article.id === null) {\\n            this.$store.commit(\\\"removeTab\\\", \\\"发布文章\\\");\\n          } else {\\n            this.$store.commit(\\\"removeTab\\\", \\\"修改文章\\\");\\n          }\\n          sessionStorage.removeItem(\\\"article\\\");\\n          this.$router.push({ path: \\\"/article-list\\\" });\\n          this.$notify.success({\\n            title: \\\"成功\\\",\\n            message: data.message\\n          });\\n        } else {\\n          this.$notify.error({\\n            title: \\\"失败\\\",\\n            message: data.message\\n          });\\n        }\\n        this.addOrEdit = false;\\n      });\\n      //关闭自动保存功能\\n      this.autoSave = false;\\n    },\\n</script>\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg\",\"articleTitle\":\"springBoot文件上传导出\",\"id\":71,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 14:56:26', NULL);
INSERT INTO `tb_operation_log` VALUES (1131, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 导出文章用这个\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n## 导出文章\\n```Java\\n    @Override\\n    public List<String> exportArticles(List<Integer> articleIdList) {\\n        // 查询文章信息\\n        List<Article> articleList = articleDao.selectList(new LambdaQueryWrapper<Article>()\\n                .select(Article::getArticleTitle, Article::getArticleContent)\\n                .in(Article::getId, articleIdList));\\n        // 写入文件并上传\\n        List<String> urlList = new ArrayList<>();\\n        for (Article article : articleList) {\\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\\n                urlList.add(url);\\n            } catch (Exception e) {\\n                log.error(StrUtil.format(\\\"导出文章失败,堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n                throw new BizException(\\\"导出文章失败\\\");\\n            }\\n        }\\n        return urlList;\\n    }\\n```\\n\\n```Java\\n  /**\\n     * 导出文章\\n     *\\n     * @param articleIdList 文章id列表\\n     * @return {@link List<String>} 文件url列表\\n     */\\n    @ApiOperation(value = \\\"导出文章\\\")\\n    @ApiImplicitParam(name = \\\"articleIdList\\\", value = \\\"文章id\\\", required = true, dataType = \\\"List<Integer>\\\")\\n    @PostMapping(\\\"/admin/articles/export\\\")\\n    public Result<List<String>> exportArticles(@RequestBody List<Integer> articleIdList) {\\n        return Result.ok(articleService.exportArticles(articleIdList));\\n    }\\n```\\n## 导入文章\\n- 文章导入策略\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\n/**\\n * 文章导入策略\\n *\\n * @author ting\\n * @date 2022/07/28\\n */\\npublic interface ArticleImportStrategy {\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     */\\n    void importArticles(MultipartFile file);\\n}\\n\\n```\\n- Markdown文章类型枚举\\n分两种文章形式导入，第一种就是普通形式导入、第二种就是hexo形式导入\\n- - 第一种普通形式导入策略\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\n\\nimport com.minzheng.blog.vo.ArticleVO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Objects;\\n\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\n\\n/**\\n * 普通文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"normalArticleImportStrategyImpl\\\")\\npublic class NormalArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        // 获取文件名作为文章标题\\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\\\"\\\\\\\\.\\\")[0];\\n        // 获取文章内容\\n        StringBuilder articleContent = new StringBuilder();\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\\n            while (reader.ready()) {\\n                articleContent.append((char) reader.read());\\n            }\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入文章失败\\\");\\n        }\\n        // 保存文章\\n        ArticleVO articleVO = ArticleVO.builder()\\n                .articleTitle(articleTitle)\\n                .articleContent(articleContent.toString())\\n                .status(DRAFT.getStatus())\\n                .build();\\n        articleService.saveOrUpdateArticle(articleVO);\\n    }\\n}\\n\\n```\\n- - 第二种hexo形式导入\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport com.minzheng.blog.vo.HexoArticleVO;\\n\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.util.CollectionUtils;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\nimport java.time.LocalDateTime;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.concurrent.atomic.AtomicInteger;\\n\\nimport static com.minzheng.blog.constant.HexoConst.*;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.PUBLIC;\\nimport static com.minzheng.blog.enums.ArticleTypeEnum.ORIGINAL;\\n\\n/**\\n * Hexo文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"hexoArticleImportStrategyImpl\\\")\\npublic class HexoArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    /**\\n     * hexo最大分隔符数\\n     */\\n    private final int HEXO_MAX_DELIMITER_COUNT = 2;\\n\\n    /**\\n     * hexo最小分隔符数\\n     */\\n    private final int HEXO_MIN_DELIMITER_COUNT = 1;\\n\\n    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        try {\\n            HexoArticleVO hexoArticleVO = new HexoArticleVO();\\n            // 原创\\n            hexoArticleVO.setType(ORIGINAL.getType());\\n            // 公开 （DRAFT不保存分类）\\n            hexoArticleVO.setStatus(PUBLIC.getStatus());\\n\\n            AtomicInteger hexoDelimiterCount = new AtomicInteger();\\n            StringBuilder articleContent = new StringBuilder();\\n\\n            // 分类或标签标记\\n            AtomicInteger flag = new AtomicInteger(NORMAL_FLAG);\\n\\n            List<String> tagList = new ArrayList<>();\\n\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));\\n            reader.lines().forEach(line -> {\\n                if (hexoDelimiterCount.get() == HEXO_MAX_DELIMITER_COUNT) {\\n                    // 分隔符结束就是正文\\n                    articleContent.append(line).append(NEW_LINE);\\n                } else {\\n                    if (line.equals(DELIMITER)) {\\n                        hexoDelimiterCount.getAndIncrement();\\n                    }\\n                    if (hexoDelimiterCount.get() == HEXO_MIN_DELIMITER_COUNT) {\\n                        if (line.startsWith(TITLE_PREFIX)) {\\n                            hexoArticleVO.setArticleTitle(line.replace(TITLE_PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(DATE_PREFIX)) {\\n                            hexoArticleVO.setCreateTime(LocalDateTime.parse(line.replace(DATE_PREFIX, \\\"\\\").trim(), formatter));\\n                        } else if (line.startsWith(CATEGORIES_PREFIX)) {\\n                            flag.set(CATEGORY_FLAG);\\n                        } else if (line.startsWith(TAGS_PREFIX)) {\\n                            flag.set(TAG_FLAG);\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == CATEGORY_FLAG) {\\n                            hexoArticleVO.setCategoryName(line.replace(PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == TAG_FLAG) {\\n                            tagList.add(line.replace(PREFIX, \\\"\\\").trim());\\n                        }\\n                    }\\n                }\\n            });\\n\\n            hexoArticleVO.setTagNameList(tagList);\\n            hexoArticleVO.setArticleContent(articleContent.toString());\\n\\n            // 如果分类或标签为空则设为草稿\\n            if (CollectionUtils.isEmpty(hexoArticleVO.getTagNameList()) || StrUtil.isBlank(hexoArticleVO.getCategoryName())) {\\n                hexoArticleVO.setStatus(DRAFT.getStatus());\\n            }\\n\\n            articleService.saveOrUpdateArticle(hexoArticleVO);\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入Hexo文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入Hexo文章失败\\\");\\n        }\\n    }\\n\\n}\\n\\n```\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * Markdown文章类型枚举\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum MarkdownTypeEnum {\\n    /**\\n     * 普通文章\\n     */\\n    NORMAL(\\\"\\\", \\\"normalArticleImportStrategyImpl\\\"),\\n    /**\\n     * Hexo文章\\n     */\\n    HEXO(\\\"hexo\\\", \\\"hexoArticleImportStrategyImpl\\\");\\n\\n    /**\\n     * 类型\\n     */\\n    private final String type;\\n\\n    /**\\n     * 策略\\n     */\\n    private final String strategy;\\n\\n    public static String getMarkdownType(String name) {\\n        if (name == null) {\\n            return NORMAL.getStrategy();\\n        }\\n        for (MarkdownTypeEnum value : MarkdownTypeEnum.values()) {\\n            if (value.getType().equalsIgnoreCase(name)) {\\n                return value.getStrategy();\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\\n\\n-  文章导入策略上下文\\n```Java\\nimport com.minzheng.blog.enums.MarkdownTypeEnum;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.util.Map;\\n\\n/**\\n * 文章导入策略上下文\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Service\\npublic class ArticleImportStrategyContext {\\n    @Autowired\\n    private Map<String, ArticleImportStrategy> articleImportStrategyMap;\\n\\n    public void importArticles(MultipartFile file, String type) {\\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\\n    }\\n}\\n\\n```\\n- controller层 通过markdown形式进行导入文章\\n```Java\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     * @param type 文章类型\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"导入文章\\\")\\n    @PostMapping(\\\"/admin/articles/import\\\")\\n    public Result<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\\n        articleImportStrategyContext.importArticles(file, type);\\n        return Result.ok();\\n    }\\n```\\n\\n\\n\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传图片头像等\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 最后引入文章数据库\\n```Java\\nimport com.baomidou.mybatisplus.annotation.*;\\n\\nimport java.time.LocalDateTime;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/07/29\\n * @since 2020-05-18\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_article\\\")\\npublic class Article {\\n\\n    /**\\n     * id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 作者\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 文章分类\\n     */\\n    private Integer categoryId;\\n\\n    /**\\n     * 文章缩略图\\n     */\\n    private String articleCover;\\n\\n    /**\\n     * 标题\\n     */\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    private String articleContent;\\n\\n    /**\\n     * 文章类型\\n     */\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    private Integer isTop;\\n\\n    /**\\n     * 是否删除\\n     */\\n    private Integer isDelete;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    private Integer status;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n```\\n# 上传图片controller层\\n```Java\\n  /**\\n     * 上传说说图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 说说图片地址\\n     */\\n    @ApiOperation(value = \\\"上传说说图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"说说图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/talks/images\\\")\\n    public Result<String> saveTalkImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\\n    }\\n\\n\\n /**\\n     * 上传相册封面\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 相册封面地址\\n     */\\n    @ApiOperation(value = \\\"上传相册封面\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"相册封面\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/photos/albums/cover\\\")\\n    public Result<String> savePhotoAlbumCover(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\\n    }\\n\\n\\n  /**\\n     * 上传文章图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 文章图片地址\\n     */\\n    @ApiOperation(value = \\\"上传文章图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"文章图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/articles/images\\\")\\n    public Result<String> saveArticleImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\\n    }\\n```\\n# 编写前端进行上传\\n```JavaScript\\nexport default {\\n  TENCENT_CAPTCHA: \\\"2088053498\\\",\\n  UPLOAD_SIZE: 200 // 压缩文件大小\\n};\\n\\n```\\n\\n```html\\n        <el-form-item label=\\\"上传封面\\\">\\n          <el-upload\\n            class=\\\"upload-cover\\\"\\n            drag\\n            action=\\\"/api/admin/articles/images\\\"  // 这里调用后端接口\\n            multiple\\n            :before-upload=\\\"beforeUpload\\\"     //文件通过接口上传之前，一般用来判断规则\\n            :on-success=\\\"uploadCover\\\"\\n          >\\n            <i class=\\\"el-icon-upload\\\" v-if=\\\"article.articleCover == \'\'\\\" />\\n            <div class=\\\"el-upload__text\\\" v-if=\\\"article.articleCover == \'\'\\\">\\n              将文件拖到此处，或<em>点击上传</em>\\n            </div>\\n            <img\\n              v-else\\n              :src=\\\"article.articleCover\\\"\\n              width=\\\"360px\\\"\\n              height=\\\"180px\\\"\\n            />\\n          </el-upload>\\n        </el-form-item>\\n\\n\\n\\n<script>\\narticle:{\\narticleCover: \\\"\\\",\\n}\\n//压缩图片\\n    beforeUpload(file) {\\n      return new Promise(resolve => {\\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\\n          resolve(file);\\n        }\\n        // 压缩到200KB,这里的200就是要压缩的大小,可自定义\\n        imageConversion\\n          .compressAccurately(file, this.config.UPLOAD_SIZE)\\n          .then(res => {\\n            resolve(res);\\n          });\\n      });\\n    },\\n\\n   uploadCover(response) {\\n      this.article.articleCover = response.data;\\n    },\\n</script>\\n```\\n\\n**上传图片和发表文章是分开的，上传图片是存在oss阿里云存储桶里，而发表文章内容是存储在数据库里**\\n下面是发表文章\\n# 发表文章\\n1. 把文章需要显示给客户端看的属性创建VO类进行表示\\n```Java\\nimport io.swagger.annotations.ApiModel;\\nimport io.swagger.annotations.ApiModelProperty;\\nimport lombok.*;\\n\\nimport javax.validation.constraints.NotBlank;\\nimport java.util.List;\\n\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/03\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"文章\\\")\\npublic class ArticleVO {\\n\\n    /**\\n     * 文章id\\n     */\\n    @ApiModelProperty(name = \\\"id\\\", value = \\\"文章id\\\", dataType = \\\"Integer\\\")\\n    private Integer id;\\n\\n    /**\\n     * 标题\\n     */\\n    @NotBlank(message = \\\"文章标题不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleTitle\\\", value = \\\"文章标题\\\", required = true, dataType = \\\"String\\\")\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    @NotBlank(message = \\\"文章内容不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleContent\\\", value = \\\"文章内容\\\", required = true, dataType = \\\"String\\\")\\n    private String articleContent;\\n\\n    /**\\n     * 文章封面\\n     */\\n    @ApiModelProperty(name = \\\"articleCover\\\", value = \\\"文章缩略图\\\", dataType = \\\"String\\\")\\n    private String articleCover;\\n\\n    /**\\n     * 文章分类\\n     */\\n    @ApiModelProperty(name = \\\"category\\\", value = \\\"文章分类\\\", dataType = \\\"Integer\\\")\\n    private String categoryName;\\n\\n    /**\\n     * 文章标签\\n     */\\n    @ApiModelProperty(name = \\\"tagNameList\\\", value = \\\"文章标签\\\", dataType = \\\"List<Integer>\\\")\\n    private List<String> tagNameList;\\n\\n    /**\\n     * 文章类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"文章类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    @ApiModelProperty(name = \\\"originalUrl\\\", value = \\\"原文链接\\\", dataType = \\\"String\\\")\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    @ApiModelProperty(name = \\\"isTop\\\", value = \\\"是否置顶\\\", dataType = \\\"Integer\\\")\\n    private Integer isTop;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"文章状态\\\", dataType = \\\"String\\\")\\n    private Integer status;\\n\\n}\\n\\n```\\n2. 创建service层\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface ArticleService extends IService<Article> {\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     */\\n    void saveOrUpdateArticle(ArticleVO articleVO);\\n}\\n```\\n3. 创建Impl层进行业务逻辑编写\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Service\\n@Slf4j\\npublic class ArticleServiceImpl extends ServiceImpl<ArticleDao, Article> implements ArticleService {\\n @Transactional(rollbackFor = Exception.class)\\n    @Override\\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\\n        // 查询博客配置信息\\n        CompletableFuture<WebsiteConfigVO> webConfig = CompletableFuture.supplyAsync(() -> blogInfoService.getWebsiteConfig());\\n\\n        // 保存文章分类\\n        Category category = saveArticleCategory(articleVO);\\n        // 保存或修改文章\\n        Article article = BeanCopyUtils.copyObject(articleVO, Article.class);\\n        if (Objects.nonNull(category)) {\\n            article.setCategoryId(category.getId());\\n        }\\n        // 设定默认文章封面\\n        if (StrUtil.isBlank(article.getArticleCover())){\\n            try {\\n                article.setArticleCover(webConfig.get().getArticleCover());\\n            } catch (Exception e) {\\n                throw new BizException(\\\"设定默认文章封面失败\\\");\\n            }\\n        }\\n        article.setUserId(UserUtils.getLoginUser().getUserInfoId());\\n        this.saveOrUpdate(article);\\n        // 保存文章标签\\n        saveArticleTag(articleVO, article.getId());\\n    }\\n\\n    /**\\n     * 保存文章分类\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Category} 文章分类\\n     */\\n    private Category saveArticleCategory(ArticleVO articleVO) {\\n        // 判断分类是否存在\\n        Category category = categoryDao.selectOne(new LambdaQueryWrapper<Category>().eq(Category::getCategoryName, articleVO.getCategoryName()));\\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\\n            category = Category.builder().categoryName(articleVO.getCategoryName()).build();\\n            categoryDao.insert(category);\\n        }\\n        return category;\\n    }\\n\\n}\\n```\\n4. controller\\n```Java\\n\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n```\\n# 前端实现\\n```html\\n      <div slot=\\\"footer\\\">\\n        <el-button @click=\\\"addOrEdit = false\\\">取 消</el-button>\\n        <el-button type=\\\"danger\\\" @click=\\\"saveOrUpdateArticle\\\">\\n          发 表\\n        </el-button>\\n      </div>\\n\\n<script>\\nreturn{\\n  addOrEdit: false,\\n  article: {\\n        id: null,\\n        articleTitle: this.$moment(new Date()).format(\\\"YYYY-MM-DD\\\"),\\n        articleContent: \\\"\\\",\\n        articleCover: \\\"\\\",\\n        categoryName: null,\\n        tagNameList: [],\\n        originalUrl: \\\"\\\",\\n        isTop: 0,\\n        type: 1,\\n        status: 1\\n      }\\n},\\n saveOrUpdateArticle() {\\n      if (this.article.articleTitle.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章标题不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleContent.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章内容不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.categoryName == null) {\\n        this.$message.error(\\\"文章分类不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.tagNameList.length == 0) {\\n        this.$message.error(\\\"文章标签不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleCover.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章封面不能为空\\\");\\n        return false;\\n      }\\n      this.axios.post(\\\"/api/admin/articles\\\", this.article).then(({ data }) => {\\n        if (data.flag) {\\n          if (this.article.id === null) {\\n            this.$store.commit(\\\"removeTab\\\", \\\"发布文章\\\");\\n          } else {\\n            this.$store.commit(\\\"removeTab\\\", \\\"修改文章\\\");\\n          }\\n          sessionStorage.removeItem(\\\"article\\\");\\n          this.$router.push({ path: \\\"/article-list\\\" });\\n          this.$notify.success({\\n            title: \\\"成功\\\",\\n            message: data.message\\n          });\\n        } else {\\n          this.$notify.error({\\n            title: \\\"失败\\\",\\n            message: data.message\\n          });\\n        }\\n        this.addOrEdit = false;\\n      });\\n      //关闭自动保存功能\\n      this.autoSave = false;\\n    },\\n</script>\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg\",\"articleTitle\":\"springBoot文件上传导出\",\"categoryName\":\"前后端开发经验\",\"id\":71,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 15:10:20', NULL);
INSERT INTO `tb_operation_log` VALUES (1132, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 导出文章用这个\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n## 导出文章\\n```Java\\n    @Override\\n    public List<String> exportArticles(List<Integer> articleIdList) {\\n        // 查询文章信息\\n        List<Article> articleList = articleDao.selectList(new LambdaQueryWrapper<Article>()\\n                .select(Article::getArticleTitle, Article::getArticleContent)\\n                .in(Article::getId, articleIdList));\\n        // 写入文件并上传\\n        List<String> urlList = new ArrayList<>();\\n        for (Article article : articleList) {\\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\\n                urlList.add(url);\\n            } catch (Exception e) {\\n                log.error(StrUtil.format(\\\"导出文章失败,堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n                throw new BizException(\\\"导出文章失败\\\");\\n            }\\n        }\\n        return urlList;\\n    }\\n```\\n\\n```Java\\n  /**\\n     * 导出文章\\n     *\\n     * @param articleIdList 文章id列表\\n     * @return {@link List<String>} 文件url列表\\n     */\\n    @ApiOperation(value = \\\"导出文章\\\")\\n    @ApiImplicitParam(name = \\\"articleIdList\\\", value = \\\"文章id\\\", required = true, dataType = \\\"List<Integer>\\\")\\n    @PostMapping(\\\"/admin/articles/export\\\")\\n    public Result<List<String>> exportArticles(@RequestBody List<Integer> articleIdList) {\\n        return Result.ok(articleService.exportArticles(articleIdList));\\n    }\\n```\\n## 导入文章\\n- 文章导入策略\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\n/**\\n * 文章导入策略\\n *\\n * @author ting\\n * @date 2022/07/28\\n */\\npublic interface ArticleImportStrategy {\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     */\\n    void importArticles(MultipartFile file);\\n}\\n\\n```\\n- Markdown文章类型枚举\\n分两种文章形式导入，第一种就是普通形式导入、第二种就是hexo形式导入\\n- - 第一种普通形式导入策略\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\n\\nimport com.minzheng.blog.vo.ArticleVO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Objects;\\n\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\n\\n/**\\n * 普通文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"normalArticleImportStrategyImpl\\\")\\npublic class NormalArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        // 获取文件名作为文章标题\\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\\\"\\\\\\\\.\\\")[0];\\n        // 获取文章内容\\n        StringBuilder articleContent = new StringBuilder();\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\\n            while (reader.ready()) {\\n                articleContent.append((char) reader.read());\\n            }\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入文章失败\\\");\\n        }\\n        // 保存文章\\n        ArticleVO articleVO = ArticleVO.builder()\\n                .articleTitle(articleTitle)\\n                .articleContent(articleContent.toString())\\n                .status(DRAFT.getStatus())\\n                .build();\\n        articleService.saveOrUpdateArticle(articleVO);\\n    }\\n}\\n\\n```\\n- - 第二种hexo形式导入\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport com.minzheng.blog.vo.HexoArticleVO;\\n\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.util.CollectionUtils;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\nimport java.time.LocalDateTime;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.concurrent.atomic.AtomicInteger;\\n\\nimport static com.minzheng.blog.constant.HexoConst.*;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.PUBLIC;\\nimport static com.minzheng.blog.enums.ArticleTypeEnum.ORIGINAL;\\n\\n/**\\n * Hexo文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"hexoArticleImportStrategyImpl\\\")\\npublic class HexoArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    /**\\n     * hexo最大分隔符数\\n     */\\n    private final int HEXO_MAX_DELIMITER_COUNT = 2;\\n\\n    /**\\n     * hexo最小分隔符数\\n     */\\n    private final int HEXO_MIN_DELIMITER_COUNT = 1;\\n\\n    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        try {\\n            HexoArticleVO hexoArticleVO = new HexoArticleVO();\\n            // 原创\\n            hexoArticleVO.setType(ORIGINAL.getType());\\n            // 公开 （DRAFT不保存分类）\\n            hexoArticleVO.setStatus(PUBLIC.getStatus());\\n\\n            AtomicInteger hexoDelimiterCount = new AtomicInteger();\\n            StringBuilder articleContent = new StringBuilder();\\n\\n            // 分类或标签标记\\n            AtomicInteger flag = new AtomicInteger(NORMAL_FLAG);\\n\\n            List<String> tagList = new ArrayList<>();\\n\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));\\n            reader.lines().forEach(line -> {\\n                if (hexoDelimiterCount.get() == HEXO_MAX_DELIMITER_COUNT) {\\n                    // 分隔符结束就是正文\\n                    articleContent.append(line).append(NEW_LINE);\\n                } else {\\n                    if (line.equals(DELIMITER)) {\\n                        hexoDelimiterCount.getAndIncrement();\\n                    }\\n                    if (hexoDelimiterCount.get() == HEXO_MIN_DELIMITER_COUNT) {\\n                        if (line.startsWith(TITLE_PREFIX)) {\\n                            hexoArticleVO.setArticleTitle(line.replace(TITLE_PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(DATE_PREFIX)) {\\n                            hexoArticleVO.setCreateTime(LocalDateTime.parse(line.replace(DATE_PREFIX, \\\"\\\").trim(), formatter));\\n                        } else if (line.startsWith(CATEGORIES_PREFIX)) {\\n                            flag.set(CATEGORY_FLAG);\\n                        } else if (line.startsWith(TAGS_PREFIX)) {\\n                            flag.set(TAG_FLAG);\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == CATEGORY_FLAG) {\\n                            hexoArticleVO.setCategoryName(line.replace(PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == TAG_FLAG) {\\n                            tagList.add(line.replace(PREFIX, \\\"\\\").trim());\\n                        }\\n                    }\\n                }\\n            });\\n\\n            hexoArticleVO.setTagNameList(tagList);\\n            hexoArticleVO.setArticleContent(articleContent.toString());\\n\\n            // 如果分类或标签为空则设为草稿\\n            if (CollectionUtils.isEmpty(hexoArticleVO.getTagNameList()) || StrUtil.isBlank(hexoArticleVO.getCategoryName())) {\\n                hexoArticleVO.setStatus(DRAFT.getStatus());\\n            }\\n\\n            articleService.saveOrUpdateArticle(hexoArticleVO);\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入Hexo文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入Hexo文章失败\\\");\\n        }\\n    }\\n\\n}\\n\\n```\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * Markdown文章类型枚举\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum MarkdownTypeEnum {\\n    /**\\n     * 普通文章\\n     */\\n    NORMAL(\\\"\\\", \\\"normalArticleImportStrategyImpl\\\"),\\n    /**\\n     * Hexo文章\\n     */\\n    HEXO(\\\"hexo\\\", \\\"hexoArticleImportStrategyImpl\\\");\\n\\n    /**\\n     * 类型\\n     */\\n    private final String type;\\n\\n    /**\\n     * 策略\\n     */\\n    private final String strategy;\\n\\n    public static String getMarkdownType(String name) {\\n        if (name == null) {\\n            return NORMAL.getStrategy();\\n        }\\n        for (MarkdownTypeEnum value : MarkdownTypeEnum.values()) {\\n            if (value.getType().equalsIgnoreCase(name)) {\\n                return value.getStrategy();\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\\n\\n-  文章导入策略上下文\\n```Java\\nimport com.minzheng.blog.enums.MarkdownTypeEnum;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.util.Map;\\n\\n/**\\n * 文章导入策略上下文\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Service\\npublic class ArticleImportStrategyContext {\\n    @Autowired\\n    private Map<String, ArticleImportStrategy> articleImportStrategyMap;\\n\\n    public void importArticles(MultipartFile file, String type) {\\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\\n    }\\n}\\n\\n```\\n- controller层 通过markdown形式进行导入文章\\n```Java\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     * @param type 文章类型\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"导入文章\\\")\\n    @PostMapping(\\\"/admin/articles/import\\\")\\n    public Result<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\\n        articleImportStrategyContext.importArticles(file, type);\\n        return Result.ok();\\n    }\\n```\\n\\n\\n\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传图片头像等\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 最后引入文章数据库\\n```Java\\nimport com.baomidou.mybatisplus.annotation.*;\\n\\nimport java.time.LocalDateTime;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/07/29\\n * @since 2020-05-18\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_article\\\")\\npublic class Article {\\n\\n    /**\\n     * id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 作者\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 文章分类\\n     */\\n    private Integer categoryId;\\n\\n    /**\\n     * 文章缩略图\\n     */\\n    private String articleCover;\\n\\n    /**\\n     * 标题\\n     */\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    private String articleContent;\\n\\n    /**\\n     * 文章类型\\n     */\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    private Integer isTop;\\n\\n    /**\\n     * 是否删除\\n     */\\n    private Integer isDelete;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    private Integer status;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n```\\n# 上传图片controller层\\n```Java\\n  /**\\n     * 上传说说图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 说说图片地址\\n     */\\n    @ApiOperation(value = \\\"上传说说图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"说说图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/talks/images\\\")\\n    public Result<String> saveTalkImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\\n    }\\n\\n\\n /**\\n     * 上传相册封面\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 相册封面地址\\n     */\\n    @ApiOperation(value = \\\"上传相册封面\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"相册封面\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/photos/albums/cover\\\")\\n    public Result<String> savePhotoAlbumCover(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\\n    }\\n\\n\\n  /**\\n     * 上传文章图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 文章图片地址\\n     */\\n    @ApiOperation(value = \\\"上传文章图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"文章图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/articles/images\\\")\\n    public Result<String> saveArticleImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\\n    }\\n```\\n# 编写前端进行上传\\n```JavaScript\\nexport default {\\n  TENCENT_CAPTCHA: \\\"2088053498\\\",\\n  UPLOAD_SIZE: 200 // 压缩文件大小\\n};\\n\\n```\\n\\n```html\\n        <el-form-item label=\\\"上传封面\\\">\\n          <el-upload\\n            class=\\\"upload-cover\\\"\\n            drag\\n            action=\\\"/api/admin/articles/images\\\"  // 这里调用后端接口\\n            multiple\\n            :before-upload=\\\"beforeUpload\\\"     //文件通过接口上传之前，一般用来判断规则\\n            :on-success=\\\"uploadCover\\\"\\n          >\\n            <i class=\\\"el-icon-upload\\\" v-if=\\\"article.articleCover == \'\'\\\" />\\n            <div class=\\\"el-upload__text\\\" v-if=\\\"article.articleCover == \'\'\\\">\\n              将文件拖到此处，或<em>点击上传</em>\\n            </div>\\n            <img\\n              v-else\\n              :src=\\\"article.articleCover\\\"\\n              width=\\\"360px\\\"\\n              height=\\\"180px\\\"\\n            />\\n          </el-upload>\\n        </el-form-item>\\n\\n\\n\\n<script>\\narticle:{\\narticleCover: \\\"\\\",\\n}\\n//压缩图片\\n    beforeUpload(file) {\\n      return new Promise(resolve => {\\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\\n          resolve(file);\\n        }\\n        // 压缩到200KB,这里的200就是要压缩的大小,可自定义\\n        imageConversion\\n          .compressAccurately(file, this.config.UPLOAD_SIZE)\\n          .then(res => {\\n            resolve(res);\\n          });\\n      });\\n    },\\n\\n   uploadCover(response) {\\n      this.article.articleCover = response.data;\\n    },\\n</script>\\n```\\n\\n**上传图片和发表文章是分开的，上传图片是存在oss阿里云存储桶里，而发表文章内容是存储在数据库里**\\n下面是发表文章\\n# 发表文章\\n1. 把文章需要显示给客户端看的属性创建VO类进行表示\\n```Java\\nimport io.swagger.annotations.ApiModel;\\nimport io.swagger.annotations.ApiModelProperty;\\nimport lombok.*;\\n\\nimport javax.validation.constraints.NotBlank;\\nimport java.util.List;\\n\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/03\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"文章\\\")\\npublic class ArticleVO {\\n\\n    /**\\n     * 文章id\\n     */\\n    @ApiModelProperty(name = \\\"id\\\", value = \\\"文章id\\\", dataType = \\\"Integer\\\")\\n    private Integer id;\\n\\n    /**\\n     * 标题\\n     */\\n    @NotBlank(message = \\\"文章标题不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleTitle\\\", value = \\\"文章标题\\\", required = true, dataType = \\\"String\\\")\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    @NotBlank(message = \\\"文章内容不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleContent\\\", value = \\\"文章内容\\\", required = true, dataType = \\\"String\\\")\\n    private String articleContent;\\n\\n    /**\\n     * 文章封面\\n     */\\n    @ApiModelProperty(name = \\\"articleCover\\\", value = \\\"文章缩略图\\\", dataType = \\\"String\\\")\\n    private String articleCover;\\n\\n    /**\\n     * 文章分类\\n     */\\n    @ApiModelProperty(name = \\\"category\\\", value = \\\"文章分类\\\", dataType = \\\"Integer\\\")\\n    private String categoryName;\\n\\n    /**\\n     * 文章标签\\n     */\\n    @ApiModelProperty(name = \\\"tagNameList\\\", value = \\\"文章标签\\\", dataType = \\\"List<Integer>\\\")\\n    private List<String> tagNameList;\\n\\n    /**\\n     * 文章类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"文章类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    @ApiModelProperty(name = \\\"originalUrl\\\", value = \\\"原文链接\\\", dataType = \\\"String\\\")\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    @ApiModelProperty(name = \\\"isTop\\\", value = \\\"是否置顶\\\", dataType = \\\"Integer\\\")\\n    private Integer isTop;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"文章状态\\\", dataType = \\\"String\\\")\\n    private Integer status;\\n\\n}\\n\\n```\\n2. 创建service层\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface ArticleService extends IService<Article> {\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     */\\n    void saveOrUpdateArticle(ArticleVO articleVO);\\n}\\n```\\n3. 创建Impl层进行业务逻辑编写\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Service\\n@Slf4j\\npublic class ArticleServiceImpl extends ServiceImpl<ArticleDao, Article> implements ArticleService {\\n @Transactional(rollbackFor = Exception.class)\\n    @Override\\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\\n        // 查询博客配置信息\\n        CompletableFuture<WebsiteConfigVO> webConfig = CompletableFuture.supplyAsync(() -> blogInfoService.getWebsiteConfig());\\n\\n        // 保存文章分类\\n        Category category = saveArticleCategory(articleVO);\\n        // 保存或修改文章\\n        Article article = BeanCopyUtils.copyObject(articleVO, Article.class);\\n        if (Objects.nonNull(category)) {\\n            article.setCategoryId(category.getId());\\n        }\\n        // 设定默认文章封面\\n        if (StrUtil.isBlank(article.getArticleCover())){\\n            try {\\n                article.setArticleCover(webConfig.get().getArticleCover());\\n            } catch (Exception e) {\\n                throw new BizException(\\\"设定默认文章封面失败\\\");\\n            }\\n        }\\n        article.setUserId(UserUtils.getLoginUser().getUserInfoId());\\n        this.saveOrUpdate(article);\\n        // 保存文章标签\\n        saveArticleTag(articleVO, article.getId());\\n    }\\n\\n    /**\\n     * 保存文章分类\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Category} 文章分类\\n     */\\n    private Category saveArticleCategory(ArticleVO articleVO) {\\n        // 判断分类是否存在\\n        Category category = categoryDao.selectOne(new LambdaQueryWrapper<Category>().eq(Category::getCategoryName, articleVO.getCategoryName()));\\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\\n            category = Category.builder().categoryName(articleVO.getCategoryName()).build();\\n            categoryDao.insert(category);\\n        }\\n        return category;\\n    }\\n\\n}\\n```\\n4. controller\\n```Java\\n\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n```\\n# 前端实现\\n```html\\n      <div slot=\\\"footer\\\">\\n        <el-button @click=\\\"addOrEdit = false\\\">取 消</el-button>\\n        <el-button type=\\\"danger\\\" @click=\\\"saveOrUpdateArticle\\\">\\n          发 表\\n        </el-button>\\n      </div>\\n\\n<script>\\nreturn{\\n  addOrEdit: false,\\n  article: {\\n        id: null,\\n        articleTitle: this.$moment(new Date()).format(\\\"YYYY-MM-DD\\\"),\\n        articleContent: \\\"\\\",\\n        articleCover: \\\"\\\",\\n        categoryName: null,\\n        tagNameList: [],\\n        originalUrl: \\\"\\\",\\n        isTop: 0,\\n        type: 1,\\n        status: 1\\n      }\\n},\\n saveOrUpdateArticle() {\\n      if (this.article.articleTitle.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章标题不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleContent.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章内容不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.categoryName == null) {\\n        this.$message.error(\\\"文章分类不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.tagNameList.length == 0) {\\n        this.$message.error(\\\"文章标签不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleCover.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章封面不能为空\\\");\\n        return false;\\n      }\\n      this.axios.post(\\\"/api/admin/articles\\\", this.article).then(({ data }) => {\\n        if (data.flag) {\\n          if (this.article.id === null) {\\n            this.$store.commit(\\\"removeTab\\\", \\\"发布文章\\\");\\n          } else {\\n            this.$store.commit(\\\"removeTab\\\", \\\"修改文章\\\");\\n          }\\n          sessionStorage.removeItem(\\\"article\\\");\\n          this.$router.push({ path: \\\"/article-list\\\" });\\n          this.$notify.success({\\n            title: \\\"成功\\\",\\n            message: data.message\\n          });\\n        } else {\\n          this.$notify.error({\\n            title: \\\"失败\\\",\\n            message: data.message\\n          });\\n        }\\n        this.addOrEdit = false;\\n      });\\n      //关闭自动保存功能\\n      this.autoSave = false;\\n    },\\n</script>\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg\",\"articleTitle\":\"springBoot文件上传导出\",\"categoryName\":\"前后端开发经验\",\"id\":71,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 15:10:49', NULL);
INSERT INTO `tb_operation_log` VALUES (1133, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 导包 这里使用阿里云OSS存储桶\\n```xml\\n  <!-- 阿里云oss-->\\n        <dependency>\\n            <groupId>com.aliyun.oss</groupId>\\n            <artifactId>aliyun-sdk-oss</artifactId>\\n            <version>3.8.0</version>\\n        </dependency>\\n```\\n\\n# 配置yml\\n```yml\\n  # 上传图片大小限制\\n  servlet:\\n    multipart:\\n      max-file-size: 100MB\\n      max-request-size:  100MB\\n\\n# 上传模式 可选 oss或local  （http://和最后的/一定不能去！！！）\\n# 这里采用阿里云存储桶进行存储文件图片等。\\nupload:\\n  mode: oss\\n  local:\\n    # nginx映射本地文件路径，无域名则为 ip:83\\n    url: http://你的文件上传子域名/\\n    # 本地文件存储路径\\n    path: /usr/local/upload/\\n  oss:\\n    url: http://blog-felix.oss-cn-beijing.aliyuncs.com/  # 外网访问域名\\n    endpoint: oss-cn-beijing.aliyuncs.com        # 阿里云固定\\n    accessKeyId: LTAI5tHmZ47AR1CgaGR8fi4z\\n    accessKeySecret: ulJIX3GYn9SjUrDc2g971DqJEI6L0q\\n    bucketName: blog-felix                       # 存储桶名称\\n  cos:\\n    url: http://Bucket域名/\\n    secretId: cos的secretId\\n    secretKey: cos的secretKey\\n    region: cos的region\\n    bucketName: cos的bucketName\\n\\n```\\n\\n# 上传策略，需要用什么模式(yml文件配置的OSS、COS等)进行上传，需要进行实现\\n# 上传策略，可以分两种\\n1. 第一种就是上传图片头像等\\n2. 第二种就是上传文章\\n```Java\\n\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * 上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\npublic interface UploadStrategy {\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param file 文件\\n     * @param path 上传路径\\n     * @return {@link String} 文件地址\\n     */\\n    String uploadFile(MultipartFile file, String path);\\n\\n    /**\\n     * 上传文件\\n     *\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String}\\n     */\\n    String uploadFile(String fileName, InputStream inputStream, String path);\\n\\n}\\n```\\n\\n1. 搜索策略\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 上传模式枚举\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum UploadModeEnum {\\n    /**\\n     * oss\\n     */\\n    OSS(\\\"oss\\\", \\\"ossUploadStrategyImpl\\\"),\\n    /**\\n     * 本地\\n     */\\n    LOCAL(\\\"local\\\", \\\"localUploadStrategyImpl\\\"),\\n\\n    /**\\n     * cos\\n     */\\n    COS(\\\"cos\\\", \\\"cosUploadStrategyImpl\\\");\\n\\n    /**\\n     * 模式\\n     */\\n    private final String mode;\\n\\n    /**\\n     * 策略\\n     */\\n    private final String strategy;\\n\\n    /**\\n     * 获取策略\\n     *\\n     * @param mode 模式\\n     * @return {@link String} 搜索策略\\n     */\\n    public static String getStrategy(String mode) {\\n        for (UploadModeEnum value : UploadModeEnum.values()) {\\n            if (value.getMode().equals(mode)) {\\n                return value.getStrategy();\\n            }\\n        }\\n        return null;\\n    }\\n\\n}\\n\\n```\\n2. OSS的一些前期操作\\n- OSS配置属性\\n```Java\\nimport lombok.Data;\\nimport org.springframework.boot.context.properties.ConfigurationProperties;\\nimport org.springframework.context.annotation.Configuration;\\n\\n/**\\n * oss配置属性\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Data\\n@Configuration\\n@ConfigurationProperties(prefix = \\\"upload.oss\\\")\\npublic class OssConfigProperties {\\n\\n    /**\\n     * oss域名\\n     */\\n    private String url;\\n\\n    /**\\n     * 终点\\n     */\\n    private String endpoint;\\n\\n    /**\\n     * 访问密钥id\\n     */\\n    private String accessKeyId;\\n\\n    /**\\n     * 访问密钥密码\\n     */\\n    private String accessKeySecret;\\n\\n    /**\\n     * bucket名称\\n     */\\n    private String bucketName;\\n\\n}\\n\\n```\\n- 抽象上传模板\\n```Java\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport com.minzheng.blog.util.FileUtils;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.*;\\n\\n/**\\n * 抽象上传模板\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic abstract class AbstractUploadStrategyImpl implements UploadStrategy {\\n\\n    @Override\\n    public String uploadFile(MultipartFile file, String path) {\\n        try {\\n            // 获取文件md5值\\n            String md5 = FileUtils.getMd5(file.getInputStream());\\n            // 获取文件扩展名\\n            String extName = FileUtils.getExtName(file.getOriginalFilename());\\n            // 重新生成文件名\\n            String fileName = md5 + extName;\\n            // 判断文件是否已存在\\n            if (!exists(path + fileName)) {\\n                // 不存在则继续上传\\n                upload(path, fileName, file.getInputStream());\\n            }\\n            // 返回文件访问路径\\n            return getFileAccessUrl(path + fileName);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            throw new BizException(\\\"文件上传失败\\\");\\n        }\\n    }\\n\\n    @Override\\n    public String uploadFile(String fileName, InputStream inputStream, String path) {\\n        try {\\n            // 上传文件\\n            upload(path, fileName, inputStream);\\n            // 返回文件访问路径\\n            return getFileAccessUrl(path + fileName);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            throw new BizException(\\\"文件上传失败\\\");\\n        }\\n    }\\n\\n    /**\\n     * 判断文件是否存在\\n     *\\n     * @param filePath 文件路径\\n     * @return {@link Boolean}\\n     */\\n    public abstract Boolean exists(String filePath);\\n\\n    /**\\n     * 上传\\n     *\\n     * @param path        路径\\n     * @param fileName    文件名\\n     * @param inputStream 输入流\\n     * @throws IOException io异常\\n     */\\n    public abstract void upload(String path, String fileName, InputStream inputStream) throws IOException;\\n\\n    /**\\n     * 获取文件访问url\\n     *\\n     * @param filePath 文件路径\\n     * @return {@link String}\\n     */\\n    public abstract String getFileAccessUrl(String filePath);\\n\\n}\\n\\n```\\n\\n- OSS上传策略\\n```Java\\nimport com.aliyun.oss.OSS;\\nimport com.aliyun.oss.OSSClientBuilder;\\nimport com.minzheng.blog.config.OssConfigProperties;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\n\\nimport java.io.InputStream;\\n\\n/**\\n * oss上传策略\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service(\\\"ossUploadStrategyImpl\\\")\\npublic class OssUploadStrategyImpl extends AbstractUploadStrategyImpl {\\n    @Autowired\\n    private OssConfigProperties ossConfigProperties;\\n\\n    @Override\\n    public Boolean exists(String filePath) {\\n        return getOssClient().doesObjectExist(ossConfigProperties.getBucketName(), filePath);\\n    }\\n\\n    @Override\\n    public void upload(String path, String fileName, InputStream inputStream) {\\n        getOssClient().putObject(ossConfigProperties.getBucketName(), path + fileName, inputStream);\\n    }\\n\\n    @Override\\n    public String getFileAccessUrl(String filePath) {\\n        return ossConfigProperties.getUrl() + filePath;\\n    }\\n\\n    /**\\n     * 获取ossClient\\n     *\\n     * @return {@link OSS} ossClient\\n     */\\n    private OSS getOssClient() {\\n        return new OSSClientBuilder().build(ossConfigProperties.getEndpoint(), ossConfigProperties.getAccessKeyId(), ossConfigProperties.getAccessKeySecret());\\n    }\\n\\n}\\n\\n```\\n\\n```Java\\nimport com.minzheng.blog.strategy.UploadStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.InputStream;\\nimport java.util.Map;\\n\\nimport static com.minzheng.blog.enums.UploadModeEnum.getStrategy;\\n\\n\\n/**\\n * 上传策略上下文\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Service\\npublic class UploadStrategyContext {\\n    /**\\n     * 上传模式\\n     */\\n    @Value(\\\"${upload.mode}\\\")\\n    private String uploadMode;\\n\\n    @Autowired\\n    private Map<String, UploadStrategy> uploadStrategyMap;\\n\\n    /**\\n     * 执行上传策略\\n     * 上传图片(头像等)\\n     * @param file 文件\\n     * @param path 路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(MultipartFile file, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\\n    }\\n\\n\\n    /**\\n     * 执行上传策略\\n     * 导出文章用这个\\n     * @param fileName    文件名称\\n     * @param inputStream 输入流\\n     * @param path        路径\\n     * @return {@link String} 文件地址\\n     */\\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\\n    }\\n\\n}\\n\\n```\\n## 导出文章\\n```Java\\n    @Override\\n    public List<String> exportArticles(List<Integer> articleIdList) {\\n        // 查询文章信息\\n        List<Article> articleList = articleDao.selectList(new LambdaQueryWrapper<Article>()\\n                .select(Article::getArticleTitle, Article::getArticleContent)\\n                .in(Article::getId, articleIdList));\\n        // 写入文件并上传\\n        List<String> urlList = new ArrayList<>();\\n        for (Article article : articleList) {\\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\\n                urlList.add(url);\\n            } catch (Exception e) {\\n                log.error(StrUtil.format(\\\"导出文章失败,堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n                throw new BizException(\\\"导出文章失败\\\");\\n            }\\n        }\\n        return urlList;\\n    }\\n```\\n\\n```Java\\n  /**\\n     * 导出文章\\n     *\\n     * @param articleIdList 文章id列表\\n     * @return {@link List<String>} 文件url列表\\n     */\\n    @ApiOperation(value = \\\"导出文章\\\")\\n    @ApiImplicitParam(name = \\\"articleIdList\\\", value = \\\"文章id\\\", required = true, dataType = \\\"List<Integer>\\\")\\n    @PostMapping(\\\"/admin/articles/export\\\")\\n    public Result<List<String>> exportArticles(@RequestBody List<Integer> articleIdList) {\\n        return Result.ok(articleService.exportArticles(articleIdList));\\n    }\\n```\\n## 导入文章\\n- 文章导入策略\\n```Java\\nimport org.springframework.web.multipart.MultipartFile;\\n\\n/**\\n * 文章导入策略\\n *\\n * @author ting\\n * @date 2022/07/28\\n */\\npublic interface ArticleImportStrategy {\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     */\\n    void importArticles(MultipartFile file);\\n}\\n\\n```\\n- Markdown文章类型枚举\\n分两种文章形式导入，第一种就是普通形式导入、第二种就是hexo形式导入\\n- - 第一种普通形式导入策略\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\n\\nimport com.minzheng.blog.vo.ArticleVO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Objects;\\n\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\n\\n/**\\n * 普通文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"normalArticleImportStrategyImpl\\\")\\npublic class NormalArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        // 获取文件名作为文章标题\\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\\\"\\\\\\\\.\\\")[0];\\n        // 获取文章内容\\n        StringBuilder articleContent = new StringBuilder();\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\\n            while (reader.ready()) {\\n                articleContent.append((char) reader.read());\\n            }\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入文章失败\\\");\\n        }\\n        // 保存文章\\n        ArticleVO articleVO = ArticleVO.builder()\\n                .articleTitle(articleTitle)\\n                .articleContent(articleContent.toString())\\n                .status(DRAFT.getStatus())\\n                .build();\\n        articleService.saveOrUpdateArticle(articleVO);\\n    }\\n}\\n\\n```\\n- - 第二种hexo形式导入\\n```Java\\nimport cn.hutool.core.exceptions.ExceptionUtil;\\nimport cn.hutool.core.util.StrUtil;\\nimport com.minzheng.blog.exception.BizException;\\nimport com.minzheng.blog.service.ArticleService;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport com.minzheng.blog.vo.HexoArticleVO;\\n\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.util.CollectionUtils;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\nimport java.time.LocalDateTime;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.concurrent.atomic.AtomicInteger;\\n\\nimport static com.minzheng.blog.constant.HexoConst.*;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.DRAFT;\\nimport static com.minzheng.blog.enums.ArticleStatusEnum.PUBLIC;\\nimport static com.minzheng.blog.enums.ArticleTypeEnum.ORIGINAL;\\n\\n/**\\n * Hexo文章导入策略\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Slf4j\\n@Service(\\\"hexoArticleImportStrategyImpl\\\")\\npublic class HexoArticleImportStrategyImpl implements ArticleImportStrategy {\\n    @Autowired\\n    private ArticleService articleService;\\n\\n    /**\\n     * hexo最大分隔符数\\n     */\\n    private final int HEXO_MAX_DELIMITER_COUNT = 2;\\n\\n    /**\\n     * hexo最小分隔符数\\n     */\\n    private final int HEXO_MIN_DELIMITER_COUNT = 1;\\n\\n    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\");\\n\\n    @Override\\n    public void importArticles(MultipartFile file) {\\n        try {\\n            HexoArticleVO hexoArticleVO = new HexoArticleVO();\\n            // 原创\\n            hexoArticleVO.setType(ORIGINAL.getType());\\n            // 公开 （DRAFT不保存分类）\\n            hexoArticleVO.setStatus(PUBLIC.getStatus());\\n\\n            AtomicInteger hexoDelimiterCount = new AtomicInteger();\\n            StringBuilder articleContent = new StringBuilder();\\n\\n            // 分类或标签标记\\n            AtomicInteger flag = new AtomicInteger(NORMAL_FLAG);\\n\\n            List<String> tagList = new ArrayList<>();\\n\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));\\n            reader.lines().forEach(line -> {\\n                if (hexoDelimiterCount.get() == HEXO_MAX_DELIMITER_COUNT) {\\n                    // 分隔符结束就是正文\\n                    articleContent.append(line).append(NEW_LINE);\\n                } else {\\n                    if (line.equals(DELIMITER)) {\\n                        hexoDelimiterCount.getAndIncrement();\\n                    }\\n                    if (hexoDelimiterCount.get() == HEXO_MIN_DELIMITER_COUNT) {\\n                        if (line.startsWith(TITLE_PREFIX)) {\\n                            hexoArticleVO.setArticleTitle(line.replace(TITLE_PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(DATE_PREFIX)) {\\n                            hexoArticleVO.setCreateTime(LocalDateTime.parse(line.replace(DATE_PREFIX, \\\"\\\").trim(), formatter));\\n                        } else if (line.startsWith(CATEGORIES_PREFIX)) {\\n                            flag.set(CATEGORY_FLAG);\\n                        } else if (line.startsWith(TAGS_PREFIX)) {\\n                            flag.set(TAG_FLAG);\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == CATEGORY_FLAG) {\\n                            hexoArticleVO.setCategoryName(line.replace(PREFIX, \\\"\\\").trim());\\n                        } else if (line.startsWith(PREFIX) && flag.intValue() == TAG_FLAG) {\\n                            tagList.add(line.replace(PREFIX, \\\"\\\").trim());\\n                        }\\n                    }\\n                }\\n            });\\n\\n            hexoArticleVO.setTagNameList(tagList);\\n            hexoArticleVO.setArticleContent(articleContent.toString());\\n\\n            // 如果分类或标签为空则设为草稿\\n            if (CollectionUtils.isEmpty(hexoArticleVO.getTagNameList()) || StrUtil.isBlank(hexoArticleVO.getCategoryName())) {\\n                hexoArticleVO.setStatus(DRAFT.getStatus());\\n            }\\n\\n            articleService.saveOrUpdateArticle(hexoArticleVO);\\n        } catch (IOException e) {\\n            log.error(StrUtil.format(\\\"导入Hexo文章失败, 堆栈:{}\\\", ExceptionUtil.stacktraceToString(e)));\\n            throw new BizException(\\\"导入Hexo文章失败\\\");\\n        }\\n    }\\n\\n}\\n\\n```\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * Markdown文章类型枚举\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum MarkdownTypeEnum {\\n    /**\\n     * 普通文章\\n     */\\n    NORMAL(\\\"\\\", \\\"normalArticleImportStrategyImpl\\\"),\\n    /**\\n     * Hexo文章\\n     */\\n    HEXO(\\\"hexo\\\", \\\"hexoArticleImportStrategyImpl\\\");\\n\\n    /**\\n     * 类型\\n     */\\n    private final String type;\\n\\n    /**\\n     * 策略\\n     */\\n    private final String strategy;\\n\\n    public static String getMarkdownType(String name) {\\n        if (name == null) {\\n            return NORMAL.getStrategy();\\n        }\\n        for (MarkdownTypeEnum value : MarkdownTypeEnum.values()) {\\n            if (value.getType().equalsIgnoreCase(name)) {\\n                return value.getStrategy();\\n            }\\n        }\\n        return null;\\n    }\\n}\\n```\\n\\n-  文章导入策略上下文\\n```Java\\nimport com.minzheng.blog.enums.MarkdownTypeEnum;\\nimport com.minzheng.blog.strategy.ArticleImportStrategy;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.web.multipart.MultipartFile;\\n\\nimport java.util.Map;\\n\\n/**\\n * 文章导入策略上下文\\n *\\n * @author linweiyuan\\n * @date 2022/07/28\\n */\\n@Service\\npublic class ArticleImportStrategyContext {\\n    @Autowired\\n    private Map<String, ArticleImportStrategy> articleImportStrategyMap;\\n\\n    public void importArticles(MultipartFile file, String type) {\\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\\n    }\\n}\\n\\n```\\n- controller层 通过markdown形式进行导入文章\\n```Java\\n\\n    /**\\n     * 导入文章\\n     *\\n     * @param file 文件\\n     * @param type 文章类型\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"导入文章\\\")\\n    @PostMapping(\\\"/admin/articles/import\\\")\\n    public Result<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\\n        articleImportStrategyContext.importArticles(file, type);\\n        return Result.ok();\\n    }\\n```\\n# 文件路径枚举\\n比如要上传的是什么，头像？文章图片？音频路径？照片路径等？这些都是可以创建一个枚举。\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件路径枚举\\n *\\n * @author Felix\\n * @date 2021/08/04\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FilePathEnum {\\n    /**\\n     * 头像路径\\n     */\\n    AVATAR(\\\"avatar/\\\", \\\"头像路径\\\"),\\n    /**\\n     * 文章图片路径\\n     */\\n    ARTICLE(\\\"articles/\\\", \\\"文章图片路径\\\"),\\n    /**\\n     * 音频路径\\n     */\\n    VOICE(\\\"voice/\\\", \\\"音频路径\\\"),\\n    /**\\n     * 照片路径\\n     */\\n    PHOTO(\\\"photos/\\\", \\\"相册路径\\\"),\\n    /**\\n     * 配置图片路径\\n     */\\n    CONFIG(\\\"config/\\\", \\\"配置图片路径\\\"),\\n    /**\\n     * 说说图片路径\\n     */\\n    TALK(\\\"talks/\\\", \\\"说说图片路径\\\"),\\n    /**\\n     * md文件路径\\n     */\\n    MD(\\\"markdown/\\\", \\\"md文件路径\\\");\\n\\n    /**\\n     * 路径\\n     */\\n    private final String path;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 文件扩展名枚举，比如图片jpg、png、JPEG、文件WAV、MD(markdown文件)、TXT等可以做成枚举类\\n```Java\\nimport lombok.AllArgsConstructor;\\nimport lombok.Getter;\\n\\n/**\\n * 文件扩展名枚举\\n *\\n * @author Felix\\n * @date 2021/08/12\\n */\\n@Getter\\n@AllArgsConstructor\\npublic enum FileExtEnum {\\n    /**\\n     * jpg文件\\n     */\\n    JPG(\\\".jpg\\\", \\\"jpg文件\\\"),\\n    /**\\n     * png文件\\n     */\\n    PNG(\\\".png\\\", \\\"png文件\\\"),\\n    /**\\n     * Jpeg文件\\n     */\\n    JPEG(\\\".jpeg\\\", \\\"jpeg文件\\\"),\\n    /**\\n     * wav文件\\n     */\\n    WAV(\\\".wav\\\", \\\"wav文件\\\"),\\n    /**\\n     * md文件\\n     */\\n    MD(\\\".md\\\",\\\"markdown文件\\\"),\\n    /**\\n     * txt文件\\n     */\\n    TXT(\\\".txt\\\",\\\"txt文件\\\");\\n\\n    /**\\n     * 获取文件格式\\n     *\\n     * @param extName 扩展名\\n     * @return {@link FileExtEnum} 文件格式\\n     */\\n    public static FileExtEnum getFileExt(String extName) {\\n        for (FileExtEnum value : FileExtEnum.values()) {\\n            if (value.getExtName().equalsIgnoreCase(extName)) {\\n                return value;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 扩展名\\n     */\\n    private final String extName;\\n\\n    /**\\n     * 描述\\n     */\\n    private final String desc;\\n\\n}\\n\\n```\\n# 上传图片controller层\\n```Java\\n  /**\\n     * 上传说说图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 说说图片地址\\n     */\\n    @ApiOperation(value = \\\"上传说说图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"说说图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/talks/images\\\")\\n    public Result<String> saveTalkImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\\n    }\\n\\n\\n /**\\n     * 上传相册封面\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 相册封面地址\\n     */\\n    @ApiOperation(value = \\\"上传相册封面\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"相册封面\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/photos/albums/cover\\\")\\n    public Result<String> savePhotoAlbumCover(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\\n    }\\n\\n\\n  /**\\n     * 上传文章图片\\n     *\\n     * @param file 文件\\n     * @return {@link Result<String>} 文章图片地址\\n     */\\n    @ApiOperation(value = \\\"上传文章图片\\\")\\n    @ApiImplicitParam(name = \\\"file\\\", value = \\\"文章图片\\\", required = true, dataType = \\\"MultipartFile\\\")\\n    @PostMapping(\\\"/admin/articles/images\\\")\\n    public Result<String> saveArticleImages(MultipartFile file) {\\n        return Result.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\\n    }\\n```\\n# 编写前端进行上传\\n```JavaScript\\nexport default {\\n  TENCENT_CAPTCHA: \\\"2088053498\\\",\\n  UPLOAD_SIZE: 200 // 压缩文件大小\\n};\\n\\n```\\n\\n```html\\n        <el-form-item label=\\\"上传封面\\\">\\n          <el-upload\\n            class=\\\"upload-cover\\\"\\n            drag\\n            action=\\\"/api/admin/articles/images\\\"  // 这里调用后端接口\\n            multiple\\n            :before-upload=\\\"beforeUpload\\\"     //文件通过接口上传之前，一般用来判断规则\\n            :on-success=\\\"uploadCover\\\"\\n          >\\n            <i class=\\\"el-icon-upload\\\" v-if=\\\"article.articleCover == \'\'\\\" />\\n            <div class=\\\"el-upload__text\\\" v-if=\\\"article.articleCover == \'\'\\\">\\n              将文件拖到此处，或<em>点击上传</em>\\n            </div>\\n            <img\\n              v-else\\n              :src=\\\"article.articleCover\\\"\\n              width=\\\"360px\\\"\\n              height=\\\"180px\\\"\\n            />\\n          </el-upload>\\n        </el-form-item>\\n\\n\\n\\n<script>\\narticle:{\\narticleCover: \\\"\\\",\\n}\\n//压缩图片\\n    beforeUpload(file) {\\n      return new Promise(resolve => {\\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\\n          resolve(file);\\n        }\\n        // 压缩到200KB,这里的200就是要压缩的大小,可自定义\\n        imageConversion\\n          .compressAccurately(file, this.config.UPLOAD_SIZE)\\n          .then(res => {\\n            resolve(res);\\n          });\\n      });\\n    },\\n\\n   uploadCover(response) {\\n      this.article.articleCover = response.data;\\n    },\\n</script>\\n```\\n\\n**上传图片和发表文章是分开的，上传图片是存在oss阿里云存储桶里，而发表文章内容是存储在数据库里**\\n下面是发表文章\\n# 发表文章\\n1. 把文章需要显示给客户端看的属性创建VO类进行表示\\n```Java\\nimport io.swagger.annotations.ApiModel;\\nimport io.swagger.annotations.ApiModelProperty;\\nimport lombok.*;\\n\\nimport javax.validation.constraints.NotBlank;\\nimport java.util.List;\\n\\n\\n/**\\n * 文章\\n *\\n * @author Felix\\n * @date 2021/08/03\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"文章\\\")\\npublic class ArticleVO {\\n\\n    /**\\n     * 文章id\\n     */\\n    @ApiModelProperty(name = \\\"id\\\", value = \\\"文章id\\\", dataType = \\\"Integer\\\")\\n    private Integer id;\\n\\n    /**\\n     * 标题\\n     */\\n    @NotBlank(message = \\\"文章标题不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleTitle\\\", value = \\\"文章标题\\\", required = true, dataType = \\\"String\\\")\\n    private String articleTitle;\\n\\n    /**\\n     * 内容\\n     */\\n    @NotBlank(message = \\\"文章内容不能为空\\\")\\n    @ApiModelProperty(name = \\\"articleContent\\\", value = \\\"文章内容\\\", required = true, dataType = \\\"String\\\")\\n    private String articleContent;\\n\\n    /**\\n     * 文章封面\\n     */\\n    @ApiModelProperty(name = \\\"articleCover\\\", value = \\\"文章缩略图\\\", dataType = \\\"String\\\")\\n    private String articleCover;\\n\\n    /**\\n     * 文章分类\\n     */\\n    @ApiModelProperty(name = \\\"category\\\", value = \\\"文章分类\\\", dataType = \\\"Integer\\\")\\n    private String categoryName;\\n\\n    /**\\n     * 文章标签\\n     */\\n    @ApiModelProperty(name = \\\"tagNameList\\\", value = \\\"文章标签\\\", dataType = \\\"List<Integer>\\\")\\n    private List<String> tagNameList;\\n\\n    /**\\n     * 文章类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"文章类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 原文链接\\n     */\\n    @ApiModelProperty(name = \\\"originalUrl\\\", value = \\\"原文链接\\\", dataType = \\\"String\\\")\\n    private String originalUrl;\\n\\n    /**\\n     * 是否置顶\\n     */\\n    @ApiModelProperty(name = \\\"isTop\\\", value = \\\"是否置顶\\\", dataType = \\\"Integer\\\")\\n    private Integer isTop;\\n\\n    /**\\n     * 文章状态 1.公开 2.私密 3.评论可见\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"文章状态\\\", dataType = \\\"String\\\")\\n    private Integer status;\\n\\n}\\n\\n```\\n2. 创建service层\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface ArticleService extends IService<Article> {\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     */\\n    void saveOrUpdateArticle(ArticleVO articleVO);\\n}\\n```\\n3. 创建Impl层进行业务逻辑编写\\n```Java\\n/**\\n * 文章服务\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Service\\n@Slf4j\\npublic class ArticleServiceImpl extends ServiceImpl<ArticleDao, Article> implements ArticleService {\\n @Transactional(rollbackFor = Exception.class)\\n    @Override\\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\\n        // 查询博客配置信息\\n        CompletableFuture<WebsiteConfigVO> webConfig = CompletableFuture.supplyAsync(() -> blogInfoService.getWebsiteConfig());\\n\\n        // 保存文章分类\\n        Category category = saveArticleCategory(articleVO);\\n        // 保存或修改文章\\n        Article article = BeanCopyUtils.copyObject(articleVO, Article.class);\\n        if (Objects.nonNull(category)) {\\n            article.setCategoryId(category.getId());\\n        }\\n        // 设定默认文章封面\\n        if (StrUtil.isBlank(article.getArticleCover())){\\n            try {\\n                article.setArticleCover(webConfig.get().getArticleCover());\\n            } catch (Exception e) {\\n                throw new BizException(\\\"设定默认文章封面失败\\\");\\n            }\\n        }\\n        article.setUserId(UserUtils.getLoginUser().getUserInfoId());\\n        this.saveOrUpdate(article);\\n        // 保存文章标签\\n        saveArticleTag(articleVO, article.getId());\\n    }\\n\\n    /**\\n     * 保存文章分类\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Category} 文章分类\\n     */\\n    private Category saveArticleCategory(ArticleVO articleVO) {\\n        // 判断分类是否存在\\n        Category category = categoryDao.selectOne(new LambdaQueryWrapper<Category>().eq(Category::getCategoryName, articleVO.getCategoryName()));\\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\\n            category = Category.builder().categoryName(articleVO.getCategoryName()).build();\\n            categoryDao.insert(category);\\n        }\\n        return category;\\n    }\\n\\n}\\n```\\n4. controller\\n```Java\\n\\n    /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n```\\n# 前端实现\\n```html\\n      <div slot=\\\"footer\\\">\\n        <el-button @click=\\\"addOrEdit = false\\\">取 消</el-button>\\n        <el-button type=\\\"danger\\\" @click=\\\"saveOrUpdateArticle\\\">\\n          发 表\\n        </el-button>\\n      </div>\\n\\n<script>\\nreturn{\\n  addOrEdit: false,\\n  article: {\\n        id: null,\\n        articleTitle: this.$moment(new Date()).format(\\\"YYYY-MM-DD\\\"),\\n        articleContent: \\\"\\\",\\n        articleCover: \\\"\\\",\\n        categoryName: null,\\n        tagNameList: [],\\n        originalUrl: \\\"\\\",\\n        isTop: 0,\\n        type: 1,\\n        status: 1\\n      }\\n},\\n saveOrUpdateArticle() {\\n      if (this.article.articleTitle.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章标题不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleContent.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章内容不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.categoryName == null) {\\n        this.$message.error(\\\"文章分类不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.tagNameList.length == 0) {\\n        this.$message.error(\\\"文章标签不能为空\\\");\\n        return false;\\n      }\\n      if (this.article.articleCover.trim() == \\\"\\\") {\\n        this.$message.error(\\\"文章封面不能为空\\\");\\n        return false;\\n      }\\n      this.axios.post(\\\"/api/admin/articles\\\", this.article).then(({ data }) => {\\n        if (data.flag) {\\n          if (this.article.id === null) {\\n            this.$store.commit(\\\"removeTab\\\", \\\"发布文章\\\");\\n          } else {\\n            this.$store.commit(\\\"removeTab\\\", \\\"修改文章\\\");\\n          }\\n          sessionStorage.removeItem(\\\"article\\\");\\n          this.$router.push({ path: \\\"/article-list\\\" });\\n          this.$notify.success({\\n            title: \\\"成功\\\",\\n            message: data.message\\n          });\\n        } else {\\n          this.$notify.error({\\n            title: \\\"失败\\\",\\n            message: data.message\\n          });\\n        }\\n        this.addOrEdit = false;\\n      });\\n      //关闭自动保存功能\\n      this.autoSave = false;\\n    },\\n</script>\\n```\\n\\n# 可以参考这个博主的文章，挺不错的，里面有很多种不同的上传策略方式等\\n[上传策略](https://juejin.cn/post/7169845295801450526)\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/cde5bdb8466fae3bf8855307af8c7537.jpg\",\"articleTitle\":\"springBoot文件上传导出\",\"categoryName\":\"前后端开发经验\",\"id\":71,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-29 15:50:08', NULL);
INSERT INTO `tb_operation_log` VALUES (1134, '博客信息模块', '修改', '/admin/about', 'com.minzheng.blog.controller.BlogInfoController.updateAbout', '修改关于我信息', '[{\"aboutContent\":\"你好啊！欢迎浏览我的博客网站。\\n本人目前本科在读，主要从事Java后端学习和开发。\\n本站博客内容有些是原创文章，有些是学习心得和企业级经验，希望我的文章能够给你一些启发，期待和你一起努力\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 18:42:15', NULL);
INSERT INTO `tb_operation_log` VALUES (1135, '博客信息模块', '修改', '/admin/about', 'com.minzheng.blog.controller.BlogInfoController.updateAbout', '修改关于我信息', '[{\"aboutContent\":\"你好啊！欢迎浏览我的博客网站。\\n本人目前本科在读，主要从事Java后端学习和开发。\\n本站博客内容有些是原创文章，有些是学习心得和企业级经验，希望我的文章能够给你一些启发，期待和你一起努力。\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 18:45:18', NULL);
INSERT INTO `tb_operation_log` VALUES (1136, '博客信息模块', '修改', '/admin/about', 'com.minzheng.blog.controller.BlogInfoController.updateAbout', '修改关于我信息', '[{\"aboutContent\":\"你好啊！欢迎浏览我的博客网站。\\n本人目前本科在读，主要从事Java后端学习和开发。\\n本站博客内容有些是原创文章，有些是学习心得和企业级经验，希望我的文章能够给你一些启发，期待和你一起努力。\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 19:03:22', NULL);
INSERT INTO `tb_operation_log` VALUES (1137, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n\\n\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 条件\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n\",\"articleCover\":\"\",\"articleTitle\":\"日志操作\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:23:20', NULL);
INSERT INTO `tb_operation_log` VALUES (1138, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n- - 根据条件进行搜索日志消息\\n```Java\\n/**\\n * 查询条件\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"查询条件\\\")\\npublic class ConditionVO {\\n\\n    /**\\n     * 页码\\n     */\\n    @ApiModelProperty(name = \\\"current\\\", value = \\\"页码\\\", dataType = \\\"Long\\\")\\n    private Long current;\\n\\n    /**\\n     * 条数\\n     */\\n    @ApiModelProperty(name = \\\"size\\\", value = \\\"条数\\\", dataType = \\\"Long\\\")\\n    private Long size;\\n\\n    /**\\n     * 搜索内容\\n     */\\n    @ApiModelProperty(name = \\\"keywords\\\", value = \\\"搜索内容\\\", dataType = \\\"String\\\")\\n    private String keywords;\\n\\n    /**\\n     * 分类id\\n     */\\n    @ApiModelProperty(name = \\\"categoryId\\\", value = \\\"分类id\\\", dataType = \\\"Integer\\\")\\n    private Integer categoryId;\\n\\n    /**\\n     * 标签id\\n     */\\n    @ApiModelProperty(name = \\\"tagId\\\", value = \\\"标签id\\\", dataType = \\\"Integer\\\")\\n    private Integer tagId;\\n\\n    /**\\n     * 相册id\\n     */\\n    @ApiModelProperty(name = \\\"albumId\\\", value = \\\"相册id\\\", dataType = \\\"Integer\\\")\\n    private Integer albumId;\\n\\n    /**\\n     * 登录类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"登录类型\\\", dataType = \\\"Integer\\\")\\n    private Integer loginType;\\n\\n    /**\\n     * 类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 状态\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"状态\\\", dataType = \\\"Integer\\\")\\n    private Integer status;\\n\\n    /**\\n     * 开始时间\\n     */\\n    @ApiModelProperty(name = \\\"startTime\\\", value = \\\"开始时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime startTime;\\n\\n    /**\\n     * 结束时间\\n     */\\n    @ApiModelProperty(name = \\\"endTime\\\", value = \\\"结束时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime endTime;\\n\\n    /**\\n     * 是否删除\\n     */\\n    @ApiModelProperty(name = \\\"isDelete\\\", value = \\\"是否删除\\\", dataType = \\\"Integer\\\")\\n    private Integer isDelete;\\n\\n    /**\\n     * 是否审核\\n     */\\n    @ApiModelProperty(name = \\\"isReview\\\", value = \\\"是否审核\\\", dataType = \\\"Integer\\\")\\n    private Integer isReview;\\n\\n}\\n```\\n- 操作日志的Service\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 根据条件搜索文章\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n3. 操作日志Impl\\n\\n\",\"articleTitle\":\"日志操作\",\"id\":72,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:27:23', NULL);
INSERT INTO `tb_operation_log` VALUES (1139, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n- - 根据条件进行搜索日志消息\\n```Java\\n/**\\n * 查询条件\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"查询条件\\\")\\npublic class ConditionVO {\\n\\n    /**\\n     * 页码\\n     */\\n    @ApiModelProperty(name = \\\"current\\\", value = \\\"页码\\\", dataType = \\\"Long\\\")\\n    private Long current;\\n\\n    /**\\n     * 条数\\n     */\\n    @ApiModelProperty(name = \\\"size\\\", value = \\\"条数\\\", dataType = \\\"Long\\\")\\n    private Long size;\\n\\n    /**\\n     * 搜索内容\\n     */\\n    @ApiModelProperty(name = \\\"keywords\\\", value = \\\"搜索内容\\\", dataType = \\\"String\\\")\\n    private String keywords;\\n\\n    /**\\n     * 分类id\\n     */\\n    @ApiModelProperty(name = \\\"categoryId\\\", value = \\\"分类id\\\", dataType = \\\"Integer\\\")\\n    private Integer categoryId;\\n\\n    /**\\n     * 标签id\\n     */\\n    @ApiModelProperty(name = \\\"tagId\\\", value = \\\"标签id\\\", dataType = \\\"Integer\\\")\\n    private Integer tagId;\\n\\n    /**\\n     * 相册id\\n     */\\n    @ApiModelProperty(name = \\\"albumId\\\", value = \\\"相册id\\\", dataType = \\\"Integer\\\")\\n    private Integer albumId;\\n\\n    /**\\n     * 登录类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"登录类型\\\", dataType = \\\"Integer\\\")\\n    private Integer loginType;\\n\\n    /**\\n     * 类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 状态\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"状态\\\", dataType = \\\"Integer\\\")\\n    private Integer status;\\n\\n    /**\\n     * 开始时间\\n     */\\n    @ApiModelProperty(name = \\\"startTime\\\", value = \\\"开始时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime startTime;\\n\\n    /**\\n     * 结束时间\\n     */\\n    @ApiModelProperty(name = \\\"endTime\\\", value = \\\"结束时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime endTime;\\n\\n    /**\\n     * 是否删除\\n     */\\n    @ApiModelProperty(name = \\\"isDelete\\\", value = \\\"是否删除\\\", dataType = \\\"Integer\\\")\\n    private Integer isDelete;\\n\\n    /**\\n     * 是否审核\\n     */\\n    @ApiModelProperty(name = \\\"isReview\\\", value = \\\"是否审核\\\", dataType = \\\"Integer\\\")\\n    private Integer isReview;\\n\\n}\\n```\\n- 操作日志的Service\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 根据条件搜索文章\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n3. 操作日志Impl\\n\\n```Java\\n/**\\n * 操作日志服务\\n *  PageUtils 分页工具类\\n * @author Felix\\n * @date 2021/08/08\\n */\\n@Service\\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogDao, OperationLog> implements OperationLogService {\\n\\n    @Override\\n    public PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\\n        Page<OperationLog> page = new Page<>(PageUtils.getCurrent(), PageUtils.getSize());\\n        // 查询日志列表\\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\\n                .or()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\\n                .orderByDesc(OperationLog::getId));\\n        List<OperationLogDTO> operationLogDTOList = BeanCopyUtils.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\\n        return new PageResult<>(operationLogDTOList, (int) operationLogPage.getTotal());\\n    }\\n\\n}\\n```\\n4. 操作日志controller\\n```Java\\n/**\\n * 日志控制器\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Api(tags = \\\"日志模块\\\")\\n@RestController\\npublic class LogController {\\n    @Autowired\\n    private OperationLogService operationLogService;\\n\\n    /**\\n     * 查看操作日志\\n     *\\n     * @param conditionVO 条件\\n     * @return {@link Result<OperationLogDTO>} 日志列表\\n     */\\n    @ApiOperation(value = \\\"查看操作日志\\\")\\n    @GetMapping(\\\"/admin/operation/logs\\\")\\n    public Result<PageResult<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\\n        return Result.ok(operationLogService.listOperationLogs(conditionVO));\\n    }\\n\\n    /**\\n     * 删除操作日志\\n     *\\n     * @param logIdList 日志id列表\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"删除操作日志\\\")\\n    @DeleteMapping(\\\"/admin/operation/logs\\\")\\n    public Result<?> deleteOperationLogs(@RequestBody List<Integer> logIdList) {\\n        operationLogService.removeByIds(logIdList);\\n        return Result.ok();\\n    }\\n\\n}\\n```\\n\",\"articleTitle\":\"日志操作\",\"id\":72,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:29:35', NULL);
INSERT INTO `tb_operation_log` VALUES (1140, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n- - 根据条件进行搜索日志消息\\n```Java\\n/**\\n * 查询条件\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"查询条件\\\")\\npublic class ConditionVO {\\n\\n    /**\\n     * 页码\\n     */\\n    @ApiModelProperty(name = \\\"current\\\", value = \\\"页码\\\", dataType = \\\"Long\\\")\\n    private Long current;\\n\\n    /**\\n     * 条数\\n     */\\n    @ApiModelProperty(name = \\\"size\\\", value = \\\"条数\\\", dataType = \\\"Long\\\")\\n    private Long size;\\n\\n    /**\\n     * 搜索内容\\n     */\\n    @ApiModelProperty(name = \\\"keywords\\\", value = \\\"搜索内容\\\", dataType = \\\"String\\\")\\n    private String keywords;\\n\\n    /**\\n     * 分类id\\n     */\\n    @ApiModelProperty(name = \\\"categoryId\\\", value = \\\"分类id\\\", dataType = \\\"Integer\\\")\\n    private Integer categoryId;\\n\\n    /**\\n     * 标签id\\n     */\\n    @ApiModelProperty(name = \\\"tagId\\\", value = \\\"标签id\\\", dataType = \\\"Integer\\\")\\n    private Integer tagId;\\n\\n    /**\\n     * 相册id\\n     */\\n    @ApiModelProperty(name = \\\"albumId\\\", value = \\\"相册id\\\", dataType = \\\"Integer\\\")\\n    private Integer albumId;\\n\\n    /**\\n     * 登录类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"登录类型\\\", dataType = \\\"Integer\\\")\\n    private Integer loginType;\\n\\n    /**\\n     * 类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 状态\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"状态\\\", dataType = \\\"Integer\\\")\\n    private Integer status;\\n\\n    /**\\n     * 开始时间\\n     */\\n    @ApiModelProperty(name = \\\"startTime\\\", value = \\\"开始时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime startTime;\\n\\n    /**\\n     * 结束时间\\n     */\\n    @ApiModelProperty(name = \\\"endTime\\\", value = \\\"结束时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime endTime;\\n\\n    /**\\n     * 是否删除\\n     */\\n    @ApiModelProperty(name = \\\"isDelete\\\", value = \\\"是否删除\\\", dataType = \\\"Integer\\\")\\n    private Integer isDelete;\\n\\n    /**\\n     * 是否审核\\n     */\\n    @ApiModelProperty(name = \\\"isReview\\\", value = \\\"是否审核\\\", dataType = \\\"Integer\\\")\\n    private Integer isReview;\\n\\n}\\n```\\n- 操作日志的Service\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 根据条件搜索文章\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n3. 操作日志Impl\\n\\n```Java\\n/**\\n * 操作日志服务\\n *  PageUtils 分页工具类\\n * @author Felix\\n * @date 2021/08/08\\n */\\n@Service\\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogDao, OperationLog> implements OperationLogService {\\n\\n    @Override\\n    public PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\\n        Page<OperationLog> page = new Page<>(PageUtils.getCurrent(), PageUtils.getSize());\\n        // 查询日志列表  通过系统模块或者操作描述(关键字)进行搜索日志消息\\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\\n                .or()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\\n                .orderByDesc(OperationLog::getId));\\n        List<OperationLogDTO> operationLogDTOList = BeanCopyUtils.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\\n        return new PageResult<>(operationLogDTOList, (int) operationLogPage.getTotal());\\n    }\\n\\n}\\n```\\n4. 操作日志controller\\n```Java\\n/**\\n * 日志控制器\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Api(tags = \\\"日志模块\\\")\\n@RestController\\npublic class LogController {\\n    @Autowired\\n    private OperationLogService operationLogService;\\n\\n    /**\\n     * 查看操作日志\\n     *\\n     * @param conditionVO 条件\\n     * @return {@link Result<OperationLogDTO>} 日志列表\\n     */\\n    @ApiOperation(value = \\\"查看操作日志\\\")\\n    @GetMapping(\\\"/admin/operation/logs\\\")\\n    public Result<PageResult<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\\n        return Result.ok(operationLogService.listOperationLogs(conditionVO));\\n    }\\n\\n    /**\\n     * 删除操作日志\\n     *\\n     * @param logIdList 日志id列表\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"删除操作日志\\\")\\n    @DeleteMapping(\\\"/admin/operation/logs\\\")\\n    public Result<?> deleteOperationLogs(@RequestBody List<Integer> logIdList) {\\n        operationLogService.removeByIds(logIdList);\\n        return Result.ok();\\n    }\\n\\n}\\n```\\n# 效果\\n通过系统模块或者操作描述(关键字)进行搜索日志消息\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/35da2d7b4bf48b4a2644832bbcd42bcc.png)\",\"articleTitle\":\"日志操作\",\"id\":72,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:31:54', NULL);
INSERT INTO `tb_operation_log` VALUES (1141, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n- - 根据条件进行搜索日志消息\\n```Java\\n/**\\n * 查询条件\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"查询条件\\\")\\npublic class ConditionVO {\\n\\n    /**\\n     * 页码\\n     */\\n    @ApiModelProperty(name = \\\"current\\\", value = \\\"页码\\\", dataType = \\\"Long\\\")\\n    private Long current;\\n\\n    /**\\n     * 条数\\n     */\\n    @ApiModelProperty(name = \\\"size\\\", value = \\\"条数\\\", dataType = \\\"Long\\\")\\n    private Long size;\\n\\n    /**\\n     * 搜索内容\\n     */\\n    @ApiModelProperty(name = \\\"keywords\\\", value = \\\"搜索内容\\\", dataType = \\\"String\\\")\\n    private String keywords;\\n\\n    /**\\n     * 分类id\\n     */\\n    @ApiModelProperty(name = \\\"categoryId\\\", value = \\\"分类id\\\", dataType = \\\"Integer\\\")\\n    private Integer categoryId;\\n\\n    /**\\n     * 标签id\\n     */\\n    @ApiModelProperty(name = \\\"tagId\\\", value = \\\"标签id\\\", dataType = \\\"Integer\\\")\\n    private Integer tagId;\\n\\n    /**\\n     * 相册id\\n     */\\n    @ApiModelProperty(name = \\\"albumId\\\", value = \\\"相册id\\\", dataType = \\\"Integer\\\")\\n    private Integer albumId;\\n\\n    /**\\n     * 登录类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"登录类型\\\", dataType = \\\"Integer\\\")\\n    private Integer loginType;\\n\\n    /**\\n     * 类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 状态\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"状态\\\", dataType = \\\"Integer\\\")\\n    private Integer status;\\n\\n    /**\\n     * 开始时间\\n     */\\n    @ApiModelProperty(name = \\\"startTime\\\", value = \\\"开始时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime startTime;\\n\\n    /**\\n     * 结束时间\\n     */\\n    @ApiModelProperty(name = \\\"endTime\\\", value = \\\"结束时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime endTime;\\n\\n    /**\\n     * 是否删除\\n     */\\n    @ApiModelProperty(name = \\\"isDelete\\\", value = \\\"是否删除\\\", dataType = \\\"Integer\\\")\\n    private Integer isDelete;\\n\\n    /**\\n     * 是否审核\\n     */\\n    @ApiModelProperty(name = \\\"isReview\\\", value = \\\"是否审核\\\", dataType = \\\"Integer\\\")\\n    private Integer isReview;\\n\\n}\\n```\\n- 操作日志的Service\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 根据条件搜索文章\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n3. 操作日志Impl\\n\\n```Java\\n/**\\n * 操作日志服务\\n *  PageUtils 分页工具类\\n * @author Felix\\n * @date 2021/08/08\\n */\\n@Service\\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogDao, OperationLog> implements OperationLogService {\\n\\n    @Override\\n    public PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\\n        Page<OperationLog> page = new Page<>(PageUtils.getCurrent(), PageUtils.getSize());\\n        // 查询日志列表  通过系统模块或者操作描述(关键字)进行搜索日志消息\\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\\n                .or()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\\n                .orderByDesc(OperationLog::getId));\\n        List<OperationLogDTO> operationLogDTOList = BeanCopyUtils.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\\n        return new PageResult<>(operationLogDTOList, (int) operationLogPage.getTotal());\\n    }\\n\\n}\\n```\\n4. 操作日志controller\\n```Java\\n/**\\n * 日志控制器\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Api(tags = \\\"日志模块\\\")\\n@RestController\\npublic class LogController {\\n    @Autowired\\n    private OperationLogService operationLogService;\\n\\n    /**\\n     * 查看操作日志\\n     *\\n     * @param conditionVO 条件\\n     * @return {@link Result<OperationLogDTO>} 日志列表\\n     */\\n    @ApiOperation(value = \\\"查看操作日志\\\")\\n    @GetMapping(\\\"/admin/operation/logs\\\")\\n    public Result<PageResult<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\\n        return Result.ok(operationLogService.listOperationLogs(conditionVO));\\n    }\\n\\n    /**\\n     * 删除操作日志\\n     *\\n     * @param logIdList 日志id列表\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"删除操作日志\\\")\\n    @DeleteMapping(\\\"/admin/operation/logs\\\")\\n    public Result<?> deleteOperationLogs(@RequestBody List<Integer> logIdList) {\\n        operationLogService.removeByIds(logIdList);\\n        return Result.ok();\\n    }\\n\\n}\\n```\\n# 效果\\n通过系统模块或者操作描述(关键字)进行搜索日志消息\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/35da2d7b4bf48b4a2644832bbcd42bcc.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/46aed129263c4e9dc7104860c3c2ed68.png)\\n# 通过切入点进行查看日志消息\\n1. 首先需要切面\\n```Java\\n/**\\n * 操作日志切面处理\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Aspect\\n@Component\\npublic class OptLogAspect {\\n\\n    @Autowired\\n    private OperationLogDao operationLogDao;\\n\\n    /**\\n     * 设置操作日志切入点 记录操作日志 在注解的位置切入代码\\n     */\\n    @Pointcut(\\\"@annotation(com.minzheng.blog.annotation.OptLog)\\\")\\n    public void optLogPointCut() {}\\n\\n\\n    /**\\n     * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行\\n     *\\n     * @param value 就是上面切入点的方法\\n     * @param joinPoint 切入点\\n     * @param keys      返回结果\\n     */\\n    @AfterReturning(value = \\\"optLogPointCut()\\\", returning = \\\"keys\\\")\\n    @SuppressWarnings(\\\"unchecked\\\")\\n    public void saveOptLog(JoinPoint joinPoint, Object keys) {\\n        // 获取RequestAttributes\\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\\n        // 从获取RequestAttributes中获取HttpServletRequest的信息\\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\\n        OperationLog operationLog = new OperationLog();\\n        // 从切面织入点处通过反射机制获取织入点处的方法\\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\\n        // 获取切入点所在的方法\\n        Method method = signature.getMethod();\\n        // 获取操作\\n        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);\\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\\n        OptLog optLog = method.getAnnotation(OptLog.class);\\n        // 操作模块\\n        operationLog.setOptModule(api.tags()[0]);\\n        // 操作类型\\n        operationLog.setOptType(optLog.optType());\\n        // 操作描述\\n        operationLog.setOptDesc(apiOperation.value());\\n        // 获取请求的类名\\n        String className = joinPoint.getTarget().getClass().getName();\\n        // 获取请求的方法名\\n        String methodName = method.getName();\\n        methodName = className + \\\".\\\" + methodName;\\n        // 请求方式\\n        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\\n        // 请求方法\\n        operationLog.setOptMethod(methodName);\\n        // 请求参数\\n        operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\\n        // 返回结果\\n        operationLog.setResponseData(JSON.toJSONString(keys));\\n        // 请求用户ID\\n        operationLog.setUserId(UserUtils.getLoginUser().getId());\\n        // 请求用户\\n        operationLog.setNickname(UserUtils.getLoginUser().getNickname());\\n        // 请求IP\\n        String ipAddress = IpUtils.getIpAddress(request);\\n        operationLog.setIpAddress(ipAddress);\\n        operationLog.setIpSource(IpUtils.getIpSource(ipAddress));\\n        // 请求URL\\n        operationLog.setOptUrl(request.getRequestURI());\\n        operationLogDao.insert(operationLog);\\n    }\\n\\n}\\n```\\n2. 在controller中使用切点注解\\n```Java\\n /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n\\n    /**\\n     * 修改文章置顶状态\\n     *\\n     * @param articleTopVO 文章置顶信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = UPDATE)\\n    @ApiOperation(value = \\\"修改文章置顶\\\")\\n    @PutMapping(\\\"/admin/articles/top\\\")\\n    public Result<?> updateArticleTop(@Valid @RequestBody ArticleTopVO articleTopVO) {\\n        articleService.updateArticleTop(articleTopVO);\\n        return Result.ok();\\n    }\\n```\\n3. 在操作日志可以看到有关这两个接口的消息\\n\",\"articleTitle\":\"日志操作\",\"id\":72,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:35:39', NULL);
INSERT INTO `tb_operation_log` VALUES (1142, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"# 操作日志注解\\n```Java\\nimport java.lang.annotation.*;\\n\\n/**\\n * 操作日志注解\\n *\\n * @author Felix\\n * @date 2021/07/28\\n */\\n@Target(ElementType.METHOD)\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\npublic @interface OptLog {\\n\\n    /**\\n     * @return 操作类型\\n     */\\n    String optType() default \\\"\\\";\\n\\n}\\n\\n```\\n# 操作日志\\n1. 操作日志maaper\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/10\\n */\\n@Repository\\npublic interface OperationLogDao extends BaseMapper<OperationLog> {\\n}\\n\\n```\\n2. 操作日志service\\n- 前期工作\\n- - 操作日志dto\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author yezhiqiu\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class OperationLogDTO {\\n    /**\\n     * 日志id\\n     */\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    private LocalDateTime createTime;\\n\\n}\\n```\\n- - 对应的数据库表\\n```Java\\n/**\\n * 操作日志\\n *\\n * @author Felix\\n * @date 2021/08/01\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@TableName(\\\"tb_operation_log\\\")\\npublic class OperationLog {\\n\\n    /**\\n     * 日志id\\n     */\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    /**\\n     * 操作模块\\n     */\\n    private String optModule;\\n\\n    /**\\n     * 操作路径\\n     */\\n    private String optUrl;\\n\\n    /**\\n     * 操作类型\\n     */\\n    private String optType;\\n\\n    /**\\n     * 操作方法\\n     */\\n    private String optMethod;\\n\\n    /**\\n     * 操作描述\\n     */\\n    private String optDesc;\\n\\n    /**\\n     * 请求方式\\n     */\\n    private String requestMethod;\\n\\n    /**\\n     * 请求参数\\n     */\\n    private String requestParam;\\n\\n    /**\\n     * 返回数据\\n     */\\n    private String responseData;\\n\\n    /**\\n     * 用户id\\n     */\\n    private Integer userId;\\n\\n    /**\\n     * 用户昵称\\n     */\\n    private String nickname;\\n\\n    /**\\n     * 用户登录ip\\n     */\\n    private String ipAddress;\\n\\n    /**\\n     * ip来源\\n     */\\n    private String ipSource;\\n\\n    /**\\n     * 创建时间\\n     */\\n    @TableField(fill = FieldFill.INSERT)\\n    private LocalDateTime createTime;\\n\\n    /**\\n     * 修改时间\\n     */\\n    @TableField(fill = FieldFill.UPDATE)\\n    private LocalDateTime updateTime;\\n\\n}\\n\\n```\\n- - 根据条件进行搜索日志消息\\n```Java\\n/**\\n * 查询条件\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\n@Data\\n@Builder\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@ApiModel(description = \\\"查询条件\\\")\\npublic class ConditionVO {\\n\\n    /**\\n     * 页码\\n     */\\n    @ApiModelProperty(name = \\\"current\\\", value = \\\"页码\\\", dataType = \\\"Long\\\")\\n    private Long current;\\n\\n    /**\\n     * 条数\\n     */\\n    @ApiModelProperty(name = \\\"size\\\", value = \\\"条数\\\", dataType = \\\"Long\\\")\\n    private Long size;\\n\\n    /**\\n     * 搜索内容\\n     */\\n    @ApiModelProperty(name = \\\"keywords\\\", value = \\\"搜索内容\\\", dataType = \\\"String\\\")\\n    private String keywords;\\n\\n    /**\\n     * 分类id\\n     */\\n    @ApiModelProperty(name = \\\"categoryId\\\", value = \\\"分类id\\\", dataType = \\\"Integer\\\")\\n    private Integer categoryId;\\n\\n    /**\\n     * 标签id\\n     */\\n    @ApiModelProperty(name = \\\"tagId\\\", value = \\\"标签id\\\", dataType = \\\"Integer\\\")\\n    private Integer tagId;\\n\\n    /**\\n     * 相册id\\n     */\\n    @ApiModelProperty(name = \\\"albumId\\\", value = \\\"相册id\\\", dataType = \\\"Integer\\\")\\n    private Integer albumId;\\n\\n    /**\\n     * 登录类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"登录类型\\\", dataType = \\\"Integer\\\")\\n    private Integer loginType;\\n\\n    /**\\n     * 类型\\n     */\\n    @ApiModelProperty(name = \\\"type\\\", value = \\\"类型\\\", dataType = \\\"Integer\\\")\\n    private Integer type;\\n\\n    /**\\n     * 状态\\n     */\\n    @ApiModelProperty(name = \\\"status\\\", value = \\\"状态\\\", dataType = \\\"Integer\\\")\\n    private Integer status;\\n\\n    /**\\n     * 开始时间\\n     */\\n    @ApiModelProperty(name = \\\"startTime\\\", value = \\\"开始时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime startTime;\\n\\n    /**\\n     * 结束时间\\n     */\\n    @ApiModelProperty(name = \\\"endTime\\\", value = \\\"结束时间\\\", dataType = \\\"LocalDateTime\\\")\\n    private LocalDateTime endTime;\\n\\n    /**\\n     * 是否删除\\n     */\\n    @ApiModelProperty(name = \\\"isDelete\\\", value = \\\"是否删除\\\", dataType = \\\"Integer\\\")\\n    private Integer isDelete;\\n\\n    /**\\n     * 是否审核\\n     */\\n    @ApiModelProperty(name = \\\"isReview\\\", value = \\\"是否审核\\\", dataType = \\\"Integer\\\")\\n    private Integer isReview;\\n\\n}\\n```\\n- 操作日志的Service\\n```Java\\n/**\\n * 操作日志服务\\n *\\n * @author Felix\\n * @date 2021/07/29\\n */\\npublic interface OperationLogService extends IService<OperationLog> {\\n\\n    /**\\n     * 查询日志列表\\n     *\\n     * @param conditionVO 根据条件搜索文章\\n     * @return 日志列表\\n     */\\n    PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\\n\\n}\\n\\n```\\n3. 操作日志Impl\\n\\n```Java\\n/**\\n * 操作日志服务\\n *  PageUtils 分页工具类\\n * @author Felix\\n * @date 2021/08/08\\n */\\n@Service\\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogDao, OperationLog> implements OperationLogService {\\n\\n    @Override\\n    public PageResult<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\\n        Page<OperationLog> page = new Page<>(PageUtils.getCurrent(), PageUtils.getSize());\\n        // 查询日志列表  通过系统模块或者操作描述(关键字)进行搜索日志消息\\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\\n                .or()\\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\\n                .orderByDesc(OperationLog::getId));\\n        List<OperationLogDTO> operationLogDTOList = BeanCopyUtils.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\\n        return new PageResult<>(operationLogDTOList, (int) operationLogPage.getTotal());\\n    }\\n\\n}\\n```\\n4. 操作日志controller\\n```Java\\n/**\\n * 日志控制器\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Api(tags = \\\"日志模块\\\")\\n@RestController\\npublic class LogController {\\n    @Autowired\\n    private OperationLogService operationLogService;\\n\\n    /**\\n     * 查看操作日志\\n     *\\n     * @param conditionVO 条件\\n     * @return {@link Result<OperationLogDTO>} 日志列表\\n     */\\n    @ApiOperation(value = \\\"查看操作日志\\\")\\n    @GetMapping(\\\"/admin/operation/logs\\\")\\n    public Result<PageResult<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\\n        return Result.ok(operationLogService.listOperationLogs(conditionVO));\\n    }\\n\\n    /**\\n     * 删除操作日志\\n     *\\n     * @param logIdList 日志id列表\\n     * @return {@link Result<>}\\n     */\\n    @ApiOperation(value = \\\"删除操作日志\\\")\\n    @DeleteMapping(\\\"/admin/operation/logs\\\")\\n    public Result<?> deleteOperationLogs(@RequestBody List<Integer> logIdList) {\\n        operationLogService.removeByIds(logIdList);\\n        return Result.ok();\\n    }\\n\\n}\\n```\\n# 效果\\n通过系统模块或者操作描述(关键字)进行搜索日志消息\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/35da2d7b4bf48b4a2644832bbcd42bcc.png)\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/46aed129263c4e9dc7104860c3c2ed68.png)\\n# 通过切入点进行查看日志消息\\n1. 首先需要切面\\n```Java\\n/**\\n * 操作日志切面处理\\n *\\n * @author Felix\\n * @date 2021/07/27\\n */\\n@Aspect\\n@Component\\npublic class OptLogAspect {\\n\\n    @Autowired\\n    private OperationLogDao operationLogDao;\\n\\n    /**\\n     * 设置操作日志切入点 记录操作日志 在注解的位置切入代码\\n     */\\n    @Pointcut(\\\"@annotation(com.minzheng.blog.annotation.OptLog)\\\")\\n    public void optLogPointCut() {}\\n\\n\\n    /**\\n     * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行\\n     *\\n     * @param value 就是上面切入点的方法\\n     * @param joinPoint 切入点\\n     * @param keys      返回结果\\n     */\\n    @AfterReturning(value = \\\"optLogPointCut()\\\", returning = \\\"keys\\\")\\n    @SuppressWarnings(\\\"unchecked\\\")\\n    public void saveOptLog(JoinPoint joinPoint, Object keys) {\\n        // 获取RequestAttributes\\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\\n        // 从获取RequestAttributes中获取HttpServletRequest的信息\\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\\n        OperationLog operationLog = new OperationLog();\\n        // 从切面织入点处通过反射机制获取织入点处的方法\\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\\n        // 获取切入点所在的方法\\n        Method method = signature.getMethod();\\n        // 获取操作\\n        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);\\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\\n        OptLog optLog = method.getAnnotation(OptLog.class);\\n        // 操作模块\\n        operationLog.setOptModule(api.tags()[0]);\\n        // 操作类型\\n        operationLog.setOptType(optLog.optType());\\n        // 操作描述\\n        operationLog.setOptDesc(apiOperation.value());\\n        // 获取请求的类名\\n        String className = joinPoint.getTarget().getClass().getName();\\n        // 获取请求的方法名\\n        String methodName = method.getName();\\n        methodName = className + \\\".\\\" + methodName;\\n        // 请求方式\\n        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\\n        // 请求方法\\n        operationLog.setOptMethod(methodName);\\n        // 请求参数\\n        operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\\n        // 返回结果\\n        operationLog.setResponseData(JSON.toJSONString(keys));\\n        // 请求用户ID\\n        operationLog.setUserId(UserUtils.getLoginUser().getId());\\n        // 请求用户\\n        operationLog.setNickname(UserUtils.getLoginUser().getNickname());\\n        // 请求IP\\n        String ipAddress = IpUtils.getIpAddress(request);\\n        operationLog.setIpAddress(ipAddress);\\n        operationLog.setIpSource(IpUtils.getIpSource(ipAddress));\\n        // 请求URL\\n        operationLog.setOptUrl(request.getRequestURI());\\n        operationLogDao.insert(operationLog);\\n    }\\n\\n}\\n```\\n2. 在controller中使用切点注解\\n```Java\\n /**\\n     * 添加或修改文章\\n     *\\n     * @param articleVO 文章信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = SAVE_OR_UPDATE)\\n    @ApiOperation(value = \\\"添加或修改文章\\\")\\n    @PostMapping(\\\"/admin/articles\\\")\\n    public Result<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\\n        articleService.saveOrUpdateArticle(articleVO);\\n        return Result.ok();\\n    }\\n\\n    /**\\n     * 修改文章置顶状态\\n     *\\n     * @param articleTopVO 文章置顶信息\\n     * @return {@link Result<>}\\n     */\\n    @OptLog(optType = UPDATE)\\n    @ApiOperation(value = \\\"修改文章置顶\\\")\\n    @PutMapping(\\\"/admin/articles/top\\\")\\n    public Result<?> updateArticleTop(@Valid @RequestBody ArticleTopVO articleTopVO) {\\n        articleService.updateArticleTop(articleTopVO);\\n        return Result.ok();\\n    }\\n```\\n3. 在操作日志可以看到有关这两个接口的消息\\n![image.png](http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/b243fa449c283dc03ef27e6600afcfab.png)\",\"articleCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/articles/9929ed2c9e849f619e09c1e3d084b791.jpg\",\"articleTitle\":\"日志操作\",\"categoryName\":\"Java\",\"id\":72,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2023-11-30 23:42:08', NULL);
INSERT INTO `tb_operation_log` VALUES (1143, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这是测试文章的内容。\",\"articleCover\":\"http://example.com/image.jpg\",\"articleTitle\":\"测试文章标题\",\"categoryName\":\"测试分类\",\"id\":1,\"isTop\":0,\"originalUrl\":\"http://example.com/original\",\"status\":1,\"tagNameList\":[\"标签1\",\"标签2\"],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-28 17:49:04', NULL);
INSERT INTO `tb_operation_log` VALUES (1144, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这是测试文章的内容。\",\"articleCover\":\"http://example.com/image.jpg\",\"articleTitle\":\"测试文章标题\",\"categoryName\":\"测试分类\",\"id\":12,\"isTop\":0,\"originalUrl\":\"http://example.com/original\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-28 18:04:01', NULL);
INSERT INTO `tb_operation_log` VALUES (1145, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这是测试文章的内容。\",\"articleCover\":\"http://example.com/image.jpg\",\"articleTitle\":\"测试文章标题\",\"categoryName\":\"测试分类\",\"id\":21,\"isTop\":0,\"originalUrl\":\"http://example.com/original\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-28 18:53:35', NULL);
INSERT INTO `tb_operation_log` VALUES (1146, '文章模块', '修改', '/admin/articles/top', 'com.minzheng.blog.controller.ArticleController.updateArticleTop', '修改文章置顶', '[{\"id\":68,\"isTop\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-28 23:14:34', NULL);
INSERT INTO `tb_operation_log` VALUES (1147, '文章模块', '修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.updateArticleDelete', '恢复或删除文章', '[{\"idList\":[87],\"isDelete\":87}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-29 00:49:30', NULL);
INSERT INTO `tb_operation_log` VALUES (1148, '文章模块', '删除', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.deleteArticles', '物理删除文章', '[[87,88]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-29 11:24:00', NULL);
INSERT INTO `tb_operation_log` VALUES (1149, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这是测试文章的内容。\",\"articleCover\":\"http://example.com/image.jpg\",\"articleTitle\":\"测试文章标题\",\"categoryName\":\"测试分类\",\"id\":1,\"isTop\":0,\"originalUrl\":\"http://example.com/original\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-29 17:50:50', NULL);
INSERT INTO `tb_operation_log` VALUES (1150, '文章模块', '新增或修改', '/admin/articles', 'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle', '添加或修改文章', '[{\"articleContent\":\"这是测试文章的内容。\",\"articleCover\":\"http://example.com/image.jpg\",\"articleTitle\":\"测试文章标题222\",\"categoryName\":\"测试分类\",\"id\":1,\"isTop\":0,\"originalUrl\":\"http://example.com/original\",\"status\":1,\"tagNameList\":[],\"type\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-29 17:50:56', NULL);
INSERT INTO `tb_operation_log` VALUES (1151, '博客信息模块', '修改', '/admin/about', 'com.minzheng.blog.controller.BlogInfoController.updateAbout', '修改关于我信息', '[{\"aboutContent\":\"This is the updated content about me.\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-29 20:43:20', NULL);
INSERT INTO `tb_operation_log` VALUES (1152, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"测试分类名是否成功\",\"id\":191}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-30 10:59:03', NULL);
INSERT INTO `tb_operation_log` VALUES (1153, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"测试33333\",\"id\":192}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-30 11:31:25', NULL);
INSERT INTO `tb_operation_log` VALUES (1154, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"分类标签2222\",\"id\":192}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-30 16:12:38', NULL);
INSERT INTO `tb_operation_log` VALUES (1155, '分类模块', '新增或修改', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory', '添加或修改分类', '[{\"categoryName\":\"分类标签2223332\",\"id\":193}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-30 16:12:49', NULL);
INSERT INTO `tb_operation_log` VALUES (1156, '分类模块', '删除', '/admin/categories', 'com.minzheng.blog.controller.CategoryController.deleteCategories', '删除分类', '[[198]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-30 16:13:08', NULL);
INSERT INTO `tb_operation_log` VALUES (1157, '评论模块', '删除', '/admin/comments', 'com.minzheng.blog.controller.CommentController.deleteComments', '删除评论', '[[731]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '127.0.0.1', '', '2024-07-30 23:48:12', NULL);
INSERT INTO `tb_operation_log` VALUES (1158, '评论模块', '删除', '/admin/comments', 'com.minzheng.blog.controller.CommentController.deleteComments', '删除评论', '[[734]]', 'DELETE', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-31 17:11:08', NULL);
INSERT INTO `tb_operation_log` VALUES (1159, '友链模块', '新增或修改', '/admin/links', 'com.minzheng.blog.controller.FriendLinkController.saveOrUpdateFriendLink', '保存或修改友链', '[{\"id\":2,\"linkAddress\":\"http://example.com\",\"linkAvatar\":\"https://blog-felix.oss-cn-beijing.aliyuncs.com/config/c45951c82d9274a38d58d0c840d1cda7.jpg\",\"linkIntro\":\"测试友链\",\"linkName\":\"Example Link\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-07-31 18:41:38', NULL);
INSERT INTO `tb_operation_log` VALUES (1160, '留言模块', '修改', '/admin/messages/review', 'com.minzheng.blog.controller.MessageController.updateMessagesReview', '审核留言', '[{\"idList\":[3944,3945],\"isReview\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-02 10:30:45', NULL);
INSERT INTO `tb_operation_log` VALUES (1161, '相册模块', '新增或修改', '/admin/photos/albums', 'com.minzheng.blog.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum', '保存或更新相册', '[{\"albumCover\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/7ed270813bd642c86bf6cb438a504738.jpg\",\"albumDesc\":\"测试是否成功\",\"albumName\":\"测试\",\"id\":9,\"status\":1}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-02 23:05:47', NULL);
INSERT INTO `tb_operation_log` VALUES (1162, '照片模块', '修改', '/admin/photos', 'com.minzheng.blog.controller.PhotoController.updatePhoto', '更新照片信息', '[{\"id\":34,\"photoDesc\":\"新的照片描述\",\"photoName\":\"测试名\"}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-04 13:56:07', NULL);
INSERT INTO `tb_operation_log` VALUES (1163, '照片模块', '新增', '/admin/photos', 'com.minzheng.blog.controller.PhotoController.savePhotos', '保存照片', '[{\"albumId\":9,\"photoUrlList\":[\"http://example.com/photo1.jpg\",\"http://example.com/photo2.jpg\"]}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-04 14:15:24', NULL);
INSERT INTO `tb_operation_log` VALUES (1164, '照片模块', '修改', '/admin/photos/album', 'com.minzheng.blog.controller.PhotoController.updatePhotosAlbum', '移动照片相册', '[{\"albumId\":9,\"photoIdList\":[1,2]}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-04 15:01:05', NULL);
INSERT INTO `tb_operation_log` VALUES (1165, '照片模块', '修改', '/admin/photos/delete', 'com.minzheng.blog.controller.PhotoController.updatePhotoDelete', '更新照片删除状态', '[{\"idList\":[34,39,40],\"isDelete\":1}]', 'PUT', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-04 15:29:16', NULL);
INSERT INTO `tb_operation_log` VALUES (1166, '角色模块', '新增或修改', '/admin/role', 'com.minzheng.blog.controller.RoleController.saveOrUpdateRole', '保存或更新角色', '[{\"id\":4,\"roleLabel\":\"test\",\"roleName\":\"测试员1\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-06 09:50:20', NULL);
INSERT INTO `tb_operation_log` VALUES (1167, '角色模块', '新增或修改', '/admin/role', 'com.minzheng.blog.controller.RoleController.saveOrUpdateRole', '保存或更新角色', '[{\"id\":4,\"roleLabel\":\"test\",\"roleName\":\"测试员4\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-06 09:50:35', NULL);
INSERT INTO `tb_operation_log` VALUES (1168, '角色模块', '新增或修改', '/admin/role', 'com.minzheng.blog.controller.RoleController.saveOrUpdateRole', '保存或更新角色', '[{\"menuIdList\":[1,2,6,7,8],\"roleLabel\":\"user\",\"roleName\":\"测试员用户\"}]', 'POST', '{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}', 996, 'Felix', '0:0:0:0:0:0:0:1', '', '2024-08-06 10:07:06', NULL);

-- ----------------------------
-- Table structure for tb_page
-- ----------------------------
DROP TABLE IF EXISTS `tb_page`;
CREATE TABLE `tb_page`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '页面id',
  `page_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面名',
  `page_label` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '页面标签',
  `page_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面封面',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 906 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '页面' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_page
-- ----------------------------
INSERT INTO `tb_page` VALUES (1, '首页', 'home', 'https://blog-felix.oss-cn-beijing.aliyuncs.com/articles/2.jpg', '2021-08-07 10:32:36', '2021-12-27 12:19:01');
INSERT INTO `tb_page` VALUES (2, '归档', 'archive', 'https://static.talkxj.com/config/643f28683e1c59a80ccfc9cb19735a9c.jpg', '2021-08-07 10:32:36', '2021-10-04 15:43:14');
INSERT INTO `tb_page` VALUES (3, '分类', 'category', 'https://static.talkxj.com/config/83be0017d7f1a29441e33083e7706936.jpg', '2021-08-07 10:32:36', '2021-10-04 15:43:31');
INSERT INTO `tb_page` VALUES (4, '标签', 'tag', 'https://static.talkxj.com/config/a6f141372509365891081d755da963a1.png', '2021-08-07 10:32:36', '2021-10-04 15:43:38');
INSERT INTO `tb_page` VALUES (5, '相册', 'album', 'https://static.talkxj.com/config/1ecb6fc94e38c38713000efe37492e73.png', '2021-08-07 10:32:36', '2021-12-27 12:23:12');
INSERT INTO `tb_page` VALUES (6, '友链', 'link', 'https://static.talkxj.com/config/9034edddec5b8e8542c2e61b0da1c1da.jpg', '2021-08-07 10:32:36', '2021-10-04 15:44:02');
INSERT INTO `tb_page` VALUES (7, '关于', 'about', 'https://static.talkxj.com/config/2a56d15dd742ff8ac238a512d9a472a1.jpg', '2021-08-07 10:32:36', '2021-10-04 15:44:08');
INSERT INTO `tb_page` VALUES (8, '留言', 'message', 'https://static.talkxj.com/config/acfeab8379508233fa7e4febf90c2f2e.png', '2021-08-07 10:32:36', '2021-10-04 16:11:45');
INSERT INTO `tb_page` VALUES (9, '个人中心', 'user', 'https://static.talkxj.com/config/ebae4c93de1b286a8d50aa62612caa59.jpeg', '2021-08-07 10:32:36', '2021-10-04 15:45:17');
INSERT INTO `tb_page` VALUES (10, '文章列表', 'articleList', 'https://static.talkxj.com/config/924d65cc8312e6cdad2160eb8fce6831.jpg', '2021-08-10 15:36:19', '2021-10-04 15:45:45');
INSERT INTO `tb_page` VALUES (904, '说说', 'talk', 'https://static.talkxj.com/config/a741b0656a9a3db2e2ba5c2f4140eb6c.jpg', '2022-01-23 00:51:24', '2022-01-23 03:01:21');
INSERT INTO `tb_page` VALUES (905, '测试', 'Sample Label', 'http://example.com/cover.png', '2024-08-02 11:02:23', NULL);

-- ----------------------------
-- Table structure for tb_photo
-- ----------------------------
DROP TABLE IF EXISTS `tb_photo`;
CREATE TABLE `tb_photo`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_id` int NOT NULL COMMENT '相册id',
  `photo_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片名',
  `photo_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '照片描述',
  `photo_src` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片地址',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 41 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '照片' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_photo
-- ----------------------------
INSERT INTO `tb_photo` VALUES (29, 8, '1728632486096900097', NULL, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/7ed270813bd642c86bf6cb438a504738.jpg', 0, '2023-11-26 12:31:16', NULL);
INSERT INTO `tb_photo` VALUES (30, 8, '1728632486109483009', NULL, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/13464b9a67c9aee1770a846e9a2674d2.jpg', 0, '2023-11-26 12:31:16', NULL);
INSERT INTO `tb_photo` VALUES (31, 8, '1728632486109483010', NULL, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/5dd6ed872f385faf64b02363858d14ca.jpg', 0, '2023-11-26 12:31:16', NULL);
INSERT INTO `tb_photo` VALUES (32, 8, '1728632486109483011', NULL, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/4adcb161393e7d0bc9f3aa21bea75d0a.jpg', 0, '2023-11-26 12:31:16', NULL);
INSERT INTO `tb_photo` VALUES (33, 8, '1728632486109483012', NULL, 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/11b16bda6e0d43c8074475b83ad55794.jpg', 0, '2023-11-26 12:31:16', NULL);

-- ----------------------------
-- Table structure for tb_photo_album
-- ----------------------------
DROP TABLE IF EXISTS `tb_photo_album`;
CREATE TABLE `tb_photo_album`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册名',
  `album_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册描述',
  `album_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册封面',
  `is_delete` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态值 1公开 2私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '相册' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_photo_album
-- ----------------------------
INSERT INTO `tb_photo_album` VALUES (8, '马里奥', '马里奥', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/photos/7ed270813bd642c86bf6cb438a504738.jpg', 0, 1, '2023-11-26 12:30:46', NULL);

-- ----------------------------
-- Table structure for tb_resource
-- ----------------------------
DROP TABLE IF EXISTS `tb_resource`;
CREATE TABLE `tb_resource`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `resource_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '资源名',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '权限路径',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '请求方式',
  `parent_id` int NULL DEFAULT NULL COMMENT '父权限id',
  `is_anonymous` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否匿名访问 0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 294 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_resource
-- ----------------------------
INSERT INTO `tb_resource` VALUES (165, '分类模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (166, '博客信息模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (167, '友链模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (168, '文章模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (169, '日志模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (170, '标签模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (171, '照片模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (172, '用户信息模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (173, '用户账号模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (174, '留言模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (175, '相册模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (176, '菜单模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (177, '角色模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (178, '评论模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (179, '资源模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (180, '页面模块', NULL, NULL, NULL, 0, '2021-08-11 21:04:21', NULL);
INSERT INTO `tb_resource` VALUES (181, '查看博客信息', '/', 'GET', 166, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:29');
INSERT INTO `tb_resource` VALUES (182, '查看关于我信息', '/about', 'GET', 166, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:29');
INSERT INTO `tb_resource` VALUES (183, '查看后台信息', '/admin', 'GET', 166, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (184, '修改关于我信息', '/admin/about', 'PUT', 166, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (185, '查看后台文章', '/admin/articles', 'GET', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (186, '添加或修改文章', '/admin/articles', 'POST', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (187, '恢复或删除文章', '/admin/articles', 'PUT', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (188, '物理删除文章', '/admin/articles', 'DELETE', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (189, '上传文章图片', '/admin/articles/images', 'POST', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (190, '修改文章置顶', '/admin/articles/top', 'PUT', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (191, '根据id查看后台文章', '/admin/articles/*', 'GET', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (192, '查看后台分类列表', '/admin/categories', 'GET', 165, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (193, '添加或修改分类', '/admin/categories', 'POST', 165, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (194, '删除分类', '/admin/categories', 'DELETE', 165, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (195, '搜索文章分类', '/admin/categories/search', 'GET', 165, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (196, '查询后台评论', '/admin/comments', 'GET', 178, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (197, '删除评论', '/admin/comments', 'DELETE', 178, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (198, '审核评论', '/admin/comments/review', 'PUT', 178, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (199, '查看后台友链列表', '/admin/links', 'GET', 167, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (200, '保存或修改友链', '/admin/links', 'POST', 167, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (201, '删除友链', '/admin/links', 'DELETE', 167, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (202, '查看菜单列表', '/admin/menus', 'GET', 176, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (203, '新增或修改菜单', '/admin/menus', 'POST', 176, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (204, '删除菜单', '/admin/menus/*', 'DELETE', 176, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (205, '查看后台留言列表', '/admin/messages', 'GET', 174, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (206, '删除留言', '/admin/messages', 'DELETE', 174, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (207, '审核留言', '/admin/messages/review', 'PUT', 174, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (208, '查看操作日志', '/admin/operation/logs', 'GET', 169, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (209, '删除操作日志', '/admin/operation/logs', 'DELETE', 169, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (210, '获取页面列表', '/admin/pages', 'GET', 180, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (211, '保存或更新页面', '/admin/pages', 'POST', 180, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (212, '删除页面', '/admin/pages/*', 'DELETE', 180, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (213, '根据相册id获取照片列表', '/admin/photos', 'GET', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (214, '保存照片', '/admin/photos', 'POST', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (215, '更新照片信息', '/admin/photos', 'PUT', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (216, '删除照片', '/admin/photos', 'DELETE', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (217, '移动照片相册', '/admin/photos/album', 'PUT', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (218, '查看后台相册列表', '/admin/photos/albums', 'GET', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (219, '保存或更新相册', '/admin/photos/albums', 'POST', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (220, '上传相册封面', '/admin/photos/albums/cover', 'POST', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (221, '获取后台相册列表信息', '/admin/photos/albums/info', 'GET', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (222, '根据id删除相册', '/admin/photos/albums/*', 'DELETE', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (223, '根据id获取后台相册信息', '/admin/photos/albums/*/info', 'GET', 175, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (224, '更新照片删除状态', '/admin/photos/delete', 'PUT', 171, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (225, '查看资源列表', '/admin/resources', 'GET', 179, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (226, '新增或修改资源', '/admin/resources', 'POST', 179, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (227, '导入swagger接口', '/admin/resources/import/swagger', 'GET', 179, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (228, '删除资源', '/admin/resources/*', 'DELETE', 179, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (229, '保存或更新角色', '/admin/role', 'POST', 177, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (230, '查看角色菜单选项', '/admin/role/menus', 'GET', 176, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (231, '查看角色资源选项', '/admin/role/resources', 'GET', 179, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (232, '查询角色列表', '/admin/roles', 'GET', 177, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (233, '删除角色', '/admin/roles', 'DELETE', 177, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (234, '查询后台标签列表', '/admin/tags', 'GET', 170, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (235, '添加或修改标签', '/admin/tags', 'POST', 170, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (236, '删除标签', '/admin/tags', 'DELETE', 170, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (237, '搜索文章标签', '/admin/tags/search', 'GET', 170, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (238, '查看当前用户菜单', '/admin/user/menus', 'GET', 176, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (239, '查询后台用户列表', '/admin/users', 'GET', 173, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (240, '修改用户禁用状态', '/admin/users/disable', 'PUT', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (241, '查看在线用户', '/admin/users/online', 'GET', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (242, '修改管理员密码', '/admin/users/password', 'PUT', 173, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (243, '查询用户角色选项', '/admin/users/role', 'GET', 177, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (244, '修改用户角色', '/admin/users/role', 'PUT', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (245, '下线用户', '/admin/users/*/online', 'DELETE', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (246, '获取网站配置', '/admin/website/config', 'GET', 166, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (247, '更新网站配置', '/admin/website/config', 'PUT', 166, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (248, '根据相册id查看照片列表', '/albums/*/photos', 'GET', 171, 1, '2021-08-11 21:04:22', '2021-08-11 21:06:35');
INSERT INTO `tb_resource` VALUES (249, '查看首页文章', '/articles', 'GET', 168, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:45');
INSERT INTO `tb_resource` VALUES (250, '查看文章归档', '/articles/archives', 'GET', 168, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:47');
INSERT INTO `tb_resource` VALUES (251, '根据条件查询文章', '/articles/condition', 'GET', 168, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:47');
INSERT INTO `tb_resource` VALUES (252, '搜索文章', '/articles/search', 'GET', 168, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:48');
INSERT INTO `tb_resource` VALUES (253, '根据id查看文章', '/articles/*', 'GET', 168, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:49');
INSERT INTO `tb_resource` VALUES (254, '点赞文章', '/articles/*/like', 'POST', 168, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (255, '查看分类列表', '/categories', 'GET', 165, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:26');
INSERT INTO `tb_resource` VALUES (256, '查询评论', '/comments', 'GET', 178, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:33');
INSERT INTO `tb_resource` VALUES (257, '添加评论', '/comments', 'POST', 178, 0, '2021-08-11 21:04:22', '2021-08-11 21:10:05');
INSERT INTO `tb_resource` VALUES (258, '评论点赞', '/comments/*/like', 'POST', 178, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (259, '查询评论下的回复', '/comments/*/replies', 'GET', 178, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:30');
INSERT INTO `tb_resource` VALUES (260, '查看友链列表', '/links', 'GET', 167, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:41');
INSERT INTO `tb_resource` VALUES (261, '查看留言列表', '/messages', 'GET', 174, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:14');
INSERT INTO `tb_resource` VALUES (262, '添加留言', '/messages', 'POST', 174, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:15');
INSERT INTO `tb_resource` VALUES (263, '获取相册列表', '/photos/albums', 'GET', 175, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:20');
INSERT INTO `tb_resource` VALUES (264, '用户注册', '/register', 'POST', 173, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:01');
INSERT INTO `tb_resource` VALUES (265, '查询标签列表', '/tags', 'GET', 170, 1, '2021-08-11 21:04:22', '2021-08-11 21:06:30');
INSERT INTO `tb_resource` VALUES (267, '更新用户头像', '/users/avatar', 'POST', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (268, '发送邮箱验证码', '/users/code', 'GET', 173, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:02');
INSERT INTO `tb_resource` VALUES (269, '绑定用户邮箱', '/users/email', 'POST', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (270, '更新用户信息', '/users/info', 'PUT', 172, 0, '2021-08-11 21:04:22', NULL);
INSERT INTO `tb_resource` VALUES (271, 'qq登录', '/users/oauth/qq', 'POST', 173, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:06');
INSERT INTO `tb_resource` VALUES (272, '微博登录', '/users/oauth/weibo', 'POST', 173, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:06');
INSERT INTO `tb_resource` VALUES (273, '修改密码', '/users/password', 'PUT', 173, 1, '2021-08-11 21:04:22', '2021-08-11 21:07:09');
INSERT INTO `tb_resource` VALUES (274, '上传语音', '/voice', 'POST', 166, 1, '2021-08-11 21:04:22', '2021-08-11 21:05:33');
INSERT INTO `tb_resource` VALUES (275, '上传访客信息', '/report', 'POST', 166, 1, '2021-08-24 00:32:05', '2021-08-24 00:32:07');
INSERT INTO `tb_resource` VALUES (276, '获取用户区域分布', '/admin/users/area', 'GET', 173, 0, '2021-08-24 00:32:35', '2021-09-24 16:25:34');
INSERT INTO `tb_resource` VALUES (278, '说说模块', NULL, NULL, NULL, 0, '2022-01-24 01:29:13', NULL);
INSERT INTO `tb_resource` VALUES (279, '查看首页说说', '/home/talks', 'GET', 278, 1, '2022-01-24 01:29:29', '2022-01-24 01:31:56');
INSERT INTO `tb_resource` VALUES (280, '查看说说列表', '/talks', 'GET', 278, 1, '2022-01-24 01:29:52', '2022-01-24 01:31:56');
INSERT INTO `tb_resource` VALUES (281, '根据id查看说说', '/talks/*', 'GET', 278, 1, '2022-01-24 01:30:10', '2022-01-24 01:31:57');
INSERT INTO `tb_resource` VALUES (282, '点赞说说', '/talks/*/like', 'POST', 278, 0, '2022-01-24 01:30:30', NULL);
INSERT INTO `tb_resource` VALUES (283, '上传说说图片', '/admin/talks/images', 'POST', 278, 0, '2022-01-24 01:30:46', NULL);
INSERT INTO `tb_resource` VALUES (284, '保存或修改说说', '/admin/talks', 'POST', 278, 0, '2022-01-24 01:31:04', NULL);
INSERT INTO `tb_resource` VALUES (285, '删除说说', '/admin/talks', 'DELETE', 278, 0, '2022-01-24 01:31:22', NULL);
INSERT INTO `tb_resource` VALUES (286, '查看后台说说', '/admin/talks', 'GET', 278, 0, '2022-01-24 01:31:38', NULL);
INSERT INTO `tb_resource` VALUES (287, '根据id查看后台说说', '/admin/talks/*', 'GET', 278, 0, '2022-01-24 01:31:53', '2022-01-24 01:33:14');

-- ----------------------------
-- Table structure for tb_role
-- ----------------------------
DROP TABLE IF EXISTS `tb_role`;
CREATE TABLE `tb_role`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `role_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名',
  `role_label` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色描述',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用  0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_role
-- ----------------------------
INSERT INTO `tb_role` VALUES (1, '管理员', 'admin', 0, '2021-03-22 14:10:21', '2022-01-24 01:32:26');
INSERT INTO `tb_role` VALUES (2, '用户', 'user', 0, '2021-03-22 14:25:25', '2022-01-24 01:32:21');
INSERT INTO `tb_role` VALUES (3, '测试', 'test', 0, '2021-03-22 14:42:23', '2022-01-24 01:32:59');

-- ----------------------------
-- Table structure for tb_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `tb_role_menu`;
CREATE TABLE `tb_role_menu`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  `menu_id` int NULL DEFAULT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2532 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_role_menu
-- ----------------------------
INSERT INTO `tb_role_menu` VALUES (1397, 8, 1);
INSERT INTO `tb_role_menu` VALUES (1398, 8, 2);
INSERT INTO `tb_role_menu` VALUES (1399, 8, 6);
INSERT INTO `tb_role_menu` VALUES (1400, 8, 7);
INSERT INTO `tb_role_menu` VALUES (1401, 8, 8);
INSERT INTO `tb_role_menu` VALUES (1402, 8, 9);
INSERT INTO `tb_role_menu` VALUES (1403, 8, 10);
INSERT INTO `tb_role_menu` VALUES (1404, 8, 3);
INSERT INTO `tb_role_menu` VALUES (1405, 8, 11);
INSERT INTO `tb_role_menu` VALUES (1406, 8, 12);
INSERT INTO `tb_role_menu` VALUES (1407, 8, 202);
INSERT INTO `tb_role_menu` VALUES (1408, 8, 13);
INSERT INTO `tb_role_menu` VALUES (1409, 8, 14);
INSERT INTO `tb_role_menu` VALUES (1410, 8, 201);
INSERT INTO `tb_role_menu` VALUES (1411, 8, 4);
INSERT INTO `tb_role_menu` VALUES (1412, 8, 16);
INSERT INTO `tb_role_menu` VALUES (1413, 8, 15);
INSERT INTO `tb_role_menu` VALUES (1414, 8, 17);
INSERT INTO `tb_role_menu` VALUES (1415, 8, 18);
INSERT INTO `tb_role_menu` VALUES (1416, 8, 19);
INSERT INTO `tb_role_menu` VALUES (1417, 8, 20);
INSERT INTO `tb_role_menu` VALUES (1418, 8, 5);
INSERT INTO `tb_role_menu` VALUES (1595, 9, 1);
INSERT INTO `tb_role_menu` VALUES (1596, 9, 2);
INSERT INTO `tb_role_menu` VALUES (1597, 9, 6);
INSERT INTO `tb_role_menu` VALUES (1598, 9, 7);
INSERT INTO `tb_role_menu` VALUES (1599, 9, 8);
INSERT INTO `tb_role_menu` VALUES (1600, 9, 9);
INSERT INTO `tb_role_menu` VALUES (1601, 9, 10);
INSERT INTO `tb_role_menu` VALUES (1602, 9, 3);
INSERT INTO `tb_role_menu` VALUES (1603, 9, 11);
INSERT INTO `tb_role_menu` VALUES (1604, 9, 12);
INSERT INTO `tb_role_menu` VALUES (1605, 9, 202);
INSERT INTO `tb_role_menu` VALUES (1606, 9, 13);
INSERT INTO `tb_role_menu` VALUES (1607, 9, 14);
INSERT INTO `tb_role_menu` VALUES (1608, 9, 201);
INSERT INTO `tb_role_menu` VALUES (1609, 9, 4);
INSERT INTO `tb_role_menu` VALUES (1610, 9, 16);
INSERT INTO `tb_role_menu` VALUES (1611, 9, 15);
INSERT INTO `tb_role_menu` VALUES (1612, 9, 17);
INSERT INTO `tb_role_menu` VALUES (1613, 9, 18);
INSERT INTO `tb_role_menu` VALUES (1614, 9, 19);
INSERT INTO `tb_role_menu` VALUES (1615, 9, 20);
INSERT INTO `tb_role_menu` VALUES (1616, 9, 5);
INSERT INTO `tb_role_menu` VALUES (1639, 13, 2);
INSERT INTO `tb_role_menu` VALUES (1640, 13, 6);
INSERT INTO `tb_role_menu` VALUES (1641, 13, 7);
INSERT INTO `tb_role_menu` VALUES (1642, 13, 8);
INSERT INTO `tb_role_menu` VALUES (1643, 13, 9);
INSERT INTO `tb_role_menu` VALUES (1644, 13, 10);
INSERT INTO `tb_role_menu` VALUES (1645, 13, 3);
INSERT INTO `tb_role_menu` VALUES (1646, 13, 11);
INSERT INTO `tb_role_menu` VALUES (1647, 13, 12);
INSERT INTO `tb_role_menu` VALUES (2366, 14, 1);
INSERT INTO `tb_role_menu` VALUES (2367, 14, 2);
INSERT INTO `tb_role_menu` VALUES (2461, 1, 1);
INSERT INTO `tb_role_menu` VALUES (2462, 1, 2);
INSERT INTO `tb_role_menu` VALUES (2463, 1, 6);
INSERT INTO `tb_role_menu` VALUES (2464, 1, 7);
INSERT INTO `tb_role_menu` VALUES (2465, 1, 8);
INSERT INTO `tb_role_menu` VALUES (2466, 1, 9);
INSERT INTO `tb_role_menu` VALUES (2467, 1, 10);
INSERT INTO `tb_role_menu` VALUES (2468, 1, 3);
INSERT INTO `tb_role_menu` VALUES (2469, 1, 11);
INSERT INTO `tb_role_menu` VALUES (2470, 1, 12);
INSERT INTO `tb_role_menu` VALUES (2471, 1, 202);
INSERT INTO `tb_role_menu` VALUES (2472, 1, 13);
INSERT INTO `tb_role_menu` VALUES (2473, 1, 201);
INSERT INTO `tb_role_menu` VALUES (2474, 1, 213);
INSERT INTO `tb_role_menu` VALUES (2475, 1, 14);
INSERT INTO `tb_role_menu` VALUES (2476, 1, 15);
INSERT INTO `tb_role_menu` VALUES (2477, 1, 16);
INSERT INTO `tb_role_menu` VALUES (2478, 1, 4);
INSERT INTO `tb_role_menu` VALUES (2479, 1, 214);
INSERT INTO `tb_role_menu` VALUES (2480, 1, 209);
INSERT INTO `tb_role_menu` VALUES (2481, 1, 17);
INSERT INTO `tb_role_menu` VALUES (2482, 1, 18);
INSERT INTO `tb_role_menu` VALUES (2483, 1, 205);
INSERT INTO `tb_role_menu` VALUES (2484, 1, 206);
INSERT INTO `tb_role_menu` VALUES (2485, 1, 208);
INSERT INTO `tb_role_menu` VALUES (2486, 1, 210);
INSERT INTO `tb_role_menu` VALUES (2487, 1, 215);
INSERT INTO `tb_role_menu` VALUES (2488, 1, 216);
INSERT INTO `tb_role_menu` VALUES (2489, 1, 217);
INSERT INTO `tb_role_menu` VALUES (2490, 1, 218);
INSERT INTO `tb_role_menu` VALUES (2491, 1, 19);
INSERT INTO `tb_role_menu` VALUES (2492, 1, 20);
INSERT INTO `tb_role_menu` VALUES (2493, 1, 5);
INSERT INTO `tb_role_menu` VALUES (2494, 3, 1);
INSERT INTO `tb_role_menu` VALUES (2495, 3, 2);
INSERT INTO `tb_role_menu` VALUES (2496, 3, 6);
INSERT INTO `tb_role_menu` VALUES (2497, 3, 7);
INSERT INTO `tb_role_menu` VALUES (2498, 3, 8);
INSERT INTO `tb_role_menu` VALUES (2499, 3, 9);
INSERT INTO `tb_role_menu` VALUES (2500, 3, 10);
INSERT INTO `tb_role_menu` VALUES (2501, 3, 3);
INSERT INTO `tb_role_menu` VALUES (2502, 3, 11);
INSERT INTO `tb_role_menu` VALUES (2503, 3, 12);
INSERT INTO `tb_role_menu` VALUES (2504, 3, 202);
INSERT INTO `tb_role_menu` VALUES (2505, 3, 13);
INSERT INTO `tb_role_menu` VALUES (2506, 3, 201);
INSERT INTO `tb_role_menu` VALUES (2507, 3, 213);
INSERT INTO `tb_role_menu` VALUES (2508, 3, 14);
INSERT INTO `tb_role_menu` VALUES (2509, 3, 15);
INSERT INTO `tb_role_menu` VALUES (2510, 3, 16);
INSERT INTO `tb_role_menu` VALUES (2511, 3, 4);
INSERT INTO `tb_role_menu` VALUES (2512, 3, 214);
INSERT INTO `tb_role_menu` VALUES (2513, 3, 209);
INSERT INTO `tb_role_menu` VALUES (2514, 3, 17);
INSERT INTO `tb_role_menu` VALUES (2515, 3, 18);
INSERT INTO `tb_role_menu` VALUES (2516, 3, 205);
INSERT INTO `tb_role_menu` VALUES (2517, 3, 206);
INSERT INTO `tb_role_menu` VALUES (2518, 3, 208);
INSERT INTO `tb_role_menu` VALUES (2519, 3, 210);
INSERT INTO `tb_role_menu` VALUES (2520, 3, 215);
INSERT INTO `tb_role_menu` VALUES (2521, 3, 216);
INSERT INTO `tb_role_menu` VALUES (2522, 3, 217);
INSERT INTO `tb_role_menu` VALUES (2523, 3, 218);
INSERT INTO `tb_role_menu` VALUES (2524, 3, 19);
INSERT INTO `tb_role_menu` VALUES (2525, 3, 20);
INSERT INTO `tb_role_menu` VALUES (2526, 3, 5);
INSERT INTO `tb_role_menu` VALUES (2527, 7, 1);
INSERT INTO `tb_role_menu` VALUES (2528, 7, 2);
INSERT INTO `tb_role_menu` VALUES (2529, 7, 6);
INSERT INTO `tb_role_menu` VALUES (2530, 7, 7);
INSERT INTO `tb_role_menu` VALUES (2531, 7, 8);

-- ----------------------------
-- Table structure for tb_role_resource
-- ----------------------------
DROP TABLE IF EXISTS `tb_role_resource`;
CREATE TABLE `tb_role_resource`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  `resource_id` int NULL DEFAULT NULL COMMENT '权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4886 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_role_resource
-- ----------------------------
INSERT INTO `tb_role_resource` VALUES (4750, 14, 238);
INSERT INTO `tb_role_resource` VALUES (4751, 2, 254);
INSERT INTO `tb_role_resource` VALUES (4752, 2, 267);
INSERT INTO `tb_role_resource` VALUES (4753, 2, 269);
INSERT INTO `tb_role_resource` VALUES (4754, 2, 270);
INSERT INTO `tb_role_resource` VALUES (4755, 2, 257);
INSERT INTO `tb_role_resource` VALUES (4756, 2, 258);
INSERT INTO `tb_role_resource` VALUES (4757, 2, 282);
INSERT INTO `tb_role_resource` VALUES (4758, 1, 165);
INSERT INTO `tb_role_resource` VALUES (4759, 1, 192);
INSERT INTO `tb_role_resource` VALUES (4760, 1, 193);
INSERT INTO `tb_role_resource` VALUES (4761, 1, 194);
INSERT INTO `tb_role_resource` VALUES (4762, 1, 195);
INSERT INTO `tb_role_resource` VALUES (4763, 1, 166);
INSERT INTO `tb_role_resource` VALUES (4764, 1, 183);
INSERT INTO `tb_role_resource` VALUES (4765, 1, 184);
INSERT INTO `tb_role_resource` VALUES (4766, 1, 246);
INSERT INTO `tb_role_resource` VALUES (4767, 1, 247);
INSERT INTO `tb_role_resource` VALUES (4768, 1, 167);
INSERT INTO `tb_role_resource` VALUES (4769, 1, 199);
INSERT INTO `tb_role_resource` VALUES (4770, 1, 200);
INSERT INTO `tb_role_resource` VALUES (4771, 1, 201);
INSERT INTO `tb_role_resource` VALUES (4772, 1, 168);
INSERT INTO `tb_role_resource` VALUES (4773, 1, 185);
INSERT INTO `tb_role_resource` VALUES (4774, 1, 186);
INSERT INTO `tb_role_resource` VALUES (4775, 1, 187);
INSERT INTO `tb_role_resource` VALUES (4776, 1, 188);
INSERT INTO `tb_role_resource` VALUES (4777, 1, 189);
INSERT INTO `tb_role_resource` VALUES (4778, 1, 190);
INSERT INTO `tb_role_resource` VALUES (4779, 1, 191);
INSERT INTO `tb_role_resource` VALUES (4780, 1, 254);
INSERT INTO `tb_role_resource` VALUES (4781, 1, 169);
INSERT INTO `tb_role_resource` VALUES (4782, 1, 208);
INSERT INTO `tb_role_resource` VALUES (4783, 1, 209);
INSERT INTO `tb_role_resource` VALUES (4784, 1, 170);
INSERT INTO `tb_role_resource` VALUES (4785, 1, 234);
INSERT INTO `tb_role_resource` VALUES (4786, 1, 235);
INSERT INTO `tb_role_resource` VALUES (4787, 1, 236);
INSERT INTO `tb_role_resource` VALUES (4788, 1, 237);
INSERT INTO `tb_role_resource` VALUES (4789, 1, 171);
INSERT INTO `tb_role_resource` VALUES (4790, 1, 213);
INSERT INTO `tb_role_resource` VALUES (4791, 1, 214);
INSERT INTO `tb_role_resource` VALUES (4792, 1, 215);
INSERT INTO `tb_role_resource` VALUES (4793, 1, 216);
INSERT INTO `tb_role_resource` VALUES (4794, 1, 217);
INSERT INTO `tb_role_resource` VALUES (4795, 1, 224);
INSERT INTO `tb_role_resource` VALUES (4796, 1, 172);
INSERT INTO `tb_role_resource` VALUES (4797, 1, 240);
INSERT INTO `tb_role_resource` VALUES (4798, 1, 241);
INSERT INTO `tb_role_resource` VALUES (4799, 1, 244);
INSERT INTO `tb_role_resource` VALUES (4800, 1, 245);
INSERT INTO `tb_role_resource` VALUES (4801, 1, 267);
INSERT INTO `tb_role_resource` VALUES (4802, 1, 269);
INSERT INTO `tb_role_resource` VALUES (4803, 1, 270);
INSERT INTO `tb_role_resource` VALUES (4804, 1, 173);
INSERT INTO `tb_role_resource` VALUES (4805, 1, 239);
INSERT INTO `tb_role_resource` VALUES (4806, 1, 242);
INSERT INTO `tb_role_resource` VALUES (4807, 1, 276);
INSERT INTO `tb_role_resource` VALUES (4808, 1, 174);
INSERT INTO `tb_role_resource` VALUES (4809, 1, 205);
INSERT INTO `tb_role_resource` VALUES (4810, 1, 206);
INSERT INTO `tb_role_resource` VALUES (4811, 1, 207);
INSERT INTO `tb_role_resource` VALUES (4812, 1, 175);
INSERT INTO `tb_role_resource` VALUES (4813, 1, 218);
INSERT INTO `tb_role_resource` VALUES (4814, 1, 219);
INSERT INTO `tb_role_resource` VALUES (4815, 1, 220);
INSERT INTO `tb_role_resource` VALUES (4816, 1, 221);
INSERT INTO `tb_role_resource` VALUES (4817, 1, 222);
INSERT INTO `tb_role_resource` VALUES (4818, 1, 223);
INSERT INTO `tb_role_resource` VALUES (4819, 1, 176);
INSERT INTO `tb_role_resource` VALUES (4820, 1, 202);
INSERT INTO `tb_role_resource` VALUES (4821, 1, 203);
INSERT INTO `tb_role_resource` VALUES (4822, 1, 204);
INSERT INTO `tb_role_resource` VALUES (4823, 1, 230);
INSERT INTO `tb_role_resource` VALUES (4824, 1, 238);
INSERT INTO `tb_role_resource` VALUES (4825, 1, 177);
INSERT INTO `tb_role_resource` VALUES (4826, 1, 229);
INSERT INTO `tb_role_resource` VALUES (4827, 1, 232);
INSERT INTO `tb_role_resource` VALUES (4828, 1, 233);
INSERT INTO `tb_role_resource` VALUES (4829, 1, 243);
INSERT INTO `tb_role_resource` VALUES (4830, 1, 178);
INSERT INTO `tb_role_resource` VALUES (4831, 1, 196);
INSERT INTO `tb_role_resource` VALUES (4832, 1, 197);
INSERT INTO `tb_role_resource` VALUES (4833, 1, 198);
INSERT INTO `tb_role_resource` VALUES (4834, 1, 257);
INSERT INTO `tb_role_resource` VALUES (4835, 1, 258);
INSERT INTO `tb_role_resource` VALUES (4836, 1, 179);
INSERT INTO `tb_role_resource` VALUES (4837, 1, 225);
INSERT INTO `tb_role_resource` VALUES (4838, 1, 226);
INSERT INTO `tb_role_resource` VALUES (4839, 1, 227);
INSERT INTO `tb_role_resource` VALUES (4840, 1, 228);
INSERT INTO `tb_role_resource` VALUES (4841, 1, 231);
INSERT INTO `tb_role_resource` VALUES (4842, 1, 180);
INSERT INTO `tb_role_resource` VALUES (4843, 1, 210);
INSERT INTO `tb_role_resource` VALUES (4844, 1, 211);
INSERT INTO `tb_role_resource` VALUES (4845, 1, 212);
INSERT INTO `tb_role_resource` VALUES (4846, 1, 278);
INSERT INTO `tb_role_resource` VALUES (4847, 1, 282);
INSERT INTO `tb_role_resource` VALUES (4848, 1, 283);
INSERT INTO `tb_role_resource` VALUES (4849, 1, 284);
INSERT INTO `tb_role_resource` VALUES (4850, 1, 285);
INSERT INTO `tb_role_resource` VALUES (4851, 1, 286);
INSERT INTO `tb_role_resource` VALUES (4852, 1, 287);
INSERT INTO `tb_role_resource` VALUES (4853, 3, 192);
INSERT INTO `tb_role_resource` VALUES (4854, 3, 195);
INSERT INTO `tb_role_resource` VALUES (4855, 3, 183);
INSERT INTO `tb_role_resource` VALUES (4856, 3, 246);
INSERT INTO `tb_role_resource` VALUES (4857, 3, 199);
INSERT INTO `tb_role_resource` VALUES (4858, 3, 185);
INSERT INTO `tb_role_resource` VALUES (4859, 3, 191);
INSERT INTO `tb_role_resource` VALUES (4860, 3, 254);
INSERT INTO `tb_role_resource` VALUES (4861, 3, 208);
INSERT INTO `tb_role_resource` VALUES (4862, 3, 234);
INSERT INTO `tb_role_resource` VALUES (4863, 3, 237);
INSERT INTO `tb_role_resource` VALUES (4864, 3, 213);
INSERT INTO `tb_role_resource` VALUES (4865, 3, 241);
INSERT INTO `tb_role_resource` VALUES (4866, 3, 239);
INSERT INTO `tb_role_resource` VALUES (4867, 3, 276);
INSERT INTO `tb_role_resource` VALUES (4868, 3, 205);
INSERT INTO `tb_role_resource` VALUES (4869, 3, 218);
INSERT INTO `tb_role_resource` VALUES (4870, 3, 221);
INSERT INTO `tb_role_resource` VALUES (4871, 3, 223);
INSERT INTO `tb_role_resource` VALUES (4872, 3, 202);
INSERT INTO `tb_role_resource` VALUES (4873, 3, 230);
INSERT INTO `tb_role_resource` VALUES (4874, 3, 238);
INSERT INTO `tb_role_resource` VALUES (4875, 3, 232);
INSERT INTO `tb_role_resource` VALUES (4876, 3, 243);
INSERT INTO `tb_role_resource` VALUES (4877, 3, 196);
INSERT INTO `tb_role_resource` VALUES (4878, 3, 257);
INSERT INTO `tb_role_resource` VALUES (4879, 3, 258);
INSERT INTO `tb_role_resource` VALUES (4880, 3, 225);
INSERT INTO `tb_role_resource` VALUES (4881, 3, 231);
INSERT INTO `tb_role_resource` VALUES (4882, 3, 210);
INSERT INTO `tb_role_resource` VALUES (4883, 3, 282);
INSERT INTO `tb_role_resource` VALUES (4884, 3, 286);
INSERT INTO `tb_role_resource` VALUES (4885, 3, 287);

-- ----------------------------
-- Table structure for tb_tag
-- ----------------------------
DROP TABLE IF EXISTS `tb_tag`;
CREATE TABLE `tb_tag`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `create_time` datetime(3) NULL DEFAULT NULL,
  `update_time` datetime(3) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 40 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_tag
-- ----------------------------
INSERT INTO `tb_tag` VALUES (29, 'SpringBoot', '2022-01-24 23:33:57.000', '2023-11-25 10:16:43.000');
INSERT INTO `tb_tag` VALUES (30, '算法', '2023-11-25 23:24:49.000', NULL);
INSERT INTO `tb_tag` VALUES (31, '前端', '2023-11-27 09:52:58.000', NULL);
INSERT INTO `tb_tag` VALUES (32, 'git', '2023-11-27 20:25:56.000', '2024-08-24 22:45:12.712');
INSERT INTO `tb_tag` VALUES (33, '微信', '2023-11-27 21:53:51.000', NULL);
INSERT INTO `tb_tag` VALUES (34, '测试', '2024-07-28 17:49:04.013', '2024-08-25 18:22:32.513');
INSERT INTO `tb_tag` VALUES (35, 'Go', '2024-07-28 17:49:04.015', '2024-08-25 18:10:59.714');

-- ----------------------------
-- Table structure for tb_talk
-- ----------------------------
DROP TABLE IF EXISTS `tb_talk`;
CREATE TABLE `tb_talk`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '说说id',
  `user_id` int NOT NULL COMMENT '用户id',
  `content` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '说说内容',
  `images` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '图片',
  `is_top` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否置顶',
  `status` tinyint(1) NOT NULL DEFAULT 1 COMMENT '状态 1.公开 2.私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_talk
-- ----------------------------
INSERT INTO `tb_talk` VALUES (49, 1, '迷恋技术，保持对代码的热情<img src=\"https://blog-felix.oss-cn-beijing.aliyuncs.com/articles/goutou.jpeg\" width=\"24\" height=\"24\" alt=\"[狗头]\" style=\"margin: 0 1px;vertical-align: text-bottom\">', NULL, 0, 1, '2022-01-24 23:34:59', NULL);

-- ----------------------------
-- Table structure for tb_unique_view
-- ----------------------------
DROP TABLE IF EXISTS `tb_unique_view`;
CREATE TABLE `tb_unique_view`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `views_count` int NOT NULL COMMENT '访问量',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 536 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_unique_view
-- ----------------------------
INSERT INTO `tb_unique_view` VALUES (534, 3, '2023-11-24 00:00:00', NULL);
INSERT INTO `tb_unique_view` VALUES (535, 1, '2024-05-15 08:41:04', NULL);

-- ----------------------------
-- Table structure for tb_user_auth
-- ----------------------------
DROP TABLE IF EXISTS `tb_user_auth`;
CREATE TABLE `tb_user_auth`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_info_id` int NOT NULL COMMENT '用户信息id',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码',
  `login_type` tinyint(1) NOT NULL COMMENT '登录类型',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户登录ip',
  `ip_source` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `last_login_time` datetime NULL DEFAULT NULL COMMENT '上次登录时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1001 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_user_auth
-- ----------------------------
INSERT INTO `tb_user_auth` VALUES (1, 1, 'admin@qq.com', '$2a$10$AkxkZaqcxEXdiNE1nrgW1.ms3aS9C5ImXMf8swkWUJuFGMqDl.TPW', 1, '0:0:0:0:0:0:0:1', '', '2021-08-12 15:43:18', '2024-07-31 11:52:58', '2024-07-31 11:52:58');
INSERT INTO `tb_user_auth` VALUES (995, 1005, 'xiaainy@163.com', '$2a$10$K7KQJ8mED4NKLvaNlAOx5ey4NbcU1CUDrEJnL9zCWNIvnbjrhwOnK', 1, '61.222.202.239', '台湾省', '2022-01-27 10:58:11', '2022-01-27 10:58:12', '2022-01-27 10:58:12');
INSERT INTO `tb_user_auth` VALUES (996, 1006, 'lffting@163.com', '$2a$10$IxM2Rs4kXN/bV0YSQSrg3OtucY7R5/bRGe2z0gvLekkFzBUUtPkCS', 1, 'Unknown IP', 'Unknown location', '2023-11-25 09:39:47', '2024-08-09 12:33:24', '2024-08-09 12:33:24');
INSERT INTO `tb_user_auth` VALUES (1000, 1011, '764190745@qq.com', '$2a$10$TNpYvCbpxqPsXnb6k5YmZ.y5xh9nbb4JHNrmHvnNxEYJPG/nae/pK', 1, '', '', '2024-08-20 16:40:25', '2024-08-20 18:09:19', NULL);

-- ----------------------------
-- Table structure for tb_user_info
-- ----------------------------
DROP TABLE IF EXISTS `tb_user_info`;
CREATE TABLE `tb_user_info`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '邮箱号',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `avatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '用户头像',
  `intro` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户简介',
  `web_site` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '个人网站',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1012 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_user_info
-- ----------------------------
INSERT INTO `tb_user_info` VALUES (1, 'admin@qq.com', '管理员', 'https://static.talkxj.com/avatar/user.png', 'admin@qq.com', NULL, 0, '2021-08-12 15:43:17', '2021-08-12 15:51:42');
INSERT INTO `tb_user_info` VALUES (1005, 'xiaainy@163.com', '用户1486533968342859778', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', NULL, NULL, 0, '2022-01-27 10:58:11', NULL);
INSERT INTO `tb_user_info` VALUES (1006, '764190745@qq.com', 'Felix', 'http://blog-felix.oss-cn-beijing.aliyuncs.com/avatar/ebb70b02e104df8aa253acffef5dd170.jpg', '追求完美', 'https://blog.csdn.net/m0_56787367?spm=1000.2115.3001.5343', 0, '2023-11-25 09:39:46', '2024-08-16 17:13:07');
INSERT INTO `tb_user_info` VALUES (1007, '764190745@qq.com', '用户unique-id', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', '', '', 0, '2024-08-20 11:25:13', '2024-08-20 11:25:13');
INSERT INTO `tb_user_info` VALUES (1008, '764190745@qq.com', '用户unique-id', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', '', '', 0, '2024-08-20 11:29:19', '2024-08-20 11:29:19');
INSERT INTO `tb_user_info` VALUES (1009, '764190745@qq.com', '用户unique-id', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', '', '', 0, '2024-08-20 16:33:18', '2024-08-20 16:33:18');
INSERT INTO `tb_user_info` VALUES (1010, '764190745@qq.com', '用户unique-id', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', '', '', 0, '2024-08-20 16:37:42', '2024-08-20 16:37:42');
INSERT INTO `tb_user_info` VALUES (1011, '764190745@qq.com', '用户unique-id', 'https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg', '', '', 0, '2024-08-20 16:40:25', '2024-08-20 18:07:39');

-- ----------------------------
-- Table structure for tb_user_role
-- ----------------------------
DROP TABLE IF EXISTS `tb_user_role`;
CREATE TABLE `tb_user_role`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NULL DEFAULT NULL COMMENT '用户id',
  `role_id` int NULL DEFAULT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1011 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_user_role
-- ----------------------------
INSERT INTO `tb_user_role` VALUES (1001, 1, 1);
INSERT INTO `tb_user_role` VALUES (1002, 1005, 2);
INSERT INTO `tb_user_role` VALUES (1004, 1006, 2);
INSERT INTO `tb_user_role` VALUES (1005, 1006, 1);
INSERT INTO `tb_user_role` VALUES (1006, 1007, 2);
INSERT INTO `tb_user_role` VALUES (1007, 1008, 2);
INSERT INTO `tb_user_role` VALUES (1008, 1009, 2);
INSERT INTO `tb_user_role` VALUES (1009, 1010, 2);
INSERT INTO `tb_user_role` VALUES (1010, 1011, 2);

-- ----------------------------
-- Table structure for tb_website_config
-- ----------------------------
DROP TABLE IF EXISTS `tb_website_config`;
CREATE TABLE `tb_website_config`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `config` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '配置信息',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tb_website_config
-- ----------------------------
INSERT INTO `tb_website_config` VALUES (1, '{\"alipayQRCode\":\"https://static.talkxj.com/photos/13d83d77cc1f7e4e0437d7feaf56879f.png\",\"gitee\":\"\",\"github\":\"\",\"isChatRoom\":1,\"isCommentReview\":0,\"isEmailNotice\":1,\"isMessageReview\":0,\"isMusicPlayer\":1,\"isReward\":1,\"qq\":\"\",\"socialLoginList\":[\"qq\",\"weibo\"],\"socialUrlList\":[\"qq\",\"github\",\"gitee\"],\"touristAvatar\":\"https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png\",\"userAvatar\":\"https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg\",\"websiteAuthor\":\"Felix\",\"websiteAvatar\":\"http://blog-felix.oss-cn-beijing.aliyuncs.com/config/b99dd9fb9bbf945d2d8f5eeb13fb6766.jpg\",\"websiteCreateTime\":\"2019-09-12\",\"websiteIntro\":\"没有好的选择，就逼自己做的更好。\",\"websiteName\":\"Felix Blog\",\"websiteNotice\":\"不定期更新\",\"websiteRecordNo\":\"备案号\",\"websocketUrl\":\"ws://127.0.0.1:8080/websocket\",\"weiXinQRCode\":\"https://static.talkxj.com/photos/4f767ef84e55ab9ad42b2d20e51deca1.png\"}', '2021-08-09 19:37:30', '2023-11-25 18:46:40');

SET FOREIGN_KEY_CHECKS = 1;
