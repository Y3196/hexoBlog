{"remainingRequest":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\src\\views\\article\\Article.vue?vue&type=style&index=0&id=13a80313&scoped=true&lang=css","dependencies":[{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\src\\views\\article\\Article.vue","mtime":1724562434884},{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\sourceCode\\Backend\\blog-master\\blog-vue\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hcnRpY2xlLXRpdGxlLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIG1hcmdpbi1ib3R0b206IDEuMjVyZW07CiAgbWFyZ2luLXRvcDogMi4yNXJlbTsKfQouc2F2ZS1idG4gewogIG1hcmdpbi1sZWZ0OiAwLjc1cmVtOwogIGJhY2tncm91bmQ6ICNmZmY7CiAgY29sb3I6ICNmNTZjNmM7Cn0KLnRhZy1pdGVtIHsKICBtYXJnaW4tcmlnaHQ6IDFyZW07CiAgbWFyZ2luLWJvdHRvbTogMXJlbTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLnRhZy1pdGVtLXNlbGVjdCB7CiAgbWFyZ2luLXJpZ2h0OiAxcmVtOwogIG1hcmdpbi1ib3R0b206IDFyZW07CiAgY3Vyc29yOiBub3QtYWxsb3dlZDsKICBjb2xvcjogI2NjY2NkOCAhaW1wb3J0YW50Owp9Ci5jYXRlZ29yeS1pdGVtIHsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcGFkZGluZzogMC42cmVtIDAuNXJlbTsKfQouY2F0ZWdvcnktaXRlbTpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjllYjsKICBjb2xvcjogIzY3YzIzYTsKfQoucG9wb3Zlci10aXRsZSB7CiAgbWFyZ2luLWJvdHRvbTogMXJlbTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLnBvcG92ZXItY29udGFpbmVyIHsKICBtYXJnaW4tdG9wOiAxcmVtOwogIGhlaWdodDogMjYwcHg7CiAgb3ZlcmZsb3cteTogYXV0bzsKfQo="},{"version":3,"sources":["Article.vue"],"names":[],"mappings":";AAslBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Article.vue","sourceRoot":"src/views/article","sourcesContent":["<template>\n  <el-card class=\"main-card\">\n    <div class=\"title\">{{ this.$route.name }}</div>\n    <!-- 文章标题 -->\n    <div class=\"article-title-container\">\n      <el-input\n        v-model=\"article.articleTitle\"\n        size=\"medium\"\n        placeholder=\"输入文章标题\"\n      />\n      <el-button\n        type=\"danger\"\n        size=\"medium\"\n        class=\"save-btn\"\n        @click=\"saveArticleDraft\"\n        v-if=\"article.id == null || article.status == 3\"\n      >\n        保存草稿\n      </el-button>\n      <el-button\n        type=\"danger\"\n        size=\"medium\"\n        @click=\"openModel\"\n        style=\"margin-left:10px\"\n      >\n        发布文章\n      </el-button>\n    </div>\n    <!-- 文章内容 -->\n    <mavon-editor\n      ref=\"md\"\n      v-model=\"article.articleContent\"\n      @imgAdd=\"uploadImg\"\n      style=\"height:calc(100vh - 260px)\"\n    />\n    <!-- 添加文章对话框 -->\n    <el-dialog :visible.sync=\"addOrEdit\" width=\"40%\" top=\"3vh\">\n      <div class=\"dialog-title-container\" slot=\"title\">\n        发布文章\n      </div>\n      <!-- 文章数据 -->\n      <el-form label-width=\"80px\" size=\"medium\" :model=\"article\">\n        <!-- 文章分类 -->\n        <el-form-item label=\"文章分类\">\n          <el-tag\n            type=\"success\"\n            v-show=\"article.categoryName\"\n            style=\"margin:0 1rem 0 0\"\n            :closable=\"true\"\n            @close=\"removeCategory\"\n          >\n            {{ article.categoryName }}\n          </el-tag>\n          <!-- 分类选项 -->\n          <el-popover\n            placement=\"bottom-start\"\n            width=\"460\"\n            trigger=\"click\"\n            v-if=\"!article.categoryName\"\n          >\n            <div class=\"popover-title\">分类</div>\n            <!-- 搜索框 -->\n            <el-autocomplete\n              style=\"width:100%\"\n              v-model=\"categoryName\"\n              :fetch-suggestions=\"searchCategories\"\n              placeholder=\"请输入分类名搜索，enter可添加自定义分类\"\n              :trigger-on-focus=\"false\"\n              @keyup.enter.native=\"saveCategory\"\n              @select=\"handleSelectCategories\"\n            >\n              <template slot-scope=\"{ item }\">\n                <div>{{ item.categoryName }}</div>\n              </template>\n            </el-autocomplete>\n            <!-- 分类 -->\n            <div class=\"popover-container\">\n              <div\n                v-for=\"item of categoryList\"\n                :key=\"item.id\"\n                class=\"category-item\"\n                @click=\"addCategory(item)\"\n              >\n                {{ item.categoryName }}\n              </div>\n            </div>\n            <el-button type=\"success\" plain slot=\"reference\" size=\"small\">\n              添加分类\n            </el-button>\n          </el-popover>\n        </el-form-item>\n        <!-- 文章标签 -->\n        <el-form-item label=\"文章标签\">\n          <el-tag\n            v-for=\"(item, index) of article.tagNameList\"\n            :key=\"index\"\n            style=\"margin:0 1rem 0 0\"\n            :closable=\"true\"\n            @close=\"removeTag(item)\"\n          >\n            {{ item }}\n          </el-tag>\n          <!-- 标签选项 -->\n          <el-popover\n            placement=\"bottom-start\"\n            width=\"460\"\n            trigger=\"click\"\n            v-if=\"article.tagNameList.length < 3\"\n          >\n            <div class=\"popover-title\">标签</div>\n            <!-- 搜索框 -->\n            <el-autocomplete\n              style=\"width:100%\"\n              v-model=\"tagName\"\n              :fetch-suggestions=\"searchTags\"\n              placeholder=\"请输入标签名搜索，enter可添加自定义标签\"\n              :trigger-on-focus=\"false\"\n              @keyup.enter.native=\"saveTag\"\n              @select=\"handleSelectTag\"\n            >\n              <template slot-scope=\"{ item }\">\n                <div>{{ item.tagName }}</div>\n              </template>\n            </el-autocomplete>\n            <!-- 标签 -->\n            <div class=\"popover-container\">\n              <div style=\"margin-bottom:1rem\">添加标签</div>\n              <el-tag\n                v-for=\"(item, index) of tagList\"\n                :key=\"index\"\n                :class=\"tagClass(item)\"\n                @click=\"addTag(item)\"\n              >\n                {{ item.tagName }}\n              </el-tag>\n            </div>\n            <el-button type=\"primary\" plain slot=\"reference\" size=\"small\">\n              添加标签\n            </el-button>\n          </el-popover>\n        </el-form-item>\n        <el-form-item label=\"文章类型\">\n          <el-select v-model=\"article.type\" placeholder=\"请选择类型\">\n            <el-option\n              v-for=\"item in typeList\"\n              :key=\"item.type\"\n              :label=\"item.desc\"\n              :value=\"item.type\"\n            />\n          </el-select>\n        </el-form-item>\n        <!-- 文章类型 -->\n        <el-form-item label=\"原文地址\" v-if=\"article.type != 1\">\n          <el-input\n            v-model=\"article.originalUrl\"\n            placeholder=\"请填写原文链接\"\n          />\n        </el-form-item>\n        <el-form-item label=\"上传封面\">\n          <el-upload\n            class=\"upload-cover\"\n            drag\n            action=\"/api/admin/articles/images\"\n            multiple\n            :before-upload=\"beforeUpload\"\n            :on-success=\"uploadCover\"\n          >\n            <i class=\"el-icon-upload\" v-if=\"article.articleCover == ''\" />\n            <div class=\"el-upload__text\" v-if=\"article.articleCover == ''\">\n              将文件拖到此处，或<em>点击上传</em>\n            </div>\n            <img\n              v-else\n              :src=\"article.articleCover\"\n              width=\"360px\"\n              height=\"180px\"\n            />\n          </el-upload>\n        </el-form-item>\n        <el-form-item label=\"置顶\">\n          <el-switch\n            v-model=\"article.isTop\"\n            active-color=\"#13ce66\"\n            inactive-color=\"#F4F4F5\"\n            :active-value=\"1\"\n            :inactive-value=\"0\"\n          />\n        </el-form-item>\n        <el-form-item label=\"发布形式\">\n          <el-radio-group v-model=\"article.status\">\n            <el-radio :label=\"1\">公开</el-radio>\n            <el-radio :label=\"2\">私密</el-radio>\n          </el-radio-group>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"addOrEdit = false\">取 消</el-button>\n        <el-button type=\"danger\" @click=\"saveOrUpdateArticle\">\n          发 表\n        </el-button>\n      </div>\n    </el-dialog>\n  </el-card>\n</template>\n\n<script>\nimport * as imageConversion from \"image-conversion\";\n\nexport default {\n  created() {\n    const path = this.$route.path;\n    const arr = path.split(\"/\");\n    const articleId = arr[2];\n    if (articleId) {\n      const token = this.$store.state.token || localStorage.getItem('token');\n      this.axios.get(\"/api/admin/articles/\" + articleId, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(({ data }) => {\n        this.article = data.data;\n      }).catch(error => {\n        if (error.response && error.response.status === 401) {\n          this.$router.push('/login');\n        }\n      });\n    } else {\n      const article = sessionStorage.getItem(\"article\");\n      if (article) {\n        this.article = JSON.parse(article);\n      }\n    }\n  },\n  destroyed() {\n    //文章自动保存功能\n    this.autoSaveArticle();\n  },\n  data: function() {\n    return {\n      addOrEdit: false,\n      autoSave: true,\n      categoryName: \"\",\n      tagName: \"\",\n      categoryList: [],\n      tagList: [],\n      typeList: [\n        {\n          type: 1,\n          desc: \"原创\"\n        },\n        {\n          type: 2,\n          desc: \"转载\"\n        },\n        {\n          type: 3,\n          desc: \"翻译\"\n        }\n      ],\n      article: {\n        id: null,\n        articleTitle: this.$moment(new Date()).format(\"YYYY-MM-DD\"),\n        articleContent: \"\",\n        articleCover: \"\",\n        categoryName: null,\n        tagNameList: [],\n        originalUrl: \"\",\n        isTop: 0,\n        type: 1,\n        status: 1\n      }\n    };\n  },\n  methods: {\n    listCategories() {\n      this.axios.get(\"/api/admin/categories/search\", {\n      }).then(({ data }) => {\n        this.categoryList = data.data.recordList;\n        console.log(\"Loaded categories:\", this.categoryList); // 检查获取到的分类数据\n      }).catch(error => {\n        console.error(\"Error loading categories:\", error);\n      });\n    },\n    listTags() {\n      this.axios.get(\"/api/admin/tags/search\", {\n      }).then(({ data }) => {\n        this.tagList = data.data;\n      });\n    },\n    openModel() {\n      if (this.article.articleTitle.trim() == \"\") {\n        this.$message.error(\"文章标题不能为空\");\n        return false;\n      }\n      if (this.article.articleContent.trim() == \"\") {\n        this.$message.error(\"文章内容不能为空\");\n        return false;\n      }\n      this.listCategories();\n      this.listTags();\n      this.addOrEdit = true;\n    },\n    uploadCover(response) {\n      console.log(\"Upload response:\", response);\n      this.article.articleCover = response.data;\n    },\n    beforeUpload(file) {\n      console.log(\"Received file for upload:\", file);\n      return new Promise(resolve => {\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n          console.log(\"File size is within limit, proceeding with upload.\");\n          resolve(file); // 直接上传文件\n        } else {\n          console.log(\"File size exceeds limit, compressing...\");\n          imageConversion\n              .compressAccurately(file, this.config.UPLOAD_SIZE)\n              .then(res => {\n                console.log(\"File compression successful:\", res);\n                // 确保压缩后的文件对象被传递到 resolve 回调中\n                resolve(new window.File([res], file.name, { type: file.type }));\n              })\n              .catch(error => {\n                console.error(\"Error during file compression:\", error);\n              });\n        }\n      });\n    },\n    uploadImg(pos, file) {\n      const token = this.$store.state.token || localStorage.getItem('token');\n      var formdata = new FormData();\n      if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n        formdata.append(\"file\", file);\n        this.axios.post(\"/api/admin/articles/images\", formdata).then(({ data }) => {\n          const imgUrlWithTimestamp = `${data.data}?t=${new Date().getTime()}`;\n          console.log(\"URL to insert:\", imgUrlWithTimestamp);\n          this.$refs.md.$img2Url(pos, imgUrlWithTimestamp);\n        });\n      } else {\n        imageConversion\n            .compressAccurately(file, this.config.UPLOAD_SIZE)\n            .then(res => {\n              formdata.append(\n                  \"file\",\n                  new window.File([res], file.name, { type: file.type })\n              );\n              this.axios.post(\"/api/admin/articles/images\", formdata, {\n                headers: {\n                  'Authorization': `Bearer ${token}`\n                }\n              }).then(({ data }) => {\n                const imgUrlWithTimestamp = `${data.data}?t=${new Date().getTime()}`;\n                console.log(\"URL to insert:\", imgUrlWithTimestamp);\n                this.$refs.md.$img2Url(pos, imgUrlWithTimestamp);\n              });\n            });\n      }\n    },\n\n    saveArticleDraft() {\n      if (this.article.articleTitle.trim() == \"\") {\n        this.$message.error(\"文章标题不能为空\");\n        return false;\n      }\n      if (this.article.articleContent.trim() == \"\") {\n        this.$message.error(\"文章内容不能为空\");\n        return false;\n      }\n      this.article.status = 3;\n      const token = this.$store.state.token || localStorage.getItem('token');\n      this.axios.post(\"/api/admin/articles\", this.article, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(({ data }) => {\n        if (data.flag) {\n          if (this.article.id === null) {\n            this.$store.commit(\"removeTab\", \"发布文章\");\n          } else {\n            this.$store.commit(\"removeTab\", \"修改文章\");\n          }\n          sessionStorage.removeItem(\"article\");\n\n          if (this.$route.path !== '/article-list') {\n            this.$router.push({ path: \"/article-list\" }).catch(err => {\n              if (err.name !== 'NavigationDuplicated') {\n                throw err;\n              }\n            });\n          }\n\n          this.$notify.success({\n            title: \"成功\",\n            message: \"保存草稿成功\"\n          });\n        } else {\n          this.$notify.error({\n            title: \"失败\",\n            message: \"保存草稿失败\"\n          });\n        }\n      }).catch(error => {\n        if (error.response && error.response.status === 401) {\n          this.$router.push('/login');\n        } else {\n          this.$notify.error({\n            title: \"请求失败\",\n            message: error.message\n          });\n        }\n      });\n\n      this.autoSave = false;\n    },\n    saveOrUpdateArticle() {\n      if (this.article.articleTitle.trim() == \"\") {\n        this.$message.error(\"文章标题不能为空\");\n        return false;\n      }\n      if (this.article.articleContent.trim() == \"\") {\n        this.$message.error(\"文章内容不能为空\");\n        return false;\n      }\n      if (this.article.categoryName == null) {\n        this.$message.error(\"文章分类不能为空\");\n        return false;\n      }\n      if (this.article.tagNameList.length == 0) {\n        this.$message.error(\"文章标签不能为空\");\n        return false;\n      }\n      if (this.article.articleCover.trim() == \"\") {\n        this.$message.error(\"文章封面不能为空\");\n        return false;\n      }\n      // 前端去重处理（如果需要）\n      this.article.tagNameList = [...new Set(this.article.tagNameList)];\n      const token = this.$store.state.token || localStorage.getItem('token');\n      this.axios.post(\"/api/admin/articles\", this.article, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(({ data }) => {\n        console.log(\"Response data:\", data); // 打印接收到的数据\n        if (data.flag) {\n          console.log(\"Submitting article with category:\", this.article.categoryName);\n          if (this.article.id === null) {\n            this.$store.commit(\"removeTab\", \"发布文章\");\n          } else {\n            this.$store.commit(\"removeTab\", \"修改文章\");\n          }\n          sessionStorage.removeItem(\"article\");\n\n          if (this.$route.path !== '/article-list') {\n            this.$router.push({ path: \"/article-list\" }).catch(err => {\n              if (err.name !== 'NavigationDuplicated') {\n                throw err;\n              }\n            });\n          }\n\n          this.$notify.success({\n            title: \"成功\",\n            message: data.message\n          });\n        } else {\n          this.$notify.error({\n            title: \"失败\",\n            message: data.message\n          });\n        }\n        this.addOrEdit = false;\n      }).catch(error => {\n        if (error.response && error.response.status === 401) {\n          this.$router.push('/login');\n        } else {\n          this.$notify.error({\n            title: \"请求失败\",\n            message: error.message\n          });\n        }\n      });\n\n      this.autoSave = false;\n    },\n    autoSaveArticle() {\n      if (\n          this.autoSave &&\n          this.article.articleTitle.trim() != \"\" &&\n          this.article.articleContent.trim() != \"\" &&\n          this.article.id != null\n      ) {\n        const token = this.$store.state.token || localStorage.getItem('token');\n        this.axios.post(\"/api/admin/articles\", this.article, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }).then(({ data }) => {\n          if (data.flag) {\n            this.$notify.success({\n              title: \"成功\",\n              message: \"自动保存成功\"\n            });\n          } else {\n            this.$notify.error({\n              title: \"失败\",\n              message: \"自动保存失败\"\n            });\n          }\n        }).catch(error => {\n          if (error.response && error.response.status === 401) {\n            this.$router.push('/login');\n          } else {\n            this.$notify.error({\n              title: \"请求失败\",\n              message: error.message\n            });\n          }\n        });\n      }\n\n      if (this.autoSave && this.article.id == null) {\n        sessionStorage.setItem(\"article\", JSON.stringify(this.article));\n      }\n    },\n    searchCategories(keywords, cb) {\n      this.axios.get(\"/api/admin/categories/search\", {\n        params: {\n          keywords: keywords\n        },\n      }).then(({ data }) => {\n        console.log(\"Fetched categories:\", data.data); // 日志输出返回的数据\n        cb(data.data);\n      });\n    },\n    handleSelectCategories(item) {\n      this.addCategory({\n        categoryName: item.categoryName\n      });\n    },\n    saveCategory() {\n      if (this.categoryName.trim() != \"\") {\n        this.addCategory({\n          categoryName: this.categoryName\n        });\n        this.categoryName = \"\";\n      }\n    },\n    addCategory(item) {\n      this.article.categoryName = item.categoryName;\n    },\n    removeCategory() {\n      this.article.categoryName = null;\n    },\n    searchTags(keywords, cb) {\n      this.axios.get(\"/api/admin/tags/search\", {\n        params: {\n          keywords: keywords\n        },\n      }).then(({ data }) => {\n        cb(data.data);\n      });\n    },\n    handleSelectTag(item) {\n      this.addTag({\n        tagName: item.tagName\n      });\n    },\n    saveTag() {\n      if (this.tagName.trim() != \"\") {\n        this.addTag({\n          tagName: this.tagName\n        });\n        this.tagName = \"\";\n      }\n    },\n    addTag(item) {\n      if (this.article.tagNameList.indexOf(item.tagName) == -1) {\n        this.article.tagNameList.push(item.tagName);\n      }\n    },\n    removeTag(item) {\n      const index = this.article.tagNameList.indexOf(item);\n      this.article.tagNameList.splice(index, 1);\n    }\n  },\n  computed: {\n    tagClass() {\n      return function(item) {\n        const index = this.article.tagNameList.indexOf(item.tagName);\n        return index != -1 ? \"tag-item-select\" : \"tag-item\";\n      };\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.article-title-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.25rem;\n  margin-top: 2.25rem;\n}\n.save-btn {\n  margin-left: 0.75rem;\n  background: #fff;\n  color: #f56c6c;\n}\n.tag-item {\n  margin-right: 1rem;\n  margin-bottom: 1rem;\n  cursor: pointer;\n}\n.tag-item-select {\n  margin-right: 1rem;\n  margin-bottom: 1rem;\n  cursor: not-allowed;\n  color: #ccccd8 !important;\n}\n.category-item {\n  cursor: pointer;\n  padding: 0.6rem 0.5rem;\n}\n.category-item:hover {\n  background-color: #f0f9eb;\n  color: #67c23a;\n}\n.popover-title {\n  margin-bottom: 1rem;\n  text-align: center;\n}\n.popover-container {\n  margin-top: 1rem;\n  height: 260px;\n  overflow-y: auto;\n}\n</style>\n"]}]}